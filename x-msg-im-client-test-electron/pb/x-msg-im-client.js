/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.XmsgImGroupSendMsgReq = (function() {

    /**
     * Properties of a XmsgImGroupSendMsgReq.
     * @exports IXmsgImGroupSendMsgReq
     * @interface IXmsgImGroupSendMsgReq
     * @property {string|null} [cgt] XmsgImGroupSendMsgReq cgt
     * @property {number|Long|null} [localMsgId] XmsgImGroupSendMsgReq localMsgId
     * @property {IXmsgImMsg|null} [msg] XmsgImGroupSendMsgReq msg
     * @property {Object.<string,string>|null} [ext] XmsgImGroupSendMsgReq ext
     */

    /**
     * Constructs a new XmsgImGroupSendMsgReq.
     * @exports XmsgImGroupSendMsgReq
     * @classdesc Represents a XmsgImGroupSendMsgReq.
     * @implements IXmsgImGroupSendMsgReq
     * @constructor
     * @param {IXmsgImGroupSendMsgReq=} [properties] Properties to set
     */
    function XmsgImGroupSendMsgReq(properties) {
        this.ext = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupSendMsgReq cgt.
     * @member {string} cgt
     * @memberof XmsgImGroupSendMsgReq
     * @instance
     */
    XmsgImGroupSendMsgReq.prototype.cgt = "";

    /**
     * XmsgImGroupSendMsgReq localMsgId.
     * @member {number|Long} localMsgId
     * @memberof XmsgImGroupSendMsgReq
     * @instance
     */
    XmsgImGroupSendMsgReq.prototype.localMsgId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupSendMsgReq msg.
     * @member {IXmsgImMsg|null|undefined} msg
     * @memberof XmsgImGroupSendMsgReq
     * @instance
     */
    XmsgImGroupSendMsgReq.prototype.msg = null;

    /**
     * XmsgImGroupSendMsgReq ext.
     * @member {Object.<string,string>} ext
     * @memberof XmsgImGroupSendMsgReq
     * @instance
     */
    XmsgImGroupSendMsgReq.prototype.ext = $util.emptyObject;

    /**
     * Creates a new XmsgImGroupSendMsgReq instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupSendMsgReq
     * @static
     * @param {IXmsgImGroupSendMsgReq=} [properties] Properties to set
     * @returns {XmsgImGroupSendMsgReq} XmsgImGroupSendMsgReq instance
     */
    XmsgImGroupSendMsgReq.create = function create(properties) {
        return new XmsgImGroupSendMsgReq(properties);
    };

    /**
     * Encodes the specified XmsgImGroupSendMsgReq message. Does not implicitly {@link XmsgImGroupSendMsgReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupSendMsgReq
     * @static
     * @param {IXmsgImGroupSendMsgReq} message XmsgImGroupSendMsgReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSendMsgReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.localMsgId != null && message.hasOwnProperty("localMsgId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.localMsgId);
        if (message.msg != null && message.hasOwnProperty("msg"))
            $root.XmsgImMsg.encode(message.msg, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.ext != null && message.hasOwnProperty("ext"))
            for (var keys = Object.keys(message.ext), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.ext[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupSendMsgReq message, length delimited. Does not implicitly {@link XmsgImGroupSendMsgReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupSendMsgReq
     * @static
     * @param {IXmsgImGroupSendMsgReq} message XmsgImGroupSendMsgReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSendMsgReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupSendMsgReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupSendMsgReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupSendMsgReq} XmsgImGroupSendMsgReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSendMsgReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupSendMsgReq(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.localMsgId = reader.uint64();
                break;
            case 3:
                message.msg = $root.XmsgImMsg.decode(reader, reader.uint32());
                break;
            case 4:
                reader.skip().pos++;
                if (message.ext === $util.emptyObject)
                    message.ext = {};
                key = reader.string();
                reader.pos++;
                message.ext[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupSendMsgReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupSendMsgReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupSendMsgReq} XmsgImGroupSendMsgReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSendMsgReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupSendMsgReq message.
     * @function verify
     * @memberof XmsgImGroupSendMsgReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupSendMsgReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.localMsgId != null && message.hasOwnProperty("localMsgId"))
            if (!$util.isInteger(message.localMsgId) && !(message.localMsgId && $util.isInteger(message.localMsgId.low) && $util.isInteger(message.localMsgId.high)))
                return "localMsgId: integer|Long expected";
        if (message.msg != null && message.hasOwnProperty("msg")) {
            var error = $root.XmsgImMsg.verify(message.msg);
            if (error)
                return "msg." + error;
        }
        if (message.ext != null && message.hasOwnProperty("ext")) {
            if (!$util.isObject(message.ext))
                return "ext: object expected";
            var key = Object.keys(message.ext);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.ext[key[i]]))
                    return "ext: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupSendMsgReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupSendMsgReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupSendMsgReq} XmsgImGroupSendMsgReq
     */
    XmsgImGroupSendMsgReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupSendMsgReq)
            return object;
        var message = new $root.XmsgImGroupSendMsgReq();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.localMsgId != null)
            if ($util.Long)
                (message.localMsgId = $util.Long.fromValue(object.localMsgId)).unsigned = true;
            else if (typeof object.localMsgId === "string")
                message.localMsgId = parseInt(object.localMsgId, 10);
            else if (typeof object.localMsgId === "number")
                message.localMsgId = object.localMsgId;
            else if (typeof object.localMsgId === "object")
                message.localMsgId = new $util.LongBits(object.localMsgId.low >>> 0, object.localMsgId.high >>> 0).toNumber(true);
        if (object.msg != null) {
            if (typeof object.msg !== "object")
                throw TypeError(".XmsgImGroupSendMsgReq.msg: object expected");
            message.msg = $root.XmsgImMsg.fromObject(object.msg);
        }
        if (object.ext) {
            if (typeof object.ext !== "object")
                throw TypeError(".XmsgImGroupSendMsgReq.ext: object expected");
            message.ext = {};
            for (var keys = Object.keys(object.ext), i = 0; i < keys.length; ++i)
                message.ext[keys[i]] = String(object.ext[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupSendMsgReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupSendMsgReq
     * @static
     * @param {XmsgImGroupSendMsgReq} message XmsgImGroupSendMsgReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupSendMsgReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.ext = {};
        if (options.defaults) {
            object.cgt = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.localMsgId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.localMsgId = options.longs === String ? "0" : 0;
            object.msg = null;
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.localMsgId != null && message.hasOwnProperty("localMsgId"))
            if (typeof message.localMsgId === "number")
                object.localMsgId = options.longs === String ? String(message.localMsgId) : message.localMsgId;
            else
                object.localMsgId = options.longs === String ? $util.Long.prototype.toString.call(message.localMsgId) : options.longs === Number ? new $util.LongBits(message.localMsgId.low >>> 0, message.localMsgId.high >>> 0).toNumber(true) : message.localMsgId;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = $root.XmsgImMsg.toObject(message.msg, options);
        var keys2;
        if (message.ext && (keys2 = Object.keys(message.ext)).length) {
            object.ext = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ext[keys2[j]] = message.ext[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupSendMsgReq to JSON.
     * @function toJSON
     * @memberof XmsgImGroupSendMsgReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupSendMsgReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupSendMsgReq;
})();

$root.XmsgImGroupSendMsgRsp = (function() {

    /**
     * Properties of a XmsgImGroupSendMsgRsp.
     * @exports IXmsgImGroupSendMsgRsp
     * @interface IXmsgImGroupSendMsgRsp
     * @property {number|Long|null} [msgId] XmsgImGroupSendMsgRsp msgId
     * @property {string|null} [gcgt] XmsgImGroupSendMsgRsp gcgt
     * @property {number|Long|null} [gts] XmsgImGroupSendMsgRsp gts
     * @property {Object.<string,string>|null} [ext] XmsgImGroupSendMsgRsp ext
     */

    /**
     * Constructs a new XmsgImGroupSendMsgRsp.
     * @exports XmsgImGroupSendMsgRsp
     * @classdesc Represents a XmsgImGroupSendMsgRsp.
     * @implements IXmsgImGroupSendMsgRsp
     * @constructor
     * @param {IXmsgImGroupSendMsgRsp=} [properties] Properties to set
     */
    function XmsgImGroupSendMsgRsp(properties) {
        this.ext = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupSendMsgRsp msgId.
     * @member {number|Long} msgId
     * @memberof XmsgImGroupSendMsgRsp
     * @instance
     */
    XmsgImGroupSendMsgRsp.prototype.msgId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupSendMsgRsp gcgt.
     * @member {string} gcgt
     * @memberof XmsgImGroupSendMsgRsp
     * @instance
     */
    XmsgImGroupSendMsgRsp.prototype.gcgt = "";

    /**
     * XmsgImGroupSendMsgRsp gts.
     * @member {number|Long} gts
     * @memberof XmsgImGroupSendMsgRsp
     * @instance
     */
    XmsgImGroupSendMsgRsp.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupSendMsgRsp ext.
     * @member {Object.<string,string>} ext
     * @memberof XmsgImGroupSendMsgRsp
     * @instance
     */
    XmsgImGroupSendMsgRsp.prototype.ext = $util.emptyObject;

    /**
     * Creates a new XmsgImGroupSendMsgRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupSendMsgRsp
     * @static
     * @param {IXmsgImGroupSendMsgRsp=} [properties] Properties to set
     * @returns {XmsgImGroupSendMsgRsp} XmsgImGroupSendMsgRsp instance
     */
    XmsgImGroupSendMsgRsp.create = function create(properties) {
        return new XmsgImGroupSendMsgRsp(properties);
    };

    /**
     * Encodes the specified XmsgImGroupSendMsgRsp message. Does not implicitly {@link XmsgImGroupSendMsgRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupSendMsgRsp
     * @static
     * @param {IXmsgImGroupSendMsgRsp} message XmsgImGroupSendMsgRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSendMsgRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.msgId);
        if (message.gcgt != null && message.hasOwnProperty("gcgt"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.gcgt);
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.gts);
        if (message.ext != null && message.hasOwnProperty("ext"))
            for (var keys = Object.keys(message.ext), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.ext[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupSendMsgRsp message, length delimited. Does not implicitly {@link XmsgImGroupSendMsgRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupSendMsgRsp
     * @static
     * @param {IXmsgImGroupSendMsgRsp} message XmsgImGroupSendMsgRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSendMsgRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupSendMsgRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupSendMsgRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupSendMsgRsp} XmsgImGroupSendMsgRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSendMsgRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupSendMsgRsp(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.msgId = reader.uint64();
                break;
            case 2:
                message.gcgt = reader.string();
                break;
            case 3:
                message.gts = reader.uint64();
                break;
            case 4:
                reader.skip().pos++;
                if (message.ext === $util.emptyObject)
                    message.ext = {};
                key = reader.string();
                reader.pos++;
                message.ext[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupSendMsgRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupSendMsgRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupSendMsgRsp} XmsgImGroupSendMsgRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSendMsgRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupSendMsgRsp message.
     * @function verify
     * @memberof XmsgImGroupSendMsgRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupSendMsgRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            if (!$util.isInteger(message.msgId) && !(message.msgId && $util.isInteger(message.msgId.low) && $util.isInteger(message.msgId.high)))
                return "msgId: integer|Long expected";
        if (message.gcgt != null && message.hasOwnProperty("gcgt"))
            if (!$util.isString(message.gcgt))
                return "gcgt: string expected";
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        if (message.ext != null && message.hasOwnProperty("ext")) {
            if (!$util.isObject(message.ext))
                return "ext: object expected";
            var key = Object.keys(message.ext);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.ext[key[i]]))
                    return "ext: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupSendMsgRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupSendMsgRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupSendMsgRsp} XmsgImGroupSendMsgRsp
     */
    XmsgImGroupSendMsgRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupSendMsgRsp)
            return object;
        var message = new $root.XmsgImGroupSendMsgRsp();
        if (object.msgId != null)
            if ($util.Long)
                (message.msgId = $util.Long.fromValue(object.msgId)).unsigned = true;
            else if (typeof object.msgId === "string")
                message.msgId = parseInt(object.msgId, 10);
            else if (typeof object.msgId === "number")
                message.msgId = object.msgId;
            else if (typeof object.msgId === "object")
                message.msgId = new $util.LongBits(object.msgId.low >>> 0, object.msgId.high >>> 0).toNumber(true);
        if (object.gcgt != null)
            message.gcgt = String(object.gcgt);
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        if (object.ext) {
            if (typeof object.ext !== "object")
                throw TypeError(".XmsgImGroupSendMsgRsp.ext: object expected");
            message.ext = {};
            for (var keys = Object.keys(object.ext), i = 0; i < keys.length; ++i)
                message.ext[keys[i]] = String(object.ext[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupSendMsgRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupSendMsgRsp
     * @static
     * @param {XmsgImGroupSendMsgRsp} message XmsgImGroupSendMsgRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupSendMsgRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.ext = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.msgId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.msgId = options.longs === String ? "0" : 0;
            object.gcgt = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
        }
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            if (typeof message.msgId === "number")
                object.msgId = options.longs === String ? String(message.msgId) : message.msgId;
            else
                object.msgId = options.longs === String ? $util.Long.prototype.toString.call(message.msgId) : options.longs === Number ? new $util.LongBits(message.msgId.low >>> 0, message.msgId.high >>> 0).toNumber(true) : message.msgId;
        if (message.gcgt != null && message.hasOwnProperty("gcgt"))
            object.gcgt = message.gcgt;
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        var keys2;
        if (message.ext && (keys2 = Object.keys(message.ext)).length) {
            object.ext = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ext[keys2[j]] = message.ext[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupSendMsgRsp to JSON.
     * @function toJSON
     * @memberof XmsgImGroupSendMsgRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupSendMsgRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupSendMsgRsp;
})();

$root.XmsgImMsg = (function() {

    /**
     * Properties of a XmsgImMsg.
     * @exports IXmsgImMsg
     * @interface IXmsgImMsg
     * @property {string|null} [type] XmsgImMsg type
     * @property {IXmsgImMsgText|null} [text] XmsgImMsg text
     * @property {IXmsgImMsgHtml|null} [html] XmsgImMsg html
     * @property {IXmsgImMsgImage|null} [image] XmsgImMsg image
     * @property {IXmsgImMsgVoice|null} [voice] XmsgImMsg voice
     * @property {IXmsgImMsgVideo|null} [video] XmsgImMsg video
     * @property {IXmsgImMsgMerge|null} [merge] XmsgImMsg merge
     * @property {IXmsgImMsgAt|null} [atx] XmsgImMsg atx
     */

    /**
     * Constructs a new XmsgImMsg.
     * @exports XmsgImMsg
     * @classdesc Represents a XmsgImMsg.
     * @implements IXmsgImMsg
     * @constructor
     * @param {IXmsgImMsg=} [properties] Properties to set
     */
    function XmsgImMsg(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImMsg type.
     * @member {string} type
     * @memberof XmsgImMsg
     * @instance
     */
    XmsgImMsg.prototype.type = "";

    /**
     * XmsgImMsg text.
     * @member {IXmsgImMsgText|null|undefined} text
     * @memberof XmsgImMsg
     * @instance
     */
    XmsgImMsg.prototype.text = null;

    /**
     * XmsgImMsg html.
     * @member {IXmsgImMsgHtml|null|undefined} html
     * @memberof XmsgImMsg
     * @instance
     */
    XmsgImMsg.prototype.html = null;

    /**
     * XmsgImMsg image.
     * @member {IXmsgImMsgImage|null|undefined} image
     * @memberof XmsgImMsg
     * @instance
     */
    XmsgImMsg.prototype.image = null;

    /**
     * XmsgImMsg voice.
     * @member {IXmsgImMsgVoice|null|undefined} voice
     * @memberof XmsgImMsg
     * @instance
     */
    XmsgImMsg.prototype.voice = null;

    /**
     * XmsgImMsg video.
     * @member {IXmsgImMsgVideo|null|undefined} video
     * @memberof XmsgImMsg
     * @instance
     */
    XmsgImMsg.prototype.video = null;

    /**
     * XmsgImMsg merge.
     * @member {IXmsgImMsgMerge|null|undefined} merge
     * @memberof XmsgImMsg
     * @instance
     */
    XmsgImMsg.prototype.merge = null;

    /**
     * XmsgImMsg atx.
     * @member {IXmsgImMsgAt|null|undefined} atx
     * @memberof XmsgImMsg
     * @instance
     */
    XmsgImMsg.prototype.atx = null;

    /**
     * Creates a new XmsgImMsg instance using the specified properties.
     * @function create
     * @memberof XmsgImMsg
     * @static
     * @param {IXmsgImMsg=} [properties] Properties to set
     * @returns {XmsgImMsg} XmsgImMsg instance
     */
    XmsgImMsg.create = function create(properties) {
        return new XmsgImMsg(properties);
    };

    /**
     * Encodes the specified XmsgImMsg message. Does not implicitly {@link XmsgImMsg.verify|verify} messages.
     * @function encode
     * @memberof XmsgImMsg
     * @static
     * @param {IXmsgImMsg} message XmsgImMsg message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImMsg.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
        if (message.text != null && message.hasOwnProperty("text"))
            $root.XmsgImMsgText.encode(message.text, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.html != null && message.hasOwnProperty("html"))
            $root.XmsgImMsgHtml.encode(message.html, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.image != null && message.hasOwnProperty("image"))
            $root.XmsgImMsgImage.encode(message.image, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.voice != null && message.hasOwnProperty("voice"))
            $root.XmsgImMsgVoice.encode(message.voice, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.video != null && message.hasOwnProperty("video"))
            $root.XmsgImMsgVideo.encode(message.video, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.merge != null && message.hasOwnProperty("merge"))
            $root.XmsgImMsgMerge.encode(message.merge, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.atx != null && message.hasOwnProperty("atx"))
            $root.XmsgImMsgAt.encode(message.atx, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImMsg message, length delimited. Does not implicitly {@link XmsgImMsg.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImMsg
     * @static
     * @param {IXmsgImMsg} message XmsgImMsg message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImMsg.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImMsg message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImMsg
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImMsg} XmsgImMsg
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImMsg.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImMsg();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.type = reader.string();
                break;
            case 2:
                message.text = $root.XmsgImMsgText.decode(reader, reader.uint32());
                break;
            case 3:
                message.html = $root.XmsgImMsgHtml.decode(reader, reader.uint32());
                break;
            case 4:
                message.image = $root.XmsgImMsgImage.decode(reader, reader.uint32());
                break;
            case 5:
                message.voice = $root.XmsgImMsgVoice.decode(reader, reader.uint32());
                break;
            case 6:
                message.video = $root.XmsgImMsgVideo.decode(reader, reader.uint32());
                break;
            case 7:
                message.merge = $root.XmsgImMsgMerge.decode(reader, reader.uint32());
                break;
            case 8:
                message.atx = $root.XmsgImMsgAt.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImMsg message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImMsg
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImMsg} XmsgImMsg
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImMsg.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImMsg message.
     * @function verify
     * @memberof XmsgImMsg
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImMsg.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isString(message.type))
                return "type: string expected";
        if (message.text != null && message.hasOwnProperty("text")) {
            var error = $root.XmsgImMsgText.verify(message.text);
            if (error)
                return "text." + error;
        }
        if (message.html != null && message.hasOwnProperty("html")) {
            var error = $root.XmsgImMsgHtml.verify(message.html);
            if (error)
                return "html." + error;
        }
        if (message.image != null && message.hasOwnProperty("image")) {
            var error = $root.XmsgImMsgImage.verify(message.image);
            if (error)
                return "image." + error;
        }
        if (message.voice != null && message.hasOwnProperty("voice")) {
            var error = $root.XmsgImMsgVoice.verify(message.voice);
            if (error)
                return "voice." + error;
        }
        if (message.video != null && message.hasOwnProperty("video")) {
            var error = $root.XmsgImMsgVideo.verify(message.video);
            if (error)
                return "video." + error;
        }
        if (message.merge != null && message.hasOwnProperty("merge")) {
            var error = $root.XmsgImMsgMerge.verify(message.merge);
            if (error)
                return "merge." + error;
        }
        if (message.atx != null && message.hasOwnProperty("atx")) {
            var error = $root.XmsgImMsgAt.verify(message.atx);
            if (error)
                return "atx." + error;
        }
        return null;
    };

    /**
     * Creates a XmsgImMsg message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImMsg
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImMsg} XmsgImMsg
     */
    XmsgImMsg.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImMsg)
            return object;
        var message = new $root.XmsgImMsg();
        if (object.type != null)
            message.type = String(object.type);
        if (object.text != null) {
            if (typeof object.text !== "object")
                throw TypeError(".XmsgImMsg.text: object expected");
            message.text = $root.XmsgImMsgText.fromObject(object.text);
        }
        if (object.html != null) {
            if (typeof object.html !== "object")
                throw TypeError(".XmsgImMsg.html: object expected");
            message.html = $root.XmsgImMsgHtml.fromObject(object.html);
        }
        if (object.image != null) {
            if (typeof object.image !== "object")
                throw TypeError(".XmsgImMsg.image: object expected");
            message.image = $root.XmsgImMsgImage.fromObject(object.image);
        }
        if (object.voice != null) {
            if (typeof object.voice !== "object")
                throw TypeError(".XmsgImMsg.voice: object expected");
            message.voice = $root.XmsgImMsgVoice.fromObject(object.voice);
        }
        if (object.video != null) {
            if (typeof object.video !== "object")
                throw TypeError(".XmsgImMsg.video: object expected");
            message.video = $root.XmsgImMsgVideo.fromObject(object.video);
        }
        if (object.merge != null) {
            if (typeof object.merge !== "object")
                throw TypeError(".XmsgImMsg.merge: object expected");
            message.merge = $root.XmsgImMsgMerge.fromObject(object.merge);
        }
        if (object.atx != null) {
            if (typeof object.atx !== "object")
                throw TypeError(".XmsgImMsg.atx: object expected");
            message.atx = $root.XmsgImMsgAt.fromObject(object.atx);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImMsg message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImMsg
     * @static
     * @param {XmsgImMsg} message XmsgImMsg
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImMsg.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.type = "";
            object.text = null;
            object.html = null;
            object.image = null;
            object.voice = null;
            object.video = null;
            object.merge = null;
            object.atx = null;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        if (message.text != null && message.hasOwnProperty("text"))
            object.text = $root.XmsgImMsgText.toObject(message.text, options);
        if (message.html != null && message.hasOwnProperty("html"))
            object.html = $root.XmsgImMsgHtml.toObject(message.html, options);
        if (message.image != null && message.hasOwnProperty("image"))
            object.image = $root.XmsgImMsgImage.toObject(message.image, options);
        if (message.voice != null && message.hasOwnProperty("voice"))
            object.voice = $root.XmsgImMsgVoice.toObject(message.voice, options);
        if (message.video != null && message.hasOwnProperty("video"))
            object.video = $root.XmsgImMsgVideo.toObject(message.video, options);
        if (message.merge != null && message.hasOwnProperty("merge"))
            object.merge = $root.XmsgImMsgMerge.toObject(message.merge, options);
        if (message.atx != null && message.hasOwnProperty("atx"))
            object.atx = $root.XmsgImMsgAt.toObject(message.atx, options);
        return object;
    };

    /**
     * Converts this XmsgImMsg to JSON.
     * @function toJSON
     * @memberof XmsgImMsg
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImMsg.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImMsg;
})();

$root.XmsgImMsgText = (function() {

    /**
     * Properties of a XmsgImMsgText.
     * @exports IXmsgImMsgText
     * @interface IXmsgImMsgText
     * @property {string|null} [text] XmsgImMsgText text
     */

    /**
     * Constructs a new XmsgImMsgText.
     * @exports XmsgImMsgText
     * @classdesc Represents a XmsgImMsgText.
     * @implements IXmsgImMsgText
     * @constructor
     * @param {IXmsgImMsgText=} [properties] Properties to set
     */
    function XmsgImMsgText(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImMsgText text.
     * @member {string} text
     * @memberof XmsgImMsgText
     * @instance
     */
    XmsgImMsgText.prototype.text = "";

    /**
     * Creates a new XmsgImMsgText instance using the specified properties.
     * @function create
     * @memberof XmsgImMsgText
     * @static
     * @param {IXmsgImMsgText=} [properties] Properties to set
     * @returns {XmsgImMsgText} XmsgImMsgText instance
     */
    XmsgImMsgText.create = function create(properties) {
        return new XmsgImMsgText(properties);
    };

    /**
     * Encodes the specified XmsgImMsgText message. Does not implicitly {@link XmsgImMsgText.verify|verify} messages.
     * @function encode
     * @memberof XmsgImMsgText
     * @static
     * @param {IXmsgImMsgText} message XmsgImMsgText message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImMsgText.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.text != null && message.hasOwnProperty("text"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
        return writer;
    };

    /**
     * Encodes the specified XmsgImMsgText message, length delimited. Does not implicitly {@link XmsgImMsgText.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImMsgText
     * @static
     * @param {IXmsgImMsgText} message XmsgImMsgText message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImMsgText.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImMsgText message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImMsgText
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImMsgText} XmsgImMsgText
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImMsgText.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImMsgText();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.text = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImMsgText message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImMsgText
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImMsgText} XmsgImMsgText
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImMsgText.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImMsgText message.
     * @function verify
     * @memberof XmsgImMsgText
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImMsgText.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.text != null && message.hasOwnProperty("text"))
            if (!$util.isString(message.text))
                return "text: string expected";
        return null;
    };

    /**
     * Creates a XmsgImMsgText message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImMsgText
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImMsgText} XmsgImMsgText
     */
    XmsgImMsgText.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImMsgText)
            return object;
        var message = new $root.XmsgImMsgText();
        if (object.text != null)
            message.text = String(object.text);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImMsgText message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImMsgText
     * @static
     * @param {XmsgImMsgText} message XmsgImMsgText
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImMsgText.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.text = "";
        if (message.text != null && message.hasOwnProperty("text"))
            object.text = message.text;
        return object;
    };

    /**
     * Converts this XmsgImMsgText to JSON.
     * @function toJSON
     * @memberof XmsgImMsgText
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImMsgText.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImMsgText;
})();

$root.XmsgImMsgHtml = (function() {

    /**
     * Properties of a XmsgImMsgHtml.
     * @exports IXmsgImMsgHtml
     * @interface IXmsgImMsgHtml
     * @property {string|null} [html] XmsgImMsgHtml html
     */

    /**
     * Constructs a new XmsgImMsgHtml.
     * @exports XmsgImMsgHtml
     * @classdesc Represents a XmsgImMsgHtml.
     * @implements IXmsgImMsgHtml
     * @constructor
     * @param {IXmsgImMsgHtml=} [properties] Properties to set
     */
    function XmsgImMsgHtml(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImMsgHtml html.
     * @member {string} html
     * @memberof XmsgImMsgHtml
     * @instance
     */
    XmsgImMsgHtml.prototype.html = "";

    /**
     * Creates a new XmsgImMsgHtml instance using the specified properties.
     * @function create
     * @memberof XmsgImMsgHtml
     * @static
     * @param {IXmsgImMsgHtml=} [properties] Properties to set
     * @returns {XmsgImMsgHtml} XmsgImMsgHtml instance
     */
    XmsgImMsgHtml.create = function create(properties) {
        return new XmsgImMsgHtml(properties);
    };

    /**
     * Encodes the specified XmsgImMsgHtml message. Does not implicitly {@link XmsgImMsgHtml.verify|verify} messages.
     * @function encode
     * @memberof XmsgImMsgHtml
     * @static
     * @param {IXmsgImMsgHtml} message XmsgImMsgHtml message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImMsgHtml.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.html != null && message.hasOwnProperty("html"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.html);
        return writer;
    };

    /**
     * Encodes the specified XmsgImMsgHtml message, length delimited. Does not implicitly {@link XmsgImMsgHtml.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImMsgHtml
     * @static
     * @param {IXmsgImMsgHtml} message XmsgImMsgHtml message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImMsgHtml.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImMsgHtml message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImMsgHtml
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImMsgHtml} XmsgImMsgHtml
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImMsgHtml.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImMsgHtml();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.html = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImMsgHtml message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImMsgHtml
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImMsgHtml} XmsgImMsgHtml
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImMsgHtml.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImMsgHtml message.
     * @function verify
     * @memberof XmsgImMsgHtml
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImMsgHtml.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.html != null && message.hasOwnProperty("html"))
            if (!$util.isString(message.html))
                return "html: string expected";
        return null;
    };

    /**
     * Creates a XmsgImMsgHtml message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImMsgHtml
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImMsgHtml} XmsgImMsgHtml
     */
    XmsgImMsgHtml.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImMsgHtml)
            return object;
        var message = new $root.XmsgImMsgHtml();
        if (object.html != null)
            message.html = String(object.html);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImMsgHtml message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImMsgHtml
     * @static
     * @param {XmsgImMsgHtml} message XmsgImMsgHtml
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImMsgHtml.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.html = "";
        if (message.html != null && message.hasOwnProperty("html"))
            object.html = message.html;
        return object;
    };

    /**
     * Converts this XmsgImMsgHtml to JSON.
     * @function toJSON
     * @memberof XmsgImMsgHtml
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImMsgHtml.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImMsgHtml;
})();

$root.XmsgImMsgImage = (function() {

    /**
     * Properties of a XmsgImMsgImage.
     * @exports IXmsgImMsgImage
     * @interface IXmsgImMsgImage
     * @property {string|null} [uri] XmsgImMsgImage uri
     */

    /**
     * Constructs a new XmsgImMsgImage.
     * @exports XmsgImMsgImage
     * @classdesc Represents a XmsgImMsgImage.
     * @implements IXmsgImMsgImage
     * @constructor
     * @param {IXmsgImMsgImage=} [properties] Properties to set
     */
    function XmsgImMsgImage(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImMsgImage uri.
     * @member {string} uri
     * @memberof XmsgImMsgImage
     * @instance
     */
    XmsgImMsgImage.prototype.uri = "";

    /**
     * Creates a new XmsgImMsgImage instance using the specified properties.
     * @function create
     * @memberof XmsgImMsgImage
     * @static
     * @param {IXmsgImMsgImage=} [properties] Properties to set
     * @returns {XmsgImMsgImage} XmsgImMsgImage instance
     */
    XmsgImMsgImage.create = function create(properties) {
        return new XmsgImMsgImage(properties);
    };

    /**
     * Encodes the specified XmsgImMsgImage message. Does not implicitly {@link XmsgImMsgImage.verify|verify} messages.
     * @function encode
     * @memberof XmsgImMsgImage
     * @static
     * @param {IXmsgImMsgImage} message XmsgImMsgImage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImMsgImage.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uri != null && message.hasOwnProperty("uri"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uri);
        return writer;
    };

    /**
     * Encodes the specified XmsgImMsgImage message, length delimited. Does not implicitly {@link XmsgImMsgImage.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImMsgImage
     * @static
     * @param {IXmsgImMsgImage} message XmsgImMsgImage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImMsgImage.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImMsgImage message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImMsgImage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImMsgImage} XmsgImMsgImage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImMsgImage.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImMsgImage();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uri = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImMsgImage message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImMsgImage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImMsgImage} XmsgImMsgImage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImMsgImage.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImMsgImage message.
     * @function verify
     * @memberof XmsgImMsgImage
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImMsgImage.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uri != null && message.hasOwnProperty("uri"))
            if (!$util.isString(message.uri))
                return "uri: string expected";
        return null;
    };

    /**
     * Creates a XmsgImMsgImage message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImMsgImage
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImMsgImage} XmsgImMsgImage
     */
    XmsgImMsgImage.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImMsgImage)
            return object;
        var message = new $root.XmsgImMsgImage();
        if (object.uri != null)
            message.uri = String(object.uri);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImMsgImage message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImMsgImage
     * @static
     * @param {XmsgImMsgImage} message XmsgImMsgImage
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImMsgImage.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.uri = "";
        if (message.uri != null && message.hasOwnProperty("uri"))
            object.uri = message.uri;
        return object;
    };

    /**
     * Converts this XmsgImMsgImage to JSON.
     * @function toJSON
     * @memberof XmsgImMsgImage
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImMsgImage.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImMsgImage;
})();

$root.XmsgImMsgVoice = (function() {

    /**
     * Properties of a XmsgImMsgVoice.
     * @exports IXmsgImMsgVoice
     * @interface IXmsgImMsgVoice
     * @property {string|null} [uri] XmsgImMsgVoice uri
     */

    /**
     * Constructs a new XmsgImMsgVoice.
     * @exports XmsgImMsgVoice
     * @classdesc Represents a XmsgImMsgVoice.
     * @implements IXmsgImMsgVoice
     * @constructor
     * @param {IXmsgImMsgVoice=} [properties] Properties to set
     */
    function XmsgImMsgVoice(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImMsgVoice uri.
     * @member {string} uri
     * @memberof XmsgImMsgVoice
     * @instance
     */
    XmsgImMsgVoice.prototype.uri = "";

    /**
     * Creates a new XmsgImMsgVoice instance using the specified properties.
     * @function create
     * @memberof XmsgImMsgVoice
     * @static
     * @param {IXmsgImMsgVoice=} [properties] Properties to set
     * @returns {XmsgImMsgVoice} XmsgImMsgVoice instance
     */
    XmsgImMsgVoice.create = function create(properties) {
        return new XmsgImMsgVoice(properties);
    };

    /**
     * Encodes the specified XmsgImMsgVoice message. Does not implicitly {@link XmsgImMsgVoice.verify|verify} messages.
     * @function encode
     * @memberof XmsgImMsgVoice
     * @static
     * @param {IXmsgImMsgVoice} message XmsgImMsgVoice message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImMsgVoice.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uri != null && message.hasOwnProperty("uri"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uri);
        return writer;
    };

    /**
     * Encodes the specified XmsgImMsgVoice message, length delimited. Does not implicitly {@link XmsgImMsgVoice.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImMsgVoice
     * @static
     * @param {IXmsgImMsgVoice} message XmsgImMsgVoice message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImMsgVoice.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImMsgVoice message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImMsgVoice
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImMsgVoice} XmsgImMsgVoice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImMsgVoice.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImMsgVoice();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uri = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImMsgVoice message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImMsgVoice
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImMsgVoice} XmsgImMsgVoice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImMsgVoice.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImMsgVoice message.
     * @function verify
     * @memberof XmsgImMsgVoice
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImMsgVoice.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uri != null && message.hasOwnProperty("uri"))
            if (!$util.isString(message.uri))
                return "uri: string expected";
        return null;
    };

    /**
     * Creates a XmsgImMsgVoice message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImMsgVoice
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImMsgVoice} XmsgImMsgVoice
     */
    XmsgImMsgVoice.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImMsgVoice)
            return object;
        var message = new $root.XmsgImMsgVoice();
        if (object.uri != null)
            message.uri = String(object.uri);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImMsgVoice message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImMsgVoice
     * @static
     * @param {XmsgImMsgVoice} message XmsgImMsgVoice
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImMsgVoice.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.uri = "";
        if (message.uri != null && message.hasOwnProperty("uri"))
            object.uri = message.uri;
        return object;
    };

    /**
     * Converts this XmsgImMsgVoice to JSON.
     * @function toJSON
     * @memberof XmsgImMsgVoice
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImMsgVoice.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImMsgVoice;
})();

$root.XmsgImMsgVideo = (function() {

    /**
     * Properties of a XmsgImMsgVideo.
     * @exports IXmsgImMsgVideo
     * @interface IXmsgImMsgVideo
     * @property {string|null} [uri] XmsgImMsgVideo uri
     */

    /**
     * Constructs a new XmsgImMsgVideo.
     * @exports XmsgImMsgVideo
     * @classdesc Represents a XmsgImMsgVideo.
     * @implements IXmsgImMsgVideo
     * @constructor
     * @param {IXmsgImMsgVideo=} [properties] Properties to set
     */
    function XmsgImMsgVideo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImMsgVideo uri.
     * @member {string} uri
     * @memberof XmsgImMsgVideo
     * @instance
     */
    XmsgImMsgVideo.prototype.uri = "";

    /**
     * Creates a new XmsgImMsgVideo instance using the specified properties.
     * @function create
     * @memberof XmsgImMsgVideo
     * @static
     * @param {IXmsgImMsgVideo=} [properties] Properties to set
     * @returns {XmsgImMsgVideo} XmsgImMsgVideo instance
     */
    XmsgImMsgVideo.create = function create(properties) {
        return new XmsgImMsgVideo(properties);
    };

    /**
     * Encodes the specified XmsgImMsgVideo message. Does not implicitly {@link XmsgImMsgVideo.verify|verify} messages.
     * @function encode
     * @memberof XmsgImMsgVideo
     * @static
     * @param {IXmsgImMsgVideo} message XmsgImMsgVideo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImMsgVideo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uri != null && message.hasOwnProperty("uri"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uri);
        return writer;
    };

    /**
     * Encodes the specified XmsgImMsgVideo message, length delimited. Does not implicitly {@link XmsgImMsgVideo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImMsgVideo
     * @static
     * @param {IXmsgImMsgVideo} message XmsgImMsgVideo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImMsgVideo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImMsgVideo message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImMsgVideo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImMsgVideo} XmsgImMsgVideo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImMsgVideo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImMsgVideo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uri = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImMsgVideo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImMsgVideo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImMsgVideo} XmsgImMsgVideo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImMsgVideo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImMsgVideo message.
     * @function verify
     * @memberof XmsgImMsgVideo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImMsgVideo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uri != null && message.hasOwnProperty("uri"))
            if (!$util.isString(message.uri))
                return "uri: string expected";
        return null;
    };

    /**
     * Creates a XmsgImMsgVideo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImMsgVideo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImMsgVideo} XmsgImMsgVideo
     */
    XmsgImMsgVideo.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImMsgVideo)
            return object;
        var message = new $root.XmsgImMsgVideo();
        if (object.uri != null)
            message.uri = String(object.uri);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImMsgVideo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImMsgVideo
     * @static
     * @param {XmsgImMsgVideo} message XmsgImMsgVideo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImMsgVideo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.uri = "";
        if (message.uri != null && message.hasOwnProperty("uri"))
            object.uri = message.uri;
        return object;
    };

    /**
     * Converts this XmsgImMsgVideo to JSON.
     * @function toJSON
     * @memberof XmsgImMsgVideo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImMsgVideo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImMsgVideo;
})();

$root.XmsgImMsgMerge = (function() {

    /**
     * Properties of a XmsgImMsgMerge.
     * @exports IXmsgImMsgMerge
     * @interface IXmsgImMsgMerge
     * @property {Array.<IXmsgImMsg>|null} [msg] XmsgImMsgMerge msg
     */

    /**
     * Constructs a new XmsgImMsgMerge.
     * @exports XmsgImMsgMerge
     * @classdesc Represents a XmsgImMsgMerge.
     * @implements IXmsgImMsgMerge
     * @constructor
     * @param {IXmsgImMsgMerge=} [properties] Properties to set
     */
    function XmsgImMsgMerge(properties) {
        this.msg = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImMsgMerge msg.
     * @member {Array.<IXmsgImMsg>} msg
     * @memberof XmsgImMsgMerge
     * @instance
     */
    XmsgImMsgMerge.prototype.msg = $util.emptyArray;

    /**
     * Creates a new XmsgImMsgMerge instance using the specified properties.
     * @function create
     * @memberof XmsgImMsgMerge
     * @static
     * @param {IXmsgImMsgMerge=} [properties] Properties to set
     * @returns {XmsgImMsgMerge} XmsgImMsgMerge instance
     */
    XmsgImMsgMerge.create = function create(properties) {
        return new XmsgImMsgMerge(properties);
    };

    /**
     * Encodes the specified XmsgImMsgMerge message. Does not implicitly {@link XmsgImMsgMerge.verify|verify} messages.
     * @function encode
     * @memberof XmsgImMsgMerge
     * @static
     * @param {IXmsgImMsgMerge} message XmsgImMsgMerge message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImMsgMerge.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.msg != null && message.msg.length)
            for (var i = 0; i < message.msg.length; ++i)
                $root.XmsgImMsg.encode(message.msg[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImMsgMerge message, length delimited. Does not implicitly {@link XmsgImMsgMerge.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImMsgMerge
     * @static
     * @param {IXmsgImMsgMerge} message XmsgImMsgMerge message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImMsgMerge.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImMsgMerge message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImMsgMerge
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImMsgMerge} XmsgImMsgMerge
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImMsgMerge.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImMsgMerge();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.msg && message.msg.length))
                    message.msg = [];
                message.msg.push($root.XmsgImMsg.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImMsgMerge message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImMsgMerge
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImMsgMerge} XmsgImMsgMerge
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImMsgMerge.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImMsgMerge message.
     * @function verify
     * @memberof XmsgImMsgMerge
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImMsgMerge.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.msg != null && message.hasOwnProperty("msg")) {
            if (!Array.isArray(message.msg))
                return "msg: array expected";
            for (var i = 0; i < message.msg.length; ++i) {
                var error = $root.XmsgImMsg.verify(message.msg[i]);
                if (error)
                    return "msg." + error;
            }
        }
        return null;
    };

    /**
     * Creates a XmsgImMsgMerge message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImMsgMerge
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImMsgMerge} XmsgImMsgMerge
     */
    XmsgImMsgMerge.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImMsgMerge)
            return object;
        var message = new $root.XmsgImMsgMerge();
        if (object.msg) {
            if (!Array.isArray(object.msg))
                throw TypeError(".XmsgImMsgMerge.msg: array expected");
            message.msg = [];
            for (var i = 0; i < object.msg.length; ++i) {
                if (typeof object.msg[i] !== "object")
                    throw TypeError(".XmsgImMsgMerge.msg: object expected");
                message.msg[i] = $root.XmsgImMsg.fromObject(object.msg[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImMsgMerge message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImMsgMerge
     * @static
     * @param {XmsgImMsgMerge} message XmsgImMsgMerge
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImMsgMerge.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.msg = [];
        if (message.msg && message.msg.length) {
            object.msg = [];
            for (var j = 0; j < message.msg.length; ++j)
                object.msg[j] = $root.XmsgImMsg.toObject(message.msg[j], options);
        }
        return object;
    };

    /**
     * Converts this XmsgImMsgMerge to JSON.
     * @function toJSON
     * @memberof XmsgImMsgMerge
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImMsgMerge.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImMsgMerge;
})();

$root.XmsgImMsgAt = (function() {

    /**
     * Properties of a XmsgImMsgAt.
     * @exports IXmsgImMsgAt
     * @interface IXmsgImMsgAt
     * @property {Array.<string>|null} [cgt] XmsgImMsgAt cgt
     */

    /**
     * Constructs a new XmsgImMsgAt.
     * @exports XmsgImMsgAt
     * @classdesc Represents a XmsgImMsgAt.
     * @implements IXmsgImMsgAt
     * @constructor
     * @param {IXmsgImMsgAt=} [properties] Properties to set
     */
    function XmsgImMsgAt(properties) {
        this.cgt = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImMsgAt cgt.
     * @member {Array.<string>} cgt
     * @memberof XmsgImMsgAt
     * @instance
     */
    XmsgImMsgAt.prototype.cgt = $util.emptyArray;

    /**
     * Creates a new XmsgImMsgAt instance using the specified properties.
     * @function create
     * @memberof XmsgImMsgAt
     * @static
     * @param {IXmsgImMsgAt=} [properties] Properties to set
     * @returns {XmsgImMsgAt} XmsgImMsgAt instance
     */
    XmsgImMsgAt.create = function create(properties) {
        return new XmsgImMsgAt(properties);
    };

    /**
     * Encodes the specified XmsgImMsgAt message. Does not implicitly {@link XmsgImMsgAt.verify|verify} messages.
     * @function encode
     * @memberof XmsgImMsgAt
     * @static
     * @param {IXmsgImMsgAt} message XmsgImMsgAt message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImMsgAt.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.cgt.length)
            for (var i = 0; i < message.cgt.length; ++i)
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.cgt[i]);
        return writer;
    };

    /**
     * Encodes the specified XmsgImMsgAt message, length delimited. Does not implicitly {@link XmsgImMsgAt.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImMsgAt
     * @static
     * @param {IXmsgImMsgAt} message XmsgImMsgAt message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImMsgAt.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImMsgAt message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImMsgAt
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImMsgAt} XmsgImMsgAt
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImMsgAt.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImMsgAt();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                if (!(message.cgt && message.cgt.length))
                    message.cgt = [];
                message.cgt.push(reader.string());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImMsgAt message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImMsgAt
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImMsgAt} XmsgImMsgAt
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImMsgAt.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImMsgAt message.
     * @function verify
     * @memberof XmsgImMsgAt
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImMsgAt.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt")) {
            if (!Array.isArray(message.cgt))
                return "cgt: array expected";
            for (var i = 0; i < message.cgt.length; ++i)
                if (!$util.isString(message.cgt[i]))
                    return "cgt: string[] expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImMsgAt message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImMsgAt
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImMsgAt} XmsgImMsgAt
     */
    XmsgImMsgAt.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImMsgAt)
            return object;
        var message = new $root.XmsgImMsgAt();
        if (object.cgt) {
            if (!Array.isArray(object.cgt))
                throw TypeError(".XmsgImMsgAt.cgt: array expected");
            message.cgt = [];
            for (var i = 0; i < object.cgt.length; ++i)
                message.cgt[i] = String(object.cgt[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImMsgAt message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImMsgAt
     * @static
     * @param {XmsgImMsgAt} message XmsgImMsgAt
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImMsgAt.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.cgt = [];
        if (message.cgt && message.cgt.length) {
            object.cgt = [];
            for (var j = 0; j < message.cgt.length; ++j)
                object.cgt[j] = message.cgt[j];
        }
        return object;
    };

    /**
     * Converts this XmsgImMsgAt to JSON.
     * @function toJSON
     * @memberof XmsgImMsgAt
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImMsgAt.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImMsgAt;
})();

$root.XmsgImGroupMsgNotice = (function() {

    /**
     * Properties of a XmsgImGroupMsgNotice.
     * @exports IXmsgImGroupMsgNotice
     * @interface IXmsgImGroupMsgNotice
     * @property {string|null} [gcgt] XmsgImGroupMsgNotice gcgt
     * @property {string|null} [scgt] XmsgImGroupMsgNotice scgt
     * @property {number|Long|null} [msgId] XmsgImGroupMsgNotice msgId
     * @property {IXmsgImMsg|null} [msg] XmsgImGroupMsgNotice msg
     * @property {number|Long|null} [gts] XmsgImGroupMsgNotice gts
     * @property {Object.<string,string>|null} [ext] XmsgImGroupMsgNotice ext
     */

    /**
     * Constructs a new XmsgImGroupMsgNotice.
     * @exports XmsgImGroupMsgNotice
     * @classdesc Represents a XmsgImGroupMsgNotice.
     * @implements IXmsgImGroupMsgNotice
     * @constructor
     * @param {IXmsgImGroupMsgNotice=} [properties] Properties to set
     */
    function XmsgImGroupMsgNotice(properties) {
        this.ext = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMsgNotice gcgt.
     * @member {string} gcgt
     * @memberof XmsgImGroupMsgNotice
     * @instance
     */
    XmsgImGroupMsgNotice.prototype.gcgt = "";

    /**
     * XmsgImGroupMsgNotice scgt.
     * @member {string} scgt
     * @memberof XmsgImGroupMsgNotice
     * @instance
     */
    XmsgImGroupMsgNotice.prototype.scgt = "";

    /**
     * XmsgImGroupMsgNotice msgId.
     * @member {number|Long} msgId
     * @memberof XmsgImGroupMsgNotice
     * @instance
     */
    XmsgImGroupMsgNotice.prototype.msgId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupMsgNotice msg.
     * @member {IXmsgImMsg|null|undefined} msg
     * @memberof XmsgImGroupMsgNotice
     * @instance
     */
    XmsgImGroupMsgNotice.prototype.msg = null;

    /**
     * XmsgImGroupMsgNotice gts.
     * @member {number|Long} gts
     * @memberof XmsgImGroupMsgNotice
     * @instance
     */
    XmsgImGroupMsgNotice.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupMsgNotice ext.
     * @member {Object.<string,string>} ext
     * @memberof XmsgImGroupMsgNotice
     * @instance
     */
    XmsgImGroupMsgNotice.prototype.ext = $util.emptyObject;

    /**
     * Creates a new XmsgImGroupMsgNotice instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMsgNotice
     * @static
     * @param {IXmsgImGroupMsgNotice=} [properties] Properties to set
     * @returns {XmsgImGroupMsgNotice} XmsgImGroupMsgNotice instance
     */
    XmsgImGroupMsgNotice.create = function create(properties) {
        return new XmsgImGroupMsgNotice(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMsgNotice message. Does not implicitly {@link XmsgImGroupMsgNotice.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMsgNotice
     * @static
     * @param {IXmsgImGroupMsgNotice} message XmsgImGroupMsgNotice message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgNotice.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.gcgt != null && message.hasOwnProperty("gcgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.gcgt);
        if (message.scgt != null && message.hasOwnProperty("scgt"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.scgt);
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.msgId);
        if (message.msg != null && message.hasOwnProperty("msg"))
            $root.XmsgImMsg.encode(message.msg, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.gts);
        if (message.ext != null && message.hasOwnProperty("ext"))
            for (var keys = Object.keys(message.ext), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.ext[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMsgNotice message, length delimited. Does not implicitly {@link XmsgImGroupMsgNotice.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMsgNotice
     * @static
     * @param {IXmsgImGroupMsgNotice} message XmsgImGroupMsgNotice message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgNotice.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMsgNotice message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMsgNotice
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMsgNotice} XmsgImGroupMsgNotice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgNotice.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMsgNotice(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.gcgt = reader.string();
                break;
            case 2:
                message.scgt = reader.string();
                break;
            case 3:
                message.msgId = reader.uint64();
                break;
            case 4:
                message.msg = $root.XmsgImMsg.decode(reader, reader.uint32());
                break;
            case 5:
                message.gts = reader.uint64();
                break;
            case 6:
                reader.skip().pos++;
                if (message.ext === $util.emptyObject)
                    message.ext = {};
                key = reader.string();
                reader.pos++;
                message.ext[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMsgNotice message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMsgNotice
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMsgNotice} XmsgImGroupMsgNotice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgNotice.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMsgNotice message.
     * @function verify
     * @memberof XmsgImGroupMsgNotice
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMsgNotice.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.gcgt != null && message.hasOwnProperty("gcgt"))
            if (!$util.isString(message.gcgt))
                return "gcgt: string expected";
        if (message.scgt != null && message.hasOwnProperty("scgt"))
            if (!$util.isString(message.scgt))
                return "scgt: string expected";
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            if (!$util.isInteger(message.msgId) && !(message.msgId && $util.isInteger(message.msgId.low) && $util.isInteger(message.msgId.high)))
                return "msgId: integer|Long expected";
        if (message.msg != null && message.hasOwnProperty("msg")) {
            var error = $root.XmsgImMsg.verify(message.msg);
            if (error)
                return "msg." + error;
        }
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        if (message.ext != null && message.hasOwnProperty("ext")) {
            if (!$util.isObject(message.ext))
                return "ext: object expected";
            var key = Object.keys(message.ext);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.ext[key[i]]))
                    return "ext: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupMsgNotice message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMsgNotice
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMsgNotice} XmsgImGroupMsgNotice
     */
    XmsgImGroupMsgNotice.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMsgNotice)
            return object;
        var message = new $root.XmsgImGroupMsgNotice();
        if (object.gcgt != null)
            message.gcgt = String(object.gcgt);
        if (object.scgt != null)
            message.scgt = String(object.scgt);
        if (object.msgId != null)
            if ($util.Long)
                (message.msgId = $util.Long.fromValue(object.msgId)).unsigned = true;
            else if (typeof object.msgId === "string")
                message.msgId = parseInt(object.msgId, 10);
            else if (typeof object.msgId === "number")
                message.msgId = object.msgId;
            else if (typeof object.msgId === "object")
                message.msgId = new $util.LongBits(object.msgId.low >>> 0, object.msgId.high >>> 0).toNumber(true);
        if (object.msg != null) {
            if (typeof object.msg !== "object")
                throw TypeError(".XmsgImGroupMsgNotice.msg: object expected");
            message.msg = $root.XmsgImMsg.fromObject(object.msg);
        }
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        if (object.ext) {
            if (typeof object.ext !== "object")
                throw TypeError(".XmsgImGroupMsgNotice.ext: object expected");
            message.ext = {};
            for (var keys = Object.keys(object.ext), i = 0; i < keys.length; ++i)
                message.ext[keys[i]] = String(object.ext[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMsgNotice message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMsgNotice
     * @static
     * @param {XmsgImGroupMsgNotice} message XmsgImGroupMsgNotice
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMsgNotice.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.ext = {};
        if (options.defaults) {
            object.gcgt = "";
            object.scgt = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.msgId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.msgId = options.longs === String ? "0" : 0;
            object.msg = null;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
        }
        if (message.gcgt != null && message.hasOwnProperty("gcgt"))
            object.gcgt = message.gcgt;
        if (message.scgt != null && message.hasOwnProperty("scgt"))
            object.scgt = message.scgt;
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            if (typeof message.msgId === "number")
                object.msgId = options.longs === String ? String(message.msgId) : message.msgId;
            else
                object.msgId = options.longs === String ? $util.Long.prototype.toString.call(message.msgId) : options.longs === Number ? new $util.LongBits(message.msgId.low >>> 0, message.msgId.high >>> 0).toNumber(true) : message.msgId;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = $root.XmsgImMsg.toObject(message.msg, options);
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        var keys2;
        if (message.ext && (keys2 = Object.keys(message.ext)).length) {
            object.ext = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ext[keys2[j]] = message.ext[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupMsgNotice to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMsgNotice
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMsgNotice.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMsgNotice;
})();

$root.XmsgImGroupMsgSyncReq = (function() {

    /**
     * Properties of a XmsgImGroupMsgSyncReq.
     * @exports IXmsgImGroupMsgSyncReq
     * @interface IXmsgImGroupMsgSyncReq
     * @property {string|null} [cgt] XmsgImGroupMsgSyncReq cgt
     * @property {number|Long|null} [msgId] XmsgImGroupMsgSyncReq msgId
     * @property {number|null} [latest] XmsgImGroupMsgSyncReq latest
     */

    /**
     * Constructs a new XmsgImGroupMsgSyncReq.
     * @exports XmsgImGroupMsgSyncReq
     * @classdesc Represents a XmsgImGroupMsgSyncReq.
     * @implements IXmsgImGroupMsgSyncReq
     * @constructor
     * @param {IXmsgImGroupMsgSyncReq=} [properties] Properties to set
     */
    function XmsgImGroupMsgSyncReq(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMsgSyncReq cgt.
     * @member {string} cgt
     * @memberof XmsgImGroupMsgSyncReq
     * @instance
     */
    XmsgImGroupMsgSyncReq.prototype.cgt = "";

    /**
     * XmsgImGroupMsgSyncReq msgId.
     * @member {number|Long} msgId
     * @memberof XmsgImGroupMsgSyncReq
     * @instance
     */
    XmsgImGroupMsgSyncReq.prototype.msgId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupMsgSyncReq latest.
     * @member {number} latest
     * @memberof XmsgImGroupMsgSyncReq
     * @instance
     */
    XmsgImGroupMsgSyncReq.prototype.latest = 0;

    /**
     * Creates a new XmsgImGroupMsgSyncReq instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMsgSyncReq
     * @static
     * @param {IXmsgImGroupMsgSyncReq=} [properties] Properties to set
     * @returns {XmsgImGroupMsgSyncReq} XmsgImGroupMsgSyncReq instance
     */
    XmsgImGroupMsgSyncReq.create = function create(properties) {
        return new XmsgImGroupMsgSyncReq(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMsgSyncReq message. Does not implicitly {@link XmsgImGroupMsgSyncReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMsgSyncReq
     * @static
     * @param {IXmsgImGroupMsgSyncReq} message XmsgImGroupMsgSyncReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgSyncReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.msgId);
        if (message.latest != null && message.hasOwnProperty("latest"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.latest);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMsgSyncReq message, length delimited. Does not implicitly {@link XmsgImGroupMsgSyncReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMsgSyncReq
     * @static
     * @param {IXmsgImGroupMsgSyncReq} message XmsgImGroupMsgSyncReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgSyncReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMsgSyncReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMsgSyncReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMsgSyncReq} XmsgImGroupMsgSyncReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgSyncReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMsgSyncReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.msgId = reader.uint64();
                break;
            case 3:
                message.latest = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMsgSyncReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMsgSyncReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMsgSyncReq} XmsgImGroupMsgSyncReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgSyncReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMsgSyncReq message.
     * @function verify
     * @memberof XmsgImGroupMsgSyncReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMsgSyncReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            if (!$util.isInteger(message.msgId) && !(message.msgId && $util.isInteger(message.msgId.low) && $util.isInteger(message.msgId.high)))
                return "msgId: integer|Long expected";
        if (message.latest != null && message.hasOwnProperty("latest"))
            if (!$util.isInteger(message.latest))
                return "latest: integer expected";
        return null;
    };

    /**
     * Creates a XmsgImGroupMsgSyncReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMsgSyncReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMsgSyncReq} XmsgImGroupMsgSyncReq
     */
    XmsgImGroupMsgSyncReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMsgSyncReq)
            return object;
        var message = new $root.XmsgImGroupMsgSyncReq();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.msgId != null)
            if ($util.Long)
                (message.msgId = $util.Long.fromValue(object.msgId)).unsigned = true;
            else if (typeof object.msgId === "string")
                message.msgId = parseInt(object.msgId, 10);
            else if (typeof object.msgId === "number")
                message.msgId = object.msgId;
            else if (typeof object.msgId === "object")
                message.msgId = new $util.LongBits(object.msgId.low >>> 0, object.msgId.high >>> 0).toNumber(true);
        if (object.latest != null)
            message.latest = object.latest >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMsgSyncReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMsgSyncReq
     * @static
     * @param {XmsgImGroupMsgSyncReq} message XmsgImGroupMsgSyncReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMsgSyncReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cgt = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.msgId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.msgId = options.longs === String ? "0" : 0;
            object.latest = 0;
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            if (typeof message.msgId === "number")
                object.msgId = options.longs === String ? String(message.msgId) : message.msgId;
            else
                object.msgId = options.longs === String ? $util.Long.prototype.toString.call(message.msgId) : options.longs === Number ? new $util.LongBits(message.msgId.low >>> 0, message.msgId.high >>> 0).toNumber(true) : message.msgId;
        if (message.latest != null && message.hasOwnProperty("latest"))
            object.latest = message.latest;
        return object;
    };

    /**
     * Converts this XmsgImGroupMsgSyncReq to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMsgSyncReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMsgSyncReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMsgSyncReq;
})();

$root.XmsgImGroupMsgSyncRsp = (function() {

    /**
     * Properties of a XmsgImGroupMsgSyncRsp.
     * @exports IXmsgImGroupMsgSyncRsp
     * @interface IXmsgImGroupMsgSyncRsp
     * @property {Array.<IXmsgImGroupMsgHistory>|null} [msg] XmsgImGroupMsgSyncRsp msg
     */

    /**
     * Constructs a new XmsgImGroupMsgSyncRsp.
     * @exports XmsgImGroupMsgSyncRsp
     * @classdesc Represents a XmsgImGroupMsgSyncRsp.
     * @implements IXmsgImGroupMsgSyncRsp
     * @constructor
     * @param {IXmsgImGroupMsgSyncRsp=} [properties] Properties to set
     */
    function XmsgImGroupMsgSyncRsp(properties) {
        this.msg = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMsgSyncRsp msg.
     * @member {Array.<IXmsgImGroupMsgHistory>} msg
     * @memberof XmsgImGroupMsgSyncRsp
     * @instance
     */
    XmsgImGroupMsgSyncRsp.prototype.msg = $util.emptyArray;

    /**
     * Creates a new XmsgImGroupMsgSyncRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMsgSyncRsp
     * @static
     * @param {IXmsgImGroupMsgSyncRsp=} [properties] Properties to set
     * @returns {XmsgImGroupMsgSyncRsp} XmsgImGroupMsgSyncRsp instance
     */
    XmsgImGroupMsgSyncRsp.create = function create(properties) {
        return new XmsgImGroupMsgSyncRsp(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMsgSyncRsp message. Does not implicitly {@link XmsgImGroupMsgSyncRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMsgSyncRsp
     * @static
     * @param {IXmsgImGroupMsgSyncRsp} message XmsgImGroupMsgSyncRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgSyncRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.msg != null && message.msg.length)
            for (var i = 0; i < message.msg.length; ++i)
                $root.XmsgImGroupMsgHistory.encode(message.msg[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMsgSyncRsp message, length delimited. Does not implicitly {@link XmsgImGroupMsgSyncRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMsgSyncRsp
     * @static
     * @param {IXmsgImGroupMsgSyncRsp} message XmsgImGroupMsgSyncRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgSyncRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMsgSyncRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMsgSyncRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMsgSyncRsp} XmsgImGroupMsgSyncRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgSyncRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMsgSyncRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.msg && message.msg.length))
                    message.msg = [];
                message.msg.push($root.XmsgImGroupMsgHistory.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMsgSyncRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMsgSyncRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMsgSyncRsp} XmsgImGroupMsgSyncRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgSyncRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMsgSyncRsp message.
     * @function verify
     * @memberof XmsgImGroupMsgSyncRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMsgSyncRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.msg != null && message.hasOwnProperty("msg")) {
            if (!Array.isArray(message.msg))
                return "msg: array expected";
            for (var i = 0; i < message.msg.length; ++i) {
                var error = $root.XmsgImGroupMsgHistory.verify(message.msg[i]);
                if (error)
                    return "msg." + error;
            }
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupMsgSyncRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMsgSyncRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMsgSyncRsp} XmsgImGroupMsgSyncRsp
     */
    XmsgImGroupMsgSyncRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMsgSyncRsp)
            return object;
        var message = new $root.XmsgImGroupMsgSyncRsp();
        if (object.msg) {
            if (!Array.isArray(object.msg))
                throw TypeError(".XmsgImGroupMsgSyncRsp.msg: array expected");
            message.msg = [];
            for (var i = 0; i < object.msg.length; ++i) {
                if (typeof object.msg[i] !== "object")
                    throw TypeError(".XmsgImGroupMsgSyncRsp.msg: object expected");
                message.msg[i] = $root.XmsgImGroupMsgHistory.fromObject(object.msg[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMsgSyncRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMsgSyncRsp
     * @static
     * @param {XmsgImGroupMsgSyncRsp} message XmsgImGroupMsgSyncRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMsgSyncRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.msg = [];
        if (message.msg && message.msg.length) {
            object.msg = [];
            for (var j = 0; j < message.msg.length; ++j)
                object.msg[j] = $root.XmsgImGroupMsgHistory.toObject(message.msg[j], options);
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupMsgSyncRsp to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMsgSyncRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMsgSyncRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMsgSyncRsp;
})();

$root.XmsgImGroupMsgHistory = (function() {

    /**
     * Properties of a XmsgImGroupMsgHistory.
     * @exports IXmsgImGroupMsgHistory
     * @interface IXmsgImGroupMsgHistory
     * @property {string|null} [scgt] XmsgImGroupMsgHistory scgt
     * @property {number|Long|null} [msgId] XmsgImGroupMsgHistory msgId
     * @property {IXmsgImMsg|null} [msg] XmsgImGroupMsgHistory msg
     * @property {number|Long|null} [gts] XmsgImGroupMsgHistory gts
     * @property {boolean|null} [isRead] XmsgImGroupMsgHistory isRead
     */

    /**
     * Constructs a new XmsgImGroupMsgHistory.
     * @exports XmsgImGroupMsgHistory
     * @classdesc Represents a XmsgImGroupMsgHistory.
     * @implements IXmsgImGroupMsgHistory
     * @constructor
     * @param {IXmsgImGroupMsgHistory=} [properties] Properties to set
     */
    function XmsgImGroupMsgHistory(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMsgHistory scgt.
     * @member {string} scgt
     * @memberof XmsgImGroupMsgHistory
     * @instance
     */
    XmsgImGroupMsgHistory.prototype.scgt = "";

    /**
     * XmsgImGroupMsgHistory msgId.
     * @member {number|Long} msgId
     * @memberof XmsgImGroupMsgHistory
     * @instance
     */
    XmsgImGroupMsgHistory.prototype.msgId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupMsgHistory msg.
     * @member {IXmsgImMsg|null|undefined} msg
     * @memberof XmsgImGroupMsgHistory
     * @instance
     */
    XmsgImGroupMsgHistory.prototype.msg = null;

    /**
     * XmsgImGroupMsgHistory gts.
     * @member {number|Long} gts
     * @memberof XmsgImGroupMsgHistory
     * @instance
     */
    XmsgImGroupMsgHistory.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupMsgHistory isRead.
     * @member {boolean} isRead
     * @memberof XmsgImGroupMsgHistory
     * @instance
     */
    XmsgImGroupMsgHistory.prototype.isRead = false;

    /**
     * Creates a new XmsgImGroupMsgHistory instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMsgHistory
     * @static
     * @param {IXmsgImGroupMsgHistory=} [properties] Properties to set
     * @returns {XmsgImGroupMsgHistory} XmsgImGroupMsgHistory instance
     */
    XmsgImGroupMsgHistory.create = function create(properties) {
        return new XmsgImGroupMsgHistory(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMsgHistory message. Does not implicitly {@link XmsgImGroupMsgHistory.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMsgHistory
     * @static
     * @param {IXmsgImGroupMsgHistory} message XmsgImGroupMsgHistory message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgHistory.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.scgt != null && message.hasOwnProperty("scgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.scgt);
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.msgId);
        if (message.msg != null && message.hasOwnProperty("msg"))
            $root.XmsgImMsg.encode(message.msg, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.gts);
        if (message.isRead != null && message.hasOwnProperty("isRead"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isRead);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMsgHistory message, length delimited. Does not implicitly {@link XmsgImGroupMsgHistory.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMsgHistory
     * @static
     * @param {IXmsgImGroupMsgHistory} message XmsgImGroupMsgHistory message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgHistory.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMsgHistory message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMsgHistory
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMsgHistory} XmsgImGroupMsgHistory
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgHistory.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMsgHistory();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.scgt = reader.string();
                break;
            case 2:
                message.msgId = reader.uint64();
                break;
            case 3:
                message.msg = $root.XmsgImMsg.decode(reader, reader.uint32());
                break;
            case 4:
                message.gts = reader.uint64();
                break;
            case 5:
                message.isRead = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMsgHistory message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMsgHistory
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMsgHistory} XmsgImGroupMsgHistory
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgHistory.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMsgHistory message.
     * @function verify
     * @memberof XmsgImGroupMsgHistory
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMsgHistory.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.scgt != null && message.hasOwnProperty("scgt"))
            if (!$util.isString(message.scgt))
                return "scgt: string expected";
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            if (!$util.isInteger(message.msgId) && !(message.msgId && $util.isInteger(message.msgId.low) && $util.isInteger(message.msgId.high)))
                return "msgId: integer|Long expected";
        if (message.msg != null && message.hasOwnProperty("msg")) {
            var error = $root.XmsgImMsg.verify(message.msg);
            if (error)
                return "msg." + error;
        }
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        if (message.isRead != null && message.hasOwnProperty("isRead"))
            if (typeof message.isRead !== "boolean")
                return "isRead: boolean expected";
        return null;
    };

    /**
     * Creates a XmsgImGroupMsgHistory message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMsgHistory
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMsgHistory} XmsgImGroupMsgHistory
     */
    XmsgImGroupMsgHistory.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMsgHistory)
            return object;
        var message = new $root.XmsgImGroupMsgHistory();
        if (object.scgt != null)
            message.scgt = String(object.scgt);
        if (object.msgId != null)
            if ($util.Long)
                (message.msgId = $util.Long.fromValue(object.msgId)).unsigned = true;
            else if (typeof object.msgId === "string")
                message.msgId = parseInt(object.msgId, 10);
            else if (typeof object.msgId === "number")
                message.msgId = object.msgId;
            else if (typeof object.msgId === "object")
                message.msgId = new $util.LongBits(object.msgId.low >>> 0, object.msgId.high >>> 0).toNumber(true);
        if (object.msg != null) {
            if (typeof object.msg !== "object")
                throw TypeError(".XmsgImGroupMsgHistory.msg: object expected");
            message.msg = $root.XmsgImMsg.fromObject(object.msg);
        }
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        if (object.isRead != null)
            message.isRead = Boolean(object.isRead);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMsgHistory message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMsgHistory
     * @static
     * @param {XmsgImGroupMsgHistory} message XmsgImGroupMsgHistory
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMsgHistory.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.scgt = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.msgId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.msgId = options.longs === String ? "0" : 0;
            object.msg = null;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
            object.isRead = false;
        }
        if (message.scgt != null && message.hasOwnProperty("scgt"))
            object.scgt = message.scgt;
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            if (typeof message.msgId === "number")
                object.msgId = options.longs === String ? String(message.msgId) : message.msgId;
            else
                object.msgId = options.longs === String ? $util.Long.prototype.toString.call(message.msgId) : options.longs === Number ? new $util.LongBits(message.msgId.low >>> 0, message.msgId.high >>> 0).toNumber(true) : message.msgId;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = $root.XmsgImMsg.toObject(message.msg, options);
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        if (message.isRead != null && message.hasOwnProperty("isRead"))
            object.isRead = message.isRead;
        return object;
    };

    /**
     * Converts this XmsgImGroupMsgHistory to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMsgHistory
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMsgHistory.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMsgHistory;
})();

$root.XmsgImGroupMsgQueryReq = (function() {

    /**
     * Properties of a XmsgImGroupMsgQueryReq.
     * @exports IXmsgImGroupMsgQueryReq
     * @interface IXmsgImGroupMsgQueryReq
     * @property {string|null} [cgt] XmsgImGroupMsgQueryReq cgt
     * @property {number|Long|null} [msgId] XmsgImGroupMsgQueryReq msgId
     * @property {boolean|null} [before] XmsgImGroupMsgQueryReq before
     * @property {number|null} [pageSize] XmsgImGroupMsgQueryReq pageSize
     */

    /**
     * Constructs a new XmsgImGroupMsgQueryReq.
     * @exports XmsgImGroupMsgQueryReq
     * @classdesc Represents a XmsgImGroupMsgQueryReq.
     * @implements IXmsgImGroupMsgQueryReq
     * @constructor
     * @param {IXmsgImGroupMsgQueryReq=} [properties] Properties to set
     */
    function XmsgImGroupMsgQueryReq(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMsgQueryReq cgt.
     * @member {string} cgt
     * @memberof XmsgImGroupMsgQueryReq
     * @instance
     */
    XmsgImGroupMsgQueryReq.prototype.cgt = "";

    /**
     * XmsgImGroupMsgQueryReq msgId.
     * @member {number|Long} msgId
     * @memberof XmsgImGroupMsgQueryReq
     * @instance
     */
    XmsgImGroupMsgQueryReq.prototype.msgId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupMsgQueryReq before.
     * @member {boolean} before
     * @memberof XmsgImGroupMsgQueryReq
     * @instance
     */
    XmsgImGroupMsgQueryReq.prototype.before = false;

    /**
     * XmsgImGroupMsgQueryReq pageSize.
     * @member {number} pageSize
     * @memberof XmsgImGroupMsgQueryReq
     * @instance
     */
    XmsgImGroupMsgQueryReq.prototype.pageSize = 0;

    /**
     * Creates a new XmsgImGroupMsgQueryReq instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMsgQueryReq
     * @static
     * @param {IXmsgImGroupMsgQueryReq=} [properties] Properties to set
     * @returns {XmsgImGroupMsgQueryReq} XmsgImGroupMsgQueryReq instance
     */
    XmsgImGroupMsgQueryReq.create = function create(properties) {
        return new XmsgImGroupMsgQueryReq(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMsgQueryReq message. Does not implicitly {@link XmsgImGroupMsgQueryReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMsgQueryReq
     * @static
     * @param {IXmsgImGroupMsgQueryReq} message XmsgImGroupMsgQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgQueryReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.msgId);
        if (message.before != null && message.hasOwnProperty("before"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.before);
        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.pageSize);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMsgQueryReq message, length delimited. Does not implicitly {@link XmsgImGroupMsgQueryReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMsgQueryReq
     * @static
     * @param {IXmsgImGroupMsgQueryReq} message XmsgImGroupMsgQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgQueryReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMsgQueryReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMsgQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMsgQueryReq} XmsgImGroupMsgQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgQueryReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMsgQueryReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.msgId = reader.uint64();
                break;
            case 3:
                message.before = reader.bool();
                break;
            case 4:
                message.pageSize = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMsgQueryReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMsgQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMsgQueryReq} XmsgImGroupMsgQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgQueryReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMsgQueryReq message.
     * @function verify
     * @memberof XmsgImGroupMsgQueryReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMsgQueryReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            if (!$util.isInteger(message.msgId) && !(message.msgId && $util.isInteger(message.msgId.low) && $util.isInteger(message.msgId.high)))
                return "msgId: integer|Long expected";
        if (message.before != null && message.hasOwnProperty("before"))
            if (typeof message.before !== "boolean")
                return "before: boolean expected";
        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
            if (!$util.isInteger(message.pageSize))
                return "pageSize: integer expected";
        return null;
    };

    /**
     * Creates a XmsgImGroupMsgQueryReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMsgQueryReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMsgQueryReq} XmsgImGroupMsgQueryReq
     */
    XmsgImGroupMsgQueryReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMsgQueryReq)
            return object;
        var message = new $root.XmsgImGroupMsgQueryReq();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.msgId != null)
            if ($util.Long)
                (message.msgId = $util.Long.fromValue(object.msgId)).unsigned = true;
            else if (typeof object.msgId === "string")
                message.msgId = parseInt(object.msgId, 10);
            else if (typeof object.msgId === "number")
                message.msgId = object.msgId;
            else if (typeof object.msgId === "object")
                message.msgId = new $util.LongBits(object.msgId.low >>> 0, object.msgId.high >>> 0).toNumber(true);
        if (object.before != null)
            message.before = Boolean(object.before);
        if (object.pageSize != null)
            message.pageSize = object.pageSize >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMsgQueryReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMsgQueryReq
     * @static
     * @param {XmsgImGroupMsgQueryReq} message XmsgImGroupMsgQueryReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMsgQueryReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cgt = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.msgId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.msgId = options.longs === String ? "0" : 0;
            object.before = false;
            object.pageSize = 0;
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            if (typeof message.msgId === "number")
                object.msgId = options.longs === String ? String(message.msgId) : message.msgId;
            else
                object.msgId = options.longs === String ? $util.Long.prototype.toString.call(message.msgId) : options.longs === Number ? new $util.LongBits(message.msgId.low >>> 0, message.msgId.high >>> 0).toNumber(true) : message.msgId;
        if (message.before != null && message.hasOwnProperty("before"))
            object.before = message.before;
        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
            object.pageSize = message.pageSize;
        return object;
    };

    /**
     * Converts this XmsgImGroupMsgQueryReq to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMsgQueryReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMsgQueryReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMsgQueryReq;
})();

$root.XmsgImGroupMsgQueryRsp = (function() {

    /**
     * Properties of a XmsgImGroupMsgQueryRsp.
     * @exports IXmsgImGroupMsgQueryRsp
     * @interface IXmsgImGroupMsgQueryRsp
     * @property {Array.<XmsgImGroupMsgQueryRsp.IXmsgImGroupMsgQueryRspItem>|null} [msg] XmsgImGroupMsgQueryRsp msg
     */

    /**
     * Constructs a new XmsgImGroupMsgQueryRsp.
     * @exports XmsgImGroupMsgQueryRsp
     * @classdesc Represents a XmsgImGroupMsgQueryRsp.
     * @implements IXmsgImGroupMsgQueryRsp
     * @constructor
     * @param {IXmsgImGroupMsgQueryRsp=} [properties] Properties to set
     */
    function XmsgImGroupMsgQueryRsp(properties) {
        this.msg = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMsgQueryRsp msg.
     * @member {Array.<XmsgImGroupMsgQueryRsp.IXmsgImGroupMsgQueryRspItem>} msg
     * @memberof XmsgImGroupMsgQueryRsp
     * @instance
     */
    XmsgImGroupMsgQueryRsp.prototype.msg = $util.emptyArray;

    /**
     * Creates a new XmsgImGroupMsgQueryRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMsgQueryRsp
     * @static
     * @param {IXmsgImGroupMsgQueryRsp=} [properties] Properties to set
     * @returns {XmsgImGroupMsgQueryRsp} XmsgImGroupMsgQueryRsp instance
     */
    XmsgImGroupMsgQueryRsp.create = function create(properties) {
        return new XmsgImGroupMsgQueryRsp(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMsgQueryRsp message. Does not implicitly {@link XmsgImGroupMsgQueryRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMsgQueryRsp
     * @static
     * @param {IXmsgImGroupMsgQueryRsp} message XmsgImGroupMsgQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgQueryRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.msg != null && message.msg.length)
            for (var i = 0; i < message.msg.length; ++i)
                $root.XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem.encode(message.msg[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMsgQueryRsp message, length delimited. Does not implicitly {@link XmsgImGroupMsgQueryRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMsgQueryRsp
     * @static
     * @param {IXmsgImGroupMsgQueryRsp} message XmsgImGroupMsgQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgQueryRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMsgQueryRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMsgQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMsgQueryRsp} XmsgImGroupMsgQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgQueryRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMsgQueryRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.msg && message.msg.length))
                    message.msg = [];
                message.msg.push($root.XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMsgQueryRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMsgQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMsgQueryRsp} XmsgImGroupMsgQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgQueryRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMsgQueryRsp message.
     * @function verify
     * @memberof XmsgImGroupMsgQueryRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMsgQueryRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.msg != null && message.hasOwnProperty("msg")) {
            if (!Array.isArray(message.msg))
                return "msg: array expected";
            for (var i = 0; i < message.msg.length; ++i) {
                var error = $root.XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem.verify(message.msg[i]);
                if (error)
                    return "msg." + error;
            }
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupMsgQueryRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMsgQueryRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMsgQueryRsp} XmsgImGroupMsgQueryRsp
     */
    XmsgImGroupMsgQueryRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMsgQueryRsp)
            return object;
        var message = new $root.XmsgImGroupMsgQueryRsp();
        if (object.msg) {
            if (!Array.isArray(object.msg))
                throw TypeError(".XmsgImGroupMsgQueryRsp.msg: array expected");
            message.msg = [];
            for (var i = 0; i < object.msg.length; ++i) {
                if (typeof object.msg[i] !== "object")
                    throw TypeError(".XmsgImGroupMsgQueryRsp.msg: object expected");
                message.msg[i] = $root.XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem.fromObject(object.msg[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMsgQueryRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMsgQueryRsp
     * @static
     * @param {XmsgImGroupMsgQueryRsp} message XmsgImGroupMsgQueryRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMsgQueryRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.msg = [];
        if (message.msg && message.msg.length) {
            object.msg = [];
            for (var j = 0; j < message.msg.length; ++j)
                object.msg[j] = $root.XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem.toObject(message.msg[j], options);
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupMsgQueryRsp to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMsgQueryRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMsgQueryRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem = (function() {

        /**
         * Properties of a XmsgImGroupMsgQueryRspItem.
         * @memberof XmsgImGroupMsgQueryRsp
         * @interface IXmsgImGroupMsgQueryRspItem
         * @property {string|null} [scgt] XmsgImGroupMsgQueryRspItem scgt
         * @property {number|Long|null} [msgId] XmsgImGroupMsgQueryRspItem msgId
         * @property {IXmsgImMsg|null} [msg] XmsgImGroupMsgQueryRspItem msg
         * @property {number|Long|null} [gts] XmsgImGroupMsgQueryRspItem gts
         */

        /**
         * Constructs a new XmsgImGroupMsgQueryRspItem.
         * @memberof XmsgImGroupMsgQueryRsp
         * @classdesc Represents a XmsgImGroupMsgQueryRspItem.
         * @implements IXmsgImGroupMsgQueryRspItem
         * @constructor
         * @param {XmsgImGroupMsgQueryRsp.IXmsgImGroupMsgQueryRspItem=} [properties] Properties to set
         */
        function XmsgImGroupMsgQueryRspItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * XmsgImGroupMsgQueryRspItem scgt.
         * @member {string} scgt
         * @memberof XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem
         * @instance
         */
        XmsgImGroupMsgQueryRspItem.prototype.scgt = "";

        /**
         * XmsgImGroupMsgQueryRspItem msgId.
         * @member {number|Long} msgId
         * @memberof XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem
         * @instance
         */
        XmsgImGroupMsgQueryRspItem.prototype.msgId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * XmsgImGroupMsgQueryRspItem msg.
         * @member {IXmsgImMsg|null|undefined} msg
         * @memberof XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem
         * @instance
         */
        XmsgImGroupMsgQueryRspItem.prototype.msg = null;

        /**
         * XmsgImGroupMsgQueryRspItem gts.
         * @member {number|Long} gts
         * @memberof XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem
         * @instance
         */
        XmsgImGroupMsgQueryRspItem.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new XmsgImGroupMsgQueryRspItem instance using the specified properties.
         * @function create
         * @memberof XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem
         * @static
         * @param {XmsgImGroupMsgQueryRsp.IXmsgImGroupMsgQueryRspItem=} [properties] Properties to set
         * @returns {XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem} XmsgImGroupMsgQueryRspItem instance
         */
        XmsgImGroupMsgQueryRspItem.create = function create(properties) {
            return new XmsgImGroupMsgQueryRspItem(properties);
        };

        /**
         * Encodes the specified XmsgImGroupMsgQueryRspItem message. Does not implicitly {@link XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem.verify|verify} messages.
         * @function encode
         * @memberof XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem
         * @static
         * @param {XmsgImGroupMsgQueryRsp.IXmsgImGroupMsgQueryRspItem} message XmsgImGroupMsgQueryRspItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        XmsgImGroupMsgQueryRspItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.scgt != null && message.hasOwnProperty("scgt"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.scgt);
            if (message.msgId != null && message.hasOwnProperty("msgId"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.msgId);
            if (message.msg != null && message.hasOwnProperty("msg"))
                $root.XmsgImMsg.encode(message.msg, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.gts != null && message.hasOwnProperty("gts"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.gts);
            return writer;
        };

        /**
         * Encodes the specified XmsgImGroupMsgQueryRspItem message, length delimited. Does not implicitly {@link XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem
         * @static
         * @param {XmsgImGroupMsgQueryRsp.IXmsgImGroupMsgQueryRspItem} message XmsgImGroupMsgQueryRspItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        XmsgImGroupMsgQueryRspItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a XmsgImGroupMsgQueryRspItem message from the specified reader or buffer.
         * @function decode
         * @memberof XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem} XmsgImGroupMsgQueryRspItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        XmsgImGroupMsgQueryRspItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.scgt = reader.string();
                    break;
                case 2:
                    message.msgId = reader.uint64();
                    break;
                case 3:
                    message.msg = $root.XmsgImMsg.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.gts = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a XmsgImGroupMsgQueryRspItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem} XmsgImGroupMsgQueryRspItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        XmsgImGroupMsgQueryRspItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a XmsgImGroupMsgQueryRspItem message.
         * @function verify
         * @memberof XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        XmsgImGroupMsgQueryRspItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.scgt != null && message.hasOwnProperty("scgt"))
                if (!$util.isString(message.scgt))
                    return "scgt: string expected";
            if (message.msgId != null && message.hasOwnProperty("msgId"))
                if (!$util.isInteger(message.msgId) && !(message.msgId && $util.isInteger(message.msgId.low) && $util.isInteger(message.msgId.high)))
                    return "msgId: integer|Long expected";
            if (message.msg != null && message.hasOwnProperty("msg")) {
                var error = $root.XmsgImMsg.verify(message.msg);
                if (error)
                    return "msg." + error;
            }
            if (message.gts != null && message.hasOwnProperty("gts"))
                if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                    return "gts: integer|Long expected";
            return null;
        };

        /**
         * Creates a XmsgImGroupMsgQueryRspItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem} XmsgImGroupMsgQueryRspItem
         */
        XmsgImGroupMsgQueryRspItem.fromObject = function fromObject(object) {
            if (object instanceof $root.XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem)
                return object;
            var message = new $root.XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem();
            if (object.scgt != null)
                message.scgt = String(object.scgt);
            if (object.msgId != null)
                if ($util.Long)
                    (message.msgId = $util.Long.fromValue(object.msgId)).unsigned = true;
                else if (typeof object.msgId === "string")
                    message.msgId = parseInt(object.msgId, 10);
                else if (typeof object.msgId === "number")
                    message.msgId = object.msgId;
                else if (typeof object.msgId === "object")
                    message.msgId = new $util.LongBits(object.msgId.low >>> 0, object.msgId.high >>> 0).toNumber(true);
            if (object.msg != null) {
                if (typeof object.msg !== "object")
                    throw TypeError(".XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem.msg: object expected");
                message.msg = $root.XmsgImMsg.fromObject(object.msg);
            }
            if (object.gts != null)
                if ($util.Long)
                    (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
                else if (typeof object.gts === "string")
                    message.gts = parseInt(object.gts, 10);
                else if (typeof object.gts === "number")
                    message.gts = object.gts;
                else if (typeof object.gts === "object")
                    message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a XmsgImGroupMsgQueryRspItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem
         * @static
         * @param {XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem} message XmsgImGroupMsgQueryRspItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        XmsgImGroupMsgQueryRspItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.scgt = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.msgId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.msgId = options.longs === String ? "0" : 0;
                object.msg = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gts = options.longs === String ? "0" : 0;
            }
            if (message.scgt != null && message.hasOwnProperty("scgt"))
                object.scgt = message.scgt;
            if (message.msgId != null && message.hasOwnProperty("msgId"))
                if (typeof message.msgId === "number")
                    object.msgId = options.longs === String ? String(message.msgId) : message.msgId;
                else
                    object.msgId = options.longs === String ? $util.Long.prototype.toString.call(message.msgId) : options.longs === Number ? new $util.LongBits(message.msgId.low >>> 0, message.msgId.high >>> 0).toNumber(true) : message.msgId;
            if (message.msg != null && message.hasOwnProperty("msg"))
                object.msg = $root.XmsgImMsg.toObject(message.msg, options);
            if (message.gts != null && message.hasOwnProperty("gts"))
                if (typeof message.gts === "number")
                    object.gts = options.longs === String ? String(message.gts) : message.gts;
                else
                    object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
            return object;
        };

        /**
         * Converts this XmsgImGroupMsgQueryRspItem to JSON.
         * @function toJSON
         * @memberof XmsgImGroupMsgQueryRsp.XmsgImGroupMsgQueryRspItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        XmsgImGroupMsgQueryRspItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return XmsgImGroupMsgQueryRspItem;
    })();

    return XmsgImGroupMsgQueryRsp;
})();

$root.XmsgImGroupMsgReadReq = (function() {

    /**
     * Properties of a XmsgImGroupMsgReadReq.
     * @exports IXmsgImGroupMsgReadReq
     * @interface IXmsgImGroupMsgReadReq
     * @property {string|null} [cgt] XmsgImGroupMsgReadReq cgt
     * @property {number|Long|null} [msgId] XmsgImGroupMsgReadReq msgId
     */

    /**
     * Constructs a new XmsgImGroupMsgReadReq.
     * @exports XmsgImGroupMsgReadReq
     * @classdesc Represents a XmsgImGroupMsgReadReq.
     * @implements IXmsgImGroupMsgReadReq
     * @constructor
     * @param {IXmsgImGroupMsgReadReq=} [properties] Properties to set
     */
    function XmsgImGroupMsgReadReq(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMsgReadReq cgt.
     * @member {string} cgt
     * @memberof XmsgImGroupMsgReadReq
     * @instance
     */
    XmsgImGroupMsgReadReq.prototype.cgt = "";

    /**
     * XmsgImGroupMsgReadReq msgId.
     * @member {number|Long} msgId
     * @memberof XmsgImGroupMsgReadReq
     * @instance
     */
    XmsgImGroupMsgReadReq.prototype.msgId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgImGroupMsgReadReq instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMsgReadReq
     * @static
     * @param {IXmsgImGroupMsgReadReq=} [properties] Properties to set
     * @returns {XmsgImGroupMsgReadReq} XmsgImGroupMsgReadReq instance
     */
    XmsgImGroupMsgReadReq.create = function create(properties) {
        return new XmsgImGroupMsgReadReq(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMsgReadReq message. Does not implicitly {@link XmsgImGroupMsgReadReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMsgReadReq
     * @static
     * @param {IXmsgImGroupMsgReadReq} message XmsgImGroupMsgReadReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgReadReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.msgId);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMsgReadReq message, length delimited. Does not implicitly {@link XmsgImGroupMsgReadReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMsgReadReq
     * @static
     * @param {IXmsgImGroupMsgReadReq} message XmsgImGroupMsgReadReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgReadReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMsgReadReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMsgReadReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMsgReadReq} XmsgImGroupMsgReadReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgReadReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMsgReadReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.msgId = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMsgReadReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMsgReadReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMsgReadReq} XmsgImGroupMsgReadReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgReadReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMsgReadReq message.
     * @function verify
     * @memberof XmsgImGroupMsgReadReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMsgReadReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            if (!$util.isInteger(message.msgId) && !(message.msgId && $util.isInteger(message.msgId.low) && $util.isInteger(message.msgId.high)))
                return "msgId: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgImGroupMsgReadReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMsgReadReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMsgReadReq} XmsgImGroupMsgReadReq
     */
    XmsgImGroupMsgReadReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMsgReadReq)
            return object;
        var message = new $root.XmsgImGroupMsgReadReq();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.msgId != null)
            if ($util.Long)
                (message.msgId = $util.Long.fromValue(object.msgId)).unsigned = true;
            else if (typeof object.msgId === "string")
                message.msgId = parseInt(object.msgId, 10);
            else if (typeof object.msgId === "number")
                message.msgId = object.msgId;
            else if (typeof object.msgId === "object")
                message.msgId = new $util.LongBits(object.msgId.low >>> 0, object.msgId.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMsgReadReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMsgReadReq
     * @static
     * @param {XmsgImGroupMsgReadReq} message XmsgImGroupMsgReadReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMsgReadReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cgt = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.msgId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.msgId = options.longs === String ? "0" : 0;
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            if (typeof message.msgId === "number")
                object.msgId = options.longs === String ? String(message.msgId) : message.msgId;
            else
                object.msgId = options.longs === String ? $util.Long.prototype.toString.call(message.msgId) : options.longs === Number ? new $util.LongBits(message.msgId.low >>> 0, message.msgId.high >>> 0).toNumber(true) : message.msgId;
        return object;
    };

    /**
     * Converts this XmsgImGroupMsgReadReq to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMsgReadReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMsgReadReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMsgReadReq;
})();

$root.XmsgImGroupMsgReadRsp = (function() {

    /**
     * Properties of a XmsgImGroupMsgReadRsp.
     * @exports IXmsgImGroupMsgReadRsp
     * @interface IXmsgImGroupMsgReadRsp
     * @property {Object.<string,string>|null} [ext] XmsgImGroupMsgReadRsp ext
     */

    /**
     * Constructs a new XmsgImGroupMsgReadRsp.
     * @exports XmsgImGroupMsgReadRsp
     * @classdesc Represents a XmsgImGroupMsgReadRsp.
     * @implements IXmsgImGroupMsgReadRsp
     * @constructor
     * @param {IXmsgImGroupMsgReadRsp=} [properties] Properties to set
     */
    function XmsgImGroupMsgReadRsp(properties) {
        this.ext = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMsgReadRsp ext.
     * @member {Object.<string,string>} ext
     * @memberof XmsgImGroupMsgReadRsp
     * @instance
     */
    XmsgImGroupMsgReadRsp.prototype.ext = $util.emptyObject;

    /**
     * Creates a new XmsgImGroupMsgReadRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMsgReadRsp
     * @static
     * @param {IXmsgImGroupMsgReadRsp=} [properties] Properties to set
     * @returns {XmsgImGroupMsgReadRsp} XmsgImGroupMsgReadRsp instance
     */
    XmsgImGroupMsgReadRsp.create = function create(properties) {
        return new XmsgImGroupMsgReadRsp(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMsgReadRsp message. Does not implicitly {@link XmsgImGroupMsgReadRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMsgReadRsp
     * @static
     * @param {IXmsgImGroupMsgReadRsp} message XmsgImGroupMsgReadRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgReadRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ext != null && message.hasOwnProperty("ext"))
            for (var keys = Object.keys(message.ext), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.ext[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMsgReadRsp message, length delimited. Does not implicitly {@link XmsgImGroupMsgReadRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMsgReadRsp
     * @static
     * @param {IXmsgImGroupMsgReadRsp} message XmsgImGroupMsgReadRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgReadRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMsgReadRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMsgReadRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMsgReadRsp} XmsgImGroupMsgReadRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgReadRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMsgReadRsp(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                reader.skip().pos++;
                if (message.ext === $util.emptyObject)
                    message.ext = {};
                key = reader.string();
                reader.pos++;
                message.ext[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMsgReadRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMsgReadRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMsgReadRsp} XmsgImGroupMsgReadRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgReadRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMsgReadRsp message.
     * @function verify
     * @memberof XmsgImGroupMsgReadRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMsgReadRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ext != null && message.hasOwnProperty("ext")) {
            if (!$util.isObject(message.ext))
                return "ext: object expected";
            var key = Object.keys(message.ext);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.ext[key[i]]))
                    return "ext: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupMsgReadRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMsgReadRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMsgReadRsp} XmsgImGroupMsgReadRsp
     */
    XmsgImGroupMsgReadRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMsgReadRsp)
            return object;
        var message = new $root.XmsgImGroupMsgReadRsp();
        if (object.ext) {
            if (typeof object.ext !== "object")
                throw TypeError(".XmsgImGroupMsgReadRsp.ext: object expected");
            message.ext = {};
            for (var keys = Object.keys(object.ext), i = 0; i < keys.length; ++i)
                message.ext[keys[i]] = String(object.ext[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMsgReadRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMsgReadRsp
     * @static
     * @param {XmsgImGroupMsgReadRsp} message XmsgImGroupMsgReadRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMsgReadRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.ext = {};
        var keys2;
        if (message.ext && (keys2 = Object.keys(message.ext)).length) {
            object.ext = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ext[keys2[j]] = message.ext[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupMsgReadRsp to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMsgReadRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMsgReadRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMsgReadRsp;
})();

$root.XmsgImGroupMsgReadNotice = (function() {

    /**
     * Properties of a XmsgImGroupMsgReadNotice.
     * @exports IXmsgImGroupMsgReadNotice
     * @interface IXmsgImGroupMsgReadNotice
     * @property {string|null} [cgt] XmsgImGroupMsgReadNotice cgt
     * @property {number|Long|null} [msgId] XmsgImGroupMsgReadNotice msgId
     */

    /**
     * Constructs a new XmsgImGroupMsgReadNotice.
     * @exports XmsgImGroupMsgReadNotice
     * @classdesc Represents a XmsgImGroupMsgReadNotice.
     * @implements IXmsgImGroupMsgReadNotice
     * @constructor
     * @param {IXmsgImGroupMsgReadNotice=} [properties] Properties to set
     */
    function XmsgImGroupMsgReadNotice(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMsgReadNotice cgt.
     * @member {string} cgt
     * @memberof XmsgImGroupMsgReadNotice
     * @instance
     */
    XmsgImGroupMsgReadNotice.prototype.cgt = "";

    /**
     * XmsgImGroupMsgReadNotice msgId.
     * @member {number|Long} msgId
     * @memberof XmsgImGroupMsgReadNotice
     * @instance
     */
    XmsgImGroupMsgReadNotice.prototype.msgId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgImGroupMsgReadNotice instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMsgReadNotice
     * @static
     * @param {IXmsgImGroupMsgReadNotice=} [properties] Properties to set
     * @returns {XmsgImGroupMsgReadNotice} XmsgImGroupMsgReadNotice instance
     */
    XmsgImGroupMsgReadNotice.create = function create(properties) {
        return new XmsgImGroupMsgReadNotice(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMsgReadNotice message. Does not implicitly {@link XmsgImGroupMsgReadNotice.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMsgReadNotice
     * @static
     * @param {IXmsgImGroupMsgReadNotice} message XmsgImGroupMsgReadNotice message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgReadNotice.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.msgId);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMsgReadNotice message, length delimited. Does not implicitly {@link XmsgImGroupMsgReadNotice.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMsgReadNotice
     * @static
     * @param {IXmsgImGroupMsgReadNotice} message XmsgImGroupMsgReadNotice message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgReadNotice.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMsgReadNotice message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMsgReadNotice
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMsgReadNotice} XmsgImGroupMsgReadNotice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgReadNotice.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMsgReadNotice();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.msgId = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMsgReadNotice message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMsgReadNotice
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMsgReadNotice} XmsgImGroupMsgReadNotice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgReadNotice.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMsgReadNotice message.
     * @function verify
     * @memberof XmsgImGroupMsgReadNotice
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMsgReadNotice.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            if (!$util.isInteger(message.msgId) && !(message.msgId && $util.isInteger(message.msgId.low) && $util.isInteger(message.msgId.high)))
                return "msgId: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgImGroupMsgReadNotice message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMsgReadNotice
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMsgReadNotice} XmsgImGroupMsgReadNotice
     */
    XmsgImGroupMsgReadNotice.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMsgReadNotice)
            return object;
        var message = new $root.XmsgImGroupMsgReadNotice();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.msgId != null)
            if ($util.Long)
                (message.msgId = $util.Long.fromValue(object.msgId)).unsigned = true;
            else if (typeof object.msgId === "string")
                message.msgId = parseInt(object.msgId, 10);
            else if (typeof object.msgId === "number")
                message.msgId = object.msgId;
            else if (typeof object.msgId === "object")
                message.msgId = new $util.LongBits(object.msgId.low >>> 0, object.msgId.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMsgReadNotice message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMsgReadNotice
     * @static
     * @param {XmsgImGroupMsgReadNotice} message XmsgImGroupMsgReadNotice
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMsgReadNotice.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cgt = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.msgId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.msgId = options.longs === String ? "0" : 0;
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.msgId != null && message.hasOwnProperty("msgId"))
            if (typeof message.msgId === "number")
                object.msgId = options.longs === String ? String(message.msgId) : message.msgId;
            else
                object.msgId = options.longs === String ? $util.Long.prototype.toString.call(message.msgId) : options.longs === Number ? new $util.LongBits(message.msgId.low >>> 0, message.msgId.high >>> 0).toNumber(true) : message.msgId;
        return object;
    };

    /**
     * Converts this XmsgImGroupMsgReadNotice to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMsgReadNotice
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMsgReadNotice.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMsgReadNotice;
})();

$root.XmsgImHlrGroupMsgReq = (function() {

    /**
     * Properties of a XmsgImHlrGroupMsgReq.
     * @exports IXmsgImHlrGroupMsgReq
     * @interface IXmsgImHlrGroupMsgReq
     * @property {string|null} [cgt] XmsgImHlrGroupMsgReq cgt
     * @property {string|null} [type] XmsgImHlrGroupMsgReq type
     * @property {string|null} [msg] XmsgImHlrGroupMsgReq msg
     * @property {Uint8Array|null} [dat] XmsgImHlrGroupMsgReq dat
     */

    /**
     * Constructs a new XmsgImHlrGroupMsgReq.
     * @exports XmsgImHlrGroupMsgReq
     * @classdesc Represents a XmsgImHlrGroupMsgReq.
     * @implements IXmsgImHlrGroupMsgReq
     * @constructor
     * @param {IXmsgImHlrGroupMsgReq=} [properties] Properties to set
     */
    function XmsgImHlrGroupMsgReq(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrGroupMsgReq cgt.
     * @member {string} cgt
     * @memberof XmsgImHlrGroupMsgReq
     * @instance
     */
    XmsgImHlrGroupMsgReq.prototype.cgt = "";

    /**
     * XmsgImHlrGroupMsgReq type.
     * @member {string} type
     * @memberof XmsgImHlrGroupMsgReq
     * @instance
     */
    XmsgImHlrGroupMsgReq.prototype.type = "";

    /**
     * XmsgImHlrGroupMsgReq msg.
     * @member {string} msg
     * @memberof XmsgImHlrGroupMsgReq
     * @instance
     */
    XmsgImHlrGroupMsgReq.prototype.msg = "";

    /**
     * XmsgImHlrGroupMsgReq dat.
     * @member {Uint8Array} dat
     * @memberof XmsgImHlrGroupMsgReq
     * @instance
     */
    XmsgImHlrGroupMsgReq.prototype.dat = $util.newBuffer([]);

    /**
     * Creates a new XmsgImHlrGroupMsgReq instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrGroupMsgReq
     * @static
     * @param {IXmsgImHlrGroupMsgReq=} [properties] Properties to set
     * @returns {XmsgImHlrGroupMsgReq} XmsgImHlrGroupMsgReq instance
     */
    XmsgImHlrGroupMsgReq.create = function create(properties) {
        return new XmsgImHlrGroupMsgReq(properties);
    };

    /**
     * Encodes the specified XmsgImHlrGroupMsgReq message. Does not implicitly {@link XmsgImHlrGroupMsgReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrGroupMsgReq
     * @static
     * @param {IXmsgImHlrGroupMsgReq} message XmsgImHlrGroupMsgReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrGroupMsgReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.type);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
        if (message.dat != null && message.hasOwnProperty("dat"))
            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.dat);
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrGroupMsgReq message, length delimited. Does not implicitly {@link XmsgImHlrGroupMsgReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrGroupMsgReq
     * @static
     * @param {IXmsgImHlrGroupMsgReq} message XmsgImHlrGroupMsgReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrGroupMsgReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrGroupMsgReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrGroupMsgReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrGroupMsgReq} XmsgImHlrGroupMsgReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrGroupMsgReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrGroupMsgReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.type = reader.string();
                break;
            case 3:
                message.msg = reader.string();
                break;
            case 4:
                message.dat = reader.bytes();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrGroupMsgReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrGroupMsgReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrGroupMsgReq} XmsgImHlrGroupMsgReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrGroupMsgReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrGroupMsgReq message.
     * @function verify
     * @memberof XmsgImHlrGroupMsgReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrGroupMsgReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isString(message.type))
                return "type: string expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        if (message.dat != null && message.hasOwnProperty("dat"))
            if (!(message.dat && typeof message.dat.length === "number" || $util.isString(message.dat)))
                return "dat: buffer expected";
        return null;
    };

    /**
     * Creates a XmsgImHlrGroupMsgReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrGroupMsgReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrGroupMsgReq} XmsgImHlrGroupMsgReq
     */
    XmsgImHlrGroupMsgReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrGroupMsgReq)
            return object;
        var message = new $root.XmsgImHlrGroupMsgReq();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.type != null)
            message.type = String(object.type);
        if (object.msg != null)
            message.msg = String(object.msg);
        if (object.dat != null)
            if (typeof object.dat === "string")
                $util.base64.decode(object.dat, message.dat = $util.newBuffer($util.base64.length(object.dat)), 0);
            else if (object.dat.length)
                message.dat = object.dat;
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrGroupMsgReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrGroupMsgReq
     * @static
     * @param {XmsgImHlrGroupMsgReq} message XmsgImHlrGroupMsgReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrGroupMsgReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cgt = "";
            object.type = "";
            object.msg = "";
            if (options.bytes === String)
                object.dat = "";
            else {
                object.dat = [];
                if (options.bytes !== Array)
                    object.dat = $util.newBuffer(object.dat);
            }
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        if (message.dat != null && message.hasOwnProperty("dat"))
            object.dat = options.bytes === String ? $util.base64.encode(message.dat, 0, message.dat.length) : options.bytes === Array ? Array.prototype.slice.call(message.dat) : message.dat;
        return object;
    };

    /**
     * Converts this XmsgImHlrGroupMsgReq to JSON.
     * @function toJSON
     * @memberof XmsgImHlrGroupMsgReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrGroupMsgReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrGroupMsgReq;
})();

$root.XmsgImHlrGroupMsgRsp = (function() {

    /**
     * Properties of a XmsgImHlrGroupMsgRsp.
     * @exports IXmsgImHlrGroupMsgRsp
     * @interface IXmsgImHlrGroupMsgRsp
     * @property {Object.<string,string>|null} [ext] XmsgImHlrGroupMsgRsp ext
     */

    /**
     * Constructs a new XmsgImHlrGroupMsgRsp.
     * @exports XmsgImHlrGroupMsgRsp
     * @classdesc Represents a XmsgImHlrGroupMsgRsp.
     * @implements IXmsgImHlrGroupMsgRsp
     * @constructor
     * @param {IXmsgImHlrGroupMsgRsp=} [properties] Properties to set
     */
    function XmsgImHlrGroupMsgRsp(properties) {
        this.ext = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrGroupMsgRsp ext.
     * @member {Object.<string,string>} ext
     * @memberof XmsgImHlrGroupMsgRsp
     * @instance
     */
    XmsgImHlrGroupMsgRsp.prototype.ext = $util.emptyObject;

    /**
     * Creates a new XmsgImHlrGroupMsgRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrGroupMsgRsp
     * @static
     * @param {IXmsgImHlrGroupMsgRsp=} [properties] Properties to set
     * @returns {XmsgImHlrGroupMsgRsp} XmsgImHlrGroupMsgRsp instance
     */
    XmsgImHlrGroupMsgRsp.create = function create(properties) {
        return new XmsgImHlrGroupMsgRsp(properties);
    };

    /**
     * Encodes the specified XmsgImHlrGroupMsgRsp message. Does not implicitly {@link XmsgImHlrGroupMsgRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrGroupMsgRsp
     * @static
     * @param {IXmsgImHlrGroupMsgRsp} message XmsgImHlrGroupMsgRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrGroupMsgRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ext != null && message.hasOwnProperty("ext"))
            for (var keys = Object.keys(message.ext), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.ext[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrGroupMsgRsp message, length delimited. Does not implicitly {@link XmsgImHlrGroupMsgRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrGroupMsgRsp
     * @static
     * @param {IXmsgImHlrGroupMsgRsp} message XmsgImHlrGroupMsgRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrGroupMsgRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrGroupMsgRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrGroupMsgRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrGroupMsgRsp} XmsgImHlrGroupMsgRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrGroupMsgRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrGroupMsgRsp(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                reader.skip().pos++;
                if (message.ext === $util.emptyObject)
                    message.ext = {};
                key = reader.string();
                reader.pos++;
                message.ext[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrGroupMsgRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrGroupMsgRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrGroupMsgRsp} XmsgImHlrGroupMsgRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrGroupMsgRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrGroupMsgRsp message.
     * @function verify
     * @memberof XmsgImHlrGroupMsgRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrGroupMsgRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ext != null && message.hasOwnProperty("ext")) {
            if (!$util.isObject(message.ext))
                return "ext: object expected";
            var key = Object.keys(message.ext);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.ext[key[i]]))
                    return "ext: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImHlrGroupMsgRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrGroupMsgRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrGroupMsgRsp} XmsgImHlrGroupMsgRsp
     */
    XmsgImHlrGroupMsgRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrGroupMsgRsp)
            return object;
        var message = new $root.XmsgImHlrGroupMsgRsp();
        if (object.ext) {
            if (typeof object.ext !== "object")
                throw TypeError(".XmsgImHlrGroupMsgRsp.ext: object expected");
            message.ext = {};
            for (var keys = Object.keys(object.ext), i = 0; i < keys.length; ++i)
                message.ext[keys[i]] = String(object.ext[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrGroupMsgRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrGroupMsgRsp
     * @static
     * @param {XmsgImHlrGroupMsgRsp} message XmsgImHlrGroupMsgRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrGroupMsgRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.ext = {};
        var keys2;
        if (message.ext && (keys2 = Object.keys(message.ext)).length) {
            object.ext = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ext[keys2[j]] = message.ext[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImHlrGroupMsgRsp to JSON.
     * @function toJSON
     * @memberof XmsgImHlrGroupMsgRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrGroupMsgRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrGroupMsgRsp;
})();

$root.XmsgClientTokenInfo = (function() {

    /**
     * Properties of a XmsgClientTokenInfo.
     * @exports IXmsgClientTokenInfo
     * @interface IXmsgClientTokenInfo
     * @property {string|null} [token] XmsgClientTokenInfo token
     * @property {string|null} [alg] XmsgClientTokenInfo alg
     * @property {string|null} [slat] XmsgClientTokenInfo slat
     * @property {string|null} [plat] XmsgClientTokenInfo plat
     * @property {string|null} [did] XmsgClientTokenInfo did
     * @property {string|null} [sign] XmsgClientTokenInfo sign
     */

    /**
     * Constructs a new XmsgClientTokenInfo.
     * @exports XmsgClientTokenInfo
     * @classdesc Represents a XmsgClientTokenInfo.
     * @implements IXmsgClientTokenInfo
     * @constructor
     * @param {IXmsgClientTokenInfo=} [properties] Properties to set
     */
    function XmsgClientTokenInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgClientTokenInfo token.
     * @member {string} token
     * @memberof XmsgClientTokenInfo
     * @instance
     */
    XmsgClientTokenInfo.prototype.token = "";

    /**
     * XmsgClientTokenInfo alg.
     * @member {string} alg
     * @memberof XmsgClientTokenInfo
     * @instance
     */
    XmsgClientTokenInfo.prototype.alg = "";

    /**
     * XmsgClientTokenInfo slat.
     * @member {string} slat
     * @memberof XmsgClientTokenInfo
     * @instance
     */
    XmsgClientTokenInfo.prototype.slat = "";

    /**
     * XmsgClientTokenInfo plat.
     * @member {string} plat
     * @memberof XmsgClientTokenInfo
     * @instance
     */
    XmsgClientTokenInfo.prototype.plat = "";

    /**
     * XmsgClientTokenInfo did.
     * @member {string} did
     * @memberof XmsgClientTokenInfo
     * @instance
     */
    XmsgClientTokenInfo.prototype.did = "";

    /**
     * XmsgClientTokenInfo sign.
     * @member {string} sign
     * @memberof XmsgClientTokenInfo
     * @instance
     */
    XmsgClientTokenInfo.prototype.sign = "";

    /**
     * Creates a new XmsgClientTokenInfo instance using the specified properties.
     * @function create
     * @memberof XmsgClientTokenInfo
     * @static
     * @param {IXmsgClientTokenInfo=} [properties] Properties to set
     * @returns {XmsgClientTokenInfo} XmsgClientTokenInfo instance
     */
    XmsgClientTokenInfo.create = function create(properties) {
        return new XmsgClientTokenInfo(properties);
    };

    /**
     * Encodes the specified XmsgClientTokenInfo message. Does not implicitly {@link XmsgClientTokenInfo.verify|verify} messages.
     * @function encode
     * @memberof XmsgClientTokenInfo
     * @static
     * @param {IXmsgClientTokenInfo} message XmsgClientTokenInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgClientTokenInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.token != null && message.hasOwnProperty("token"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.token);
        if (message.alg != null && message.hasOwnProperty("alg"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.alg);
        if (message.slat != null && message.hasOwnProperty("slat"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.slat);
        if (message.plat != null && message.hasOwnProperty("plat"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.plat);
        if (message.did != null && message.hasOwnProperty("did"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.did);
        if (message.sign != null && message.hasOwnProperty("sign"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.sign);
        return writer;
    };

    /**
     * Encodes the specified XmsgClientTokenInfo message, length delimited. Does not implicitly {@link XmsgClientTokenInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgClientTokenInfo
     * @static
     * @param {IXmsgClientTokenInfo} message XmsgClientTokenInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgClientTokenInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgClientTokenInfo message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgClientTokenInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgClientTokenInfo} XmsgClientTokenInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgClientTokenInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgClientTokenInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.token = reader.string();
                break;
            case 2:
                message.alg = reader.string();
                break;
            case 3:
                message.slat = reader.string();
                break;
            case 4:
                message.plat = reader.string();
                break;
            case 5:
                message.did = reader.string();
                break;
            case 6:
                message.sign = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgClientTokenInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgClientTokenInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgClientTokenInfo} XmsgClientTokenInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgClientTokenInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgClientTokenInfo message.
     * @function verify
     * @memberof XmsgClientTokenInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgClientTokenInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.token != null && message.hasOwnProperty("token"))
            if (!$util.isString(message.token))
                return "token: string expected";
        if (message.alg != null && message.hasOwnProperty("alg"))
            if (!$util.isString(message.alg))
                return "alg: string expected";
        if (message.slat != null && message.hasOwnProperty("slat"))
            if (!$util.isString(message.slat))
                return "slat: string expected";
        if (message.plat != null && message.hasOwnProperty("plat"))
            if (!$util.isString(message.plat))
                return "plat: string expected";
        if (message.did != null && message.hasOwnProperty("did"))
            if (!$util.isString(message.did))
                return "did: string expected";
        if (message.sign != null && message.hasOwnProperty("sign"))
            if (!$util.isString(message.sign))
                return "sign: string expected";
        return null;
    };

    /**
     * Creates a XmsgClientTokenInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgClientTokenInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgClientTokenInfo} XmsgClientTokenInfo
     */
    XmsgClientTokenInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgClientTokenInfo)
            return object;
        var message = new $root.XmsgClientTokenInfo();
        if (object.token != null)
            message.token = String(object.token);
        if (object.alg != null)
            message.alg = String(object.alg);
        if (object.slat != null)
            message.slat = String(object.slat);
        if (object.plat != null)
            message.plat = String(object.plat);
        if (object.did != null)
            message.did = String(object.did);
        if (object.sign != null)
            message.sign = String(object.sign);
        return message;
    };

    /**
     * Creates a plain object from a XmsgClientTokenInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgClientTokenInfo
     * @static
     * @param {XmsgClientTokenInfo} message XmsgClientTokenInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgClientTokenInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.token = "";
            object.alg = "";
            object.slat = "";
            object.plat = "";
            object.did = "";
            object.sign = "";
        }
        if (message.token != null && message.hasOwnProperty("token"))
            object.token = message.token;
        if (message.alg != null && message.hasOwnProperty("alg"))
            object.alg = message.alg;
        if (message.slat != null && message.hasOwnProperty("slat"))
            object.slat = message.slat;
        if (message.plat != null && message.hasOwnProperty("plat"))
            object.plat = message.plat;
        if (message.did != null && message.hasOwnProperty("did"))
            object.did = message.did;
        if (message.sign != null && message.hasOwnProperty("sign"))
            object.sign = message.sign;
        return object;
    };

    /**
     * Converts this XmsgClientTokenInfo to JSON.
     * @function toJSON
     * @memberof XmsgClientTokenInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgClientTokenInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgClientTokenInfo;
})();

$root.XmsgImGroupMemberAddReq = (function() {

    /**
     * Properties of a XmsgImGroupMemberAddReq.
     * @exports IXmsgImGroupMemberAddReq
     * @interface IXmsgImGroupMemberAddReq
     * @property {string|null} [cgt] XmsgImGroupMemberAddReq cgt
     * @property {Array.<IXmsgImGroupAddMember>|null} [member] XmsgImGroupMemberAddReq member
     */

    /**
     * Constructs a new XmsgImGroupMemberAddReq.
     * @exports XmsgImGroupMemberAddReq
     * @classdesc Represents a XmsgImGroupMemberAddReq.
     * @implements IXmsgImGroupMemberAddReq
     * @constructor
     * @param {IXmsgImGroupMemberAddReq=} [properties] Properties to set
     */
    function XmsgImGroupMemberAddReq(properties) {
        this.member = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMemberAddReq cgt.
     * @member {string} cgt
     * @memberof XmsgImGroupMemberAddReq
     * @instance
     */
    XmsgImGroupMemberAddReq.prototype.cgt = "";

    /**
     * XmsgImGroupMemberAddReq member.
     * @member {Array.<IXmsgImGroupAddMember>} member
     * @memberof XmsgImGroupMemberAddReq
     * @instance
     */
    XmsgImGroupMemberAddReq.prototype.member = $util.emptyArray;

    /**
     * Creates a new XmsgImGroupMemberAddReq instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMemberAddReq
     * @static
     * @param {IXmsgImGroupMemberAddReq=} [properties] Properties to set
     * @returns {XmsgImGroupMemberAddReq} XmsgImGroupMemberAddReq instance
     */
    XmsgImGroupMemberAddReq.create = function create(properties) {
        return new XmsgImGroupMemberAddReq(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMemberAddReq message. Does not implicitly {@link XmsgImGroupMemberAddReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMemberAddReq
     * @static
     * @param {IXmsgImGroupMemberAddReq} message XmsgImGroupMemberAddReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMemberAddReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.member != null && message.member.length)
            for (var i = 0; i < message.member.length; ++i)
                $root.XmsgImGroupAddMember.encode(message.member[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMemberAddReq message, length delimited. Does not implicitly {@link XmsgImGroupMemberAddReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMemberAddReq
     * @static
     * @param {IXmsgImGroupMemberAddReq} message XmsgImGroupMemberAddReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMemberAddReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMemberAddReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMemberAddReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMemberAddReq} XmsgImGroupMemberAddReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMemberAddReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMemberAddReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                if (!(message.member && message.member.length))
                    message.member = [];
                message.member.push($root.XmsgImGroupAddMember.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMemberAddReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMemberAddReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMemberAddReq} XmsgImGroupMemberAddReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMemberAddReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMemberAddReq message.
     * @function verify
     * @memberof XmsgImGroupMemberAddReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMemberAddReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.member != null && message.hasOwnProperty("member")) {
            if (!Array.isArray(message.member))
                return "member: array expected";
            for (var i = 0; i < message.member.length; ++i) {
                var error = $root.XmsgImGroupAddMember.verify(message.member[i]);
                if (error)
                    return "member." + error;
            }
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupMemberAddReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMemberAddReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMemberAddReq} XmsgImGroupMemberAddReq
     */
    XmsgImGroupMemberAddReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMemberAddReq)
            return object;
        var message = new $root.XmsgImGroupMemberAddReq();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.member) {
            if (!Array.isArray(object.member))
                throw TypeError(".XmsgImGroupMemberAddReq.member: array expected");
            message.member = [];
            for (var i = 0; i < object.member.length; ++i) {
                if (typeof object.member[i] !== "object")
                    throw TypeError(".XmsgImGroupMemberAddReq.member: object expected");
                message.member[i] = $root.XmsgImGroupAddMember.fromObject(object.member[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMemberAddReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMemberAddReq
     * @static
     * @param {XmsgImGroupMemberAddReq} message XmsgImGroupMemberAddReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMemberAddReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.member = [];
        if (options.defaults)
            object.cgt = "";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.member && message.member.length) {
            object.member = [];
            for (var j = 0; j < message.member.length; ++j)
                object.member[j] = $root.XmsgImGroupAddMember.toObject(message.member[j], options);
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupMemberAddReq to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMemberAddReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMemberAddReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMemberAddReq;
})();

$root.XmsgImGroupMemberAddRsp = (function() {

    /**
     * Properties of a XmsgImGroupMemberAddRsp.
     * @exports IXmsgImGroupMemberAddRsp
     * @interface IXmsgImGroupMemberAddRsp
     * @property {Object.<string,string>|null} [ext] XmsgImGroupMemberAddRsp ext
     */

    /**
     * Constructs a new XmsgImGroupMemberAddRsp.
     * @exports XmsgImGroupMemberAddRsp
     * @classdesc Represents a XmsgImGroupMemberAddRsp.
     * @implements IXmsgImGroupMemberAddRsp
     * @constructor
     * @param {IXmsgImGroupMemberAddRsp=} [properties] Properties to set
     */
    function XmsgImGroupMemberAddRsp(properties) {
        this.ext = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMemberAddRsp ext.
     * @member {Object.<string,string>} ext
     * @memberof XmsgImGroupMemberAddRsp
     * @instance
     */
    XmsgImGroupMemberAddRsp.prototype.ext = $util.emptyObject;

    /**
     * Creates a new XmsgImGroupMemberAddRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMemberAddRsp
     * @static
     * @param {IXmsgImGroupMemberAddRsp=} [properties] Properties to set
     * @returns {XmsgImGroupMemberAddRsp} XmsgImGroupMemberAddRsp instance
     */
    XmsgImGroupMemberAddRsp.create = function create(properties) {
        return new XmsgImGroupMemberAddRsp(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMemberAddRsp message. Does not implicitly {@link XmsgImGroupMemberAddRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMemberAddRsp
     * @static
     * @param {IXmsgImGroupMemberAddRsp} message XmsgImGroupMemberAddRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMemberAddRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ext != null && message.hasOwnProperty("ext"))
            for (var keys = Object.keys(message.ext), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.ext[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMemberAddRsp message, length delimited. Does not implicitly {@link XmsgImGroupMemberAddRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMemberAddRsp
     * @static
     * @param {IXmsgImGroupMemberAddRsp} message XmsgImGroupMemberAddRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMemberAddRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMemberAddRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMemberAddRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMemberAddRsp} XmsgImGroupMemberAddRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMemberAddRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMemberAddRsp(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                reader.skip().pos++;
                if (message.ext === $util.emptyObject)
                    message.ext = {};
                key = reader.string();
                reader.pos++;
                message.ext[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMemberAddRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMemberAddRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMemberAddRsp} XmsgImGroupMemberAddRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMemberAddRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMemberAddRsp message.
     * @function verify
     * @memberof XmsgImGroupMemberAddRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMemberAddRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ext != null && message.hasOwnProperty("ext")) {
            if (!$util.isObject(message.ext))
                return "ext: object expected";
            var key = Object.keys(message.ext);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.ext[key[i]]))
                    return "ext: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupMemberAddRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMemberAddRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMemberAddRsp} XmsgImGroupMemberAddRsp
     */
    XmsgImGroupMemberAddRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMemberAddRsp)
            return object;
        var message = new $root.XmsgImGroupMemberAddRsp();
        if (object.ext) {
            if (typeof object.ext !== "object")
                throw TypeError(".XmsgImGroupMemberAddRsp.ext: object expected");
            message.ext = {};
            for (var keys = Object.keys(object.ext), i = 0; i < keys.length; ++i)
                message.ext[keys[i]] = String(object.ext[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMemberAddRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMemberAddRsp
     * @static
     * @param {XmsgImGroupMemberAddRsp} message XmsgImGroupMemberAddRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMemberAddRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.ext = {};
        var keys2;
        if (message.ext && (keys2 = Object.keys(message.ext)).length) {
            object.ext = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ext[keys2[j]] = message.ext[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupMemberAddRsp to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMemberAddRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMemberAddRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMemberAddRsp;
})();

$root.XmsgImGroupMemberQueryReq = (function() {

    /**
     * Properties of a XmsgImGroupMemberQueryReq.
     * @exports IXmsgImGroupMemberQueryReq
     * @interface IXmsgImGroupMemberQueryReq
     * @property {string|null} [gcgt] XmsgImGroupMemberQueryReq gcgt
     * @property {Array.<string>|null} [mcgt] XmsgImGroupMemberQueryReq mcgt
     */

    /**
     * Constructs a new XmsgImGroupMemberQueryReq.
     * @exports XmsgImGroupMemberQueryReq
     * @classdesc Represents a XmsgImGroupMemberQueryReq.
     * @implements IXmsgImGroupMemberQueryReq
     * @constructor
     * @param {IXmsgImGroupMemberQueryReq=} [properties] Properties to set
     */
    function XmsgImGroupMemberQueryReq(properties) {
        this.mcgt = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMemberQueryReq gcgt.
     * @member {string} gcgt
     * @memberof XmsgImGroupMemberQueryReq
     * @instance
     */
    XmsgImGroupMemberQueryReq.prototype.gcgt = "";

    /**
     * XmsgImGroupMemberQueryReq mcgt.
     * @member {Array.<string>} mcgt
     * @memberof XmsgImGroupMemberQueryReq
     * @instance
     */
    XmsgImGroupMemberQueryReq.prototype.mcgt = $util.emptyArray;

    /**
     * Creates a new XmsgImGroupMemberQueryReq instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMemberQueryReq
     * @static
     * @param {IXmsgImGroupMemberQueryReq=} [properties] Properties to set
     * @returns {XmsgImGroupMemberQueryReq} XmsgImGroupMemberQueryReq instance
     */
    XmsgImGroupMemberQueryReq.create = function create(properties) {
        return new XmsgImGroupMemberQueryReq(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMemberQueryReq message. Does not implicitly {@link XmsgImGroupMemberQueryReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMemberQueryReq
     * @static
     * @param {IXmsgImGroupMemberQueryReq} message XmsgImGroupMemberQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMemberQueryReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.gcgt != null && message.hasOwnProperty("gcgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.gcgt);
        if (message.mcgt != null && message.mcgt.length)
            for (var i = 0; i < message.mcgt.length; ++i)
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.mcgt[i]);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMemberQueryReq message, length delimited. Does not implicitly {@link XmsgImGroupMemberQueryReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMemberQueryReq
     * @static
     * @param {IXmsgImGroupMemberQueryReq} message XmsgImGroupMemberQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMemberQueryReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMemberQueryReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMemberQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMemberQueryReq} XmsgImGroupMemberQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMemberQueryReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMemberQueryReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.gcgt = reader.string();
                break;
            case 2:
                if (!(message.mcgt && message.mcgt.length))
                    message.mcgt = [];
                message.mcgt.push(reader.string());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMemberQueryReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMemberQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMemberQueryReq} XmsgImGroupMemberQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMemberQueryReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMemberQueryReq message.
     * @function verify
     * @memberof XmsgImGroupMemberQueryReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMemberQueryReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.gcgt != null && message.hasOwnProperty("gcgt"))
            if (!$util.isString(message.gcgt))
                return "gcgt: string expected";
        if (message.mcgt != null && message.hasOwnProperty("mcgt")) {
            if (!Array.isArray(message.mcgt))
                return "mcgt: array expected";
            for (var i = 0; i < message.mcgt.length; ++i)
                if (!$util.isString(message.mcgt[i]))
                    return "mcgt: string[] expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupMemberQueryReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMemberQueryReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMemberQueryReq} XmsgImGroupMemberQueryReq
     */
    XmsgImGroupMemberQueryReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMemberQueryReq)
            return object;
        var message = new $root.XmsgImGroupMemberQueryReq();
        if (object.gcgt != null)
            message.gcgt = String(object.gcgt);
        if (object.mcgt) {
            if (!Array.isArray(object.mcgt))
                throw TypeError(".XmsgImGroupMemberQueryReq.mcgt: array expected");
            message.mcgt = [];
            for (var i = 0; i < object.mcgt.length; ++i)
                message.mcgt[i] = String(object.mcgt[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMemberQueryReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMemberQueryReq
     * @static
     * @param {XmsgImGroupMemberQueryReq} message XmsgImGroupMemberQueryReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMemberQueryReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.mcgt = [];
        if (options.defaults)
            object.gcgt = "";
        if (message.gcgt != null && message.hasOwnProperty("gcgt"))
            object.gcgt = message.gcgt;
        if (message.mcgt && message.mcgt.length) {
            object.mcgt = [];
            for (var j = 0; j < message.mcgt.length; ++j)
                object.mcgt[j] = message.mcgt[j];
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupMemberQueryReq to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMemberQueryReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMemberQueryReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMemberQueryReq;
})();

$root.XmsgImGroupMemberQueryRsp = (function() {

    /**
     * Properties of a XmsgImGroupMemberQueryRsp.
     * @exports IXmsgImGroupMemberQueryRsp
     * @interface IXmsgImGroupMemberQueryRsp
     * @property {Array.<IXmsgImGroupInfoMember>|null} [member] XmsgImGroupMemberQueryRsp member
     */

    /**
     * Constructs a new XmsgImGroupMemberQueryRsp.
     * @exports XmsgImGroupMemberQueryRsp
     * @classdesc Represents a XmsgImGroupMemberQueryRsp.
     * @implements IXmsgImGroupMemberQueryRsp
     * @constructor
     * @param {IXmsgImGroupMemberQueryRsp=} [properties] Properties to set
     */
    function XmsgImGroupMemberQueryRsp(properties) {
        this.member = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMemberQueryRsp member.
     * @member {Array.<IXmsgImGroupInfoMember>} member
     * @memberof XmsgImGroupMemberQueryRsp
     * @instance
     */
    XmsgImGroupMemberQueryRsp.prototype.member = $util.emptyArray;

    /**
     * Creates a new XmsgImGroupMemberQueryRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMemberQueryRsp
     * @static
     * @param {IXmsgImGroupMemberQueryRsp=} [properties] Properties to set
     * @returns {XmsgImGroupMemberQueryRsp} XmsgImGroupMemberQueryRsp instance
     */
    XmsgImGroupMemberQueryRsp.create = function create(properties) {
        return new XmsgImGroupMemberQueryRsp(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMemberQueryRsp message. Does not implicitly {@link XmsgImGroupMemberQueryRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMemberQueryRsp
     * @static
     * @param {IXmsgImGroupMemberQueryRsp} message XmsgImGroupMemberQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMemberQueryRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.member != null && message.member.length)
            for (var i = 0; i < message.member.length; ++i)
                $root.XmsgImGroupInfoMember.encode(message.member[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMemberQueryRsp message, length delimited. Does not implicitly {@link XmsgImGroupMemberQueryRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMemberQueryRsp
     * @static
     * @param {IXmsgImGroupMemberQueryRsp} message XmsgImGroupMemberQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMemberQueryRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMemberQueryRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMemberQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMemberQueryRsp} XmsgImGroupMemberQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMemberQueryRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMemberQueryRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.member && message.member.length))
                    message.member = [];
                message.member.push($root.XmsgImGroupInfoMember.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMemberQueryRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMemberQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMemberQueryRsp} XmsgImGroupMemberQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMemberQueryRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMemberQueryRsp message.
     * @function verify
     * @memberof XmsgImGroupMemberQueryRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMemberQueryRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.member != null && message.hasOwnProperty("member")) {
            if (!Array.isArray(message.member))
                return "member: array expected";
            for (var i = 0; i < message.member.length; ++i) {
                var error = $root.XmsgImGroupInfoMember.verify(message.member[i]);
                if (error)
                    return "member." + error;
            }
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupMemberQueryRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMemberQueryRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMemberQueryRsp} XmsgImGroupMemberQueryRsp
     */
    XmsgImGroupMemberQueryRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMemberQueryRsp)
            return object;
        var message = new $root.XmsgImGroupMemberQueryRsp();
        if (object.member) {
            if (!Array.isArray(object.member))
                throw TypeError(".XmsgImGroupMemberQueryRsp.member: array expected");
            message.member = [];
            for (var i = 0; i < object.member.length; ++i) {
                if (typeof object.member[i] !== "object")
                    throw TypeError(".XmsgImGroupMemberQueryRsp.member: object expected");
                message.member[i] = $root.XmsgImGroupInfoMember.fromObject(object.member[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMemberQueryRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMemberQueryRsp
     * @static
     * @param {XmsgImGroupMemberQueryRsp} message XmsgImGroupMemberQueryRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMemberQueryRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.member = [];
        if (message.member && message.member.length) {
            object.member = [];
            for (var j = 0; j < message.member.length; ++j)
                object.member[j] = $root.XmsgImGroupInfoMember.toObject(message.member[j], options);
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupMemberQueryRsp to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMemberQueryRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMemberQueryRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMemberQueryRsp;
})();

$root.XmsgImGroupMemberUpdateReq = (function() {

    /**
     * Properties of a XmsgImGroupMemberUpdateReq.
     * @exports IXmsgImGroupMemberUpdateReq
     * @interface IXmsgImGroupMemberUpdateReq
     * @property {string|null} [gcgt] XmsgImGroupMemberUpdateReq gcgt
     * @property {string|null} [mcgt] XmsgImGroupMemberUpdateReq mcgt
     * @property {Object.<string,string>|null} [upsert] XmsgImGroupMemberUpdateReq upsert
     * @property {Array.<string>|null} [remove] XmsgImGroupMemberUpdateReq remove
     */

    /**
     * Constructs a new XmsgImGroupMemberUpdateReq.
     * @exports XmsgImGroupMemberUpdateReq
     * @classdesc Represents a XmsgImGroupMemberUpdateReq.
     * @implements IXmsgImGroupMemberUpdateReq
     * @constructor
     * @param {IXmsgImGroupMemberUpdateReq=} [properties] Properties to set
     */
    function XmsgImGroupMemberUpdateReq(properties) {
        this.upsert = {};
        this.remove = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMemberUpdateReq gcgt.
     * @member {string} gcgt
     * @memberof XmsgImGroupMemberUpdateReq
     * @instance
     */
    XmsgImGroupMemberUpdateReq.prototype.gcgt = "";

    /**
     * XmsgImGroupMemberUpdateReq mcgt.
     * @member {string} mcgt
     * @memberof XmsgImGroupMemberUpdateReq
     * @instance
     */
    XmsgImGroupMemberUpdateReq.prototype.mcgt = "";

    /**
     * XmsgImGroupMemberUpdateReq upsert.
     * @member {Object.<string,string>} upsert
     * @memberof XmsgImGroupMemberUpdateReq
     * @instance
     */
    XmsgImGroupMemberUpdateReq.prototype.upsert = $util.emptyObject;

    /**
     * XmsgImGroupMemberUpdateReq remove.
     * @member {Array.<string>} remove
     * @memberof XmsgImGroupMemberUpdateReq
     * @instance
     */
    XmsgImGroupMemberUpdateReq.prototype.remove = $util.emptyArray;

    /**
     * Creates a new XmsgImGroupMemberUpdateReq instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMemberUpdateReq
     * @static
     * @param {IXmsgImGroupMemberUpdateReq=} [properties] Properties to set
     * @returns {XmsgImGroupMemberUpdateReq} XmsgImGroupMemberUpdateReq instance
     */
    XmsgImGroupMemberUpdateReq.create = function create(properties) {
        return new XmsgImGroupMemberUpdateReq(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMemberUpdateReq message. Does not implicitly {@link XmsgImGroupMemberUpdateReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMemberUpdateReq
     * @static
     * @param {IXmsgImGroupMemberUpdateReq} message XmsgImGroupMemberUpdateReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMemberUpdateReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.gcgt != null && message.hasOwnProperty("gcgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.gcgt);
        if (message.mcgt != null && message.hasOwnProperty("mcgt"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.mcgt);
        if (message.upsert != null && message.hasOwnProperty("upsert"))
            for (var keys = Object.keys(message.upsert), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.upsert[keys[i]]).ldelim();
        if (message.remove != null && message.remove.length)
            for (var i = 0; i < message.remove.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.remove[i]);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMemberUpdateReq message, length delimited. Does not implicitly {@link XmsgImGroupMemberUpdateReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMemberUpdateReq
     * @static
     * @param {IXmsgImGroupMemberUpdateReq} message XmsgImGroupMemberUpdateReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMemberUpdateReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMemberUpdateReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMemberUpdateReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMemberUpdateReq} XmsgImGroupMemberUpdateReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMemberUpdateReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMemberUpdateReq(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.gcgt = reader.string();
                break;
            case 2:
                message.mcgt = reader.string();
                break;
            case 3:
                reader.skip().pos++;
                if (message.upsert === $util.emptyObject)
                    message.upsert = {};
                key = reader.string();
                reader.pos++;
                message.upsert[key] = reader.string();
                break;
            case 4:
                if (!(message.remove && message.remove.length))
                    message.remove = [];
                message.remove.push(reader.string());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMemberUpdateReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMemberUpdateReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMemberUpdateReq} XmsgImGroupMemberUpdateReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMemberUpdateReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMemberUpdateReq message.
     * @function verify
     * @memberof XmsgImGroupMemberUpdateReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMemberUpdateReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.gcgt != null && message.hasOwnProperty("gcgt"))
            if (!$util.isString(message.gcgt))
                return "gcgt: string expected";
        if (message.mcgt != null && message.hasOwnProperty("mcgt"))
            if (!$util.isString(message.mcgt))
                return "mcgt: string expected";
        if (message.upsert != null && message.hasOwnProperty("upsert")) {
            if (!$util.isObject(message.upsert))
                return "upsert: object expected";
            var key = Object.keys(message.upsert);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.upsert[key[i]]))
                    return "upsert: string{k:string} expected";
        }
        if (message.remove != null && message.hasOwnProperty("remove")) {
            if (!Array.isArray(message.remove))
                return "remove: array expected";
            for (var i = 0; i < message.remove.length; ++i)
                if (!$util.isString(message.remove[i]))
                    return "remove: string[] expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupMemberUpdateReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMemberUpdateReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMemberUpdateReq} XmsgImGroupMemberUpdateReq
     */
    XmsgImGroupMemberUpdateReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMemberUpdateReq)
            return object;
        var message = new $root.XmsgImGroupMemberUpdateReq();
        if (object.gcgt != null)
            message.gcgt = String(object.gcgt);
        if (object.mcgt != null)
            message.mcgt = String(object.mcgt);
        if (object.upsert) {
            if (typeof object.upsert !== "object")
                throw TypeError(".XmsgImGroupMemberUpdateReq.upsert: object expected");
            message.upsert = {};
            for (var keys = Object.keys(object.upsert), i = 0; i < keys.length; ++i)
                message.upsert[keys[i]] = String(object.upsert[keys[i]]);
        }
        if (object.remove) {
            if (!Array.isArray(object.remove))
                throw TypeError(".XmsgImGroupMemberUpdateReq.remove: array expected");
            message.remove = [];
            for (var i = 0; i < object.remove.length; ++i)
                message.remove[i] = String(object.remove[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMemberUpdateReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMemberUpdateReq
     * @static
     * @param {XmsgImGroupMemberUpdateReq} message XmsgImGroupMemberUpdateReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMemberUpdateReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.remove = [];
        if (options.objects || options.defaults)
            object.upsert = {};
        if (options.defaults) {
            object.gcgt = "";
            object.mcgt = "";
        }
        if (message.gcgt != null && message.hasOwnProperty("gcgt"))
            object.gcgt = message.gcgt;
        if (message.mcgt != null && message.hasOwnProperty("mcgt"))
            object.mcgt = message.mcgt;
        var keys2;
        if (message.upsert && (keys2 = Object.keys(message.upsert)).length) {
            object.upsert = {};
            for (var j = 0; j < keys2.length; ++j)
                object.upsert[keys2[j]] = message.upsert[keys2[j]];
        }
        if (message.remove && message.remove.length) {
            object.remove = [];
            for (var j = 0; j < message.remove.length; ++j)
                object.remove[j] = message.remove[j];
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupMemberUpdateReq to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMemberUpdateReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMemberUpdateReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMemberUpdateReq;
})();

$root.XmsgImGroupMemberUpdateRsp = (function() {

    /**
     * Properties of a XmsgImGroupMemberUpdateRsp.
     * @exports IXmsgImGroupMemberUpdateRsp
     * @interface IXmsgImGroupMemberUpdateRsp
     * @property {Object.<string,string>|null} [ext] XmsgImGroupMemberUpdateRsp ext
     */

    /**
     * Constructs a new XmsgImGroupMemberUpdateRsp.
     * @exports XmsgImGroupMemberUpdateRsp
     * @classdesc Represents a XmsgImGroupMemberUpdateRsp.
     * @implements IXmsgImGroupMemberUpdateRsp
     * @constructor
     * @param {IXmsgImGroupMemberUpdateRsp=} [properties] Properties to set
     */
    function XmsgImGroupMemberUpdateRsp(properties) {
        this.ext = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMemberUpdateRsp ext.
     * @member {Object.<string,string>} ext
     * @memberof XmsgImGroupMemberUpdateRsp
     * @instance
     */
    XmsgImGroupMemberUpdateRsp.prototype.ext = $util.emptyObject;

    /**
     * Creates a new XmsgImGroupMemberUpdateRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMemberUpdateRsp
     * @static
     * @param {IXmsgImGroupMemberUpdateRsp=} [properties] Properties to set
     * @returns {XmsgImGroupMemberUpdateRsp} XmsgImGroupMemberUpdateRsp instance
     */
    XmsgImGroupMemberUpdateRsp.create = function create(properties) {
        return new XmsgImGroupMemberUpdateRsp(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMemberUpdateRsp message. Does not implicitly {@link XmsgImGroupMemberUpdateRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMemberUpdateRsp
     * @static
     * @param {IXmsgImGroupMemberUpdateRsp} message XmsgImGroupMemberUpdateRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMemberUpdateRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ext != null && message.hasOwnProperty("ext"))
            for (var keys = Object.keys(message.ext), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.ext[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMemberUpdateRsp message, length delimited. Does not implicitly {@link XmsgImGroupMemberUpdateRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMemberUpdateRsp
     * @static
     * @param {IXmsgImGroupMemberUpdateRsp} message XmsgImGroupMemberUpdateRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMemberUpdateRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMemberUpdateRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMemberUpdateRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMemberUpdateRsp} XmsgImGroupMemberUpdateRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMemberUpdateRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMemberUpdateRsp(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                reader.skip().pos++;
                if (message.ext === $util.emptyObject)
                    message.ext = {};
                key = reader.string();
                reader.pos++;
                message.ext[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMemberUpdateRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMemberUpdateRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMemberUpdateRsp} XmsgImGroupMemberUpdateRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMemberUpdateRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMemberUpdateRsp message.
     * @function verify
     * @memberof XmsgImGroupMemberUpdateRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMemberUpdateRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ext != null && message.hasOwnProperty("ext")) {
            if (!$util.isObject(message.ext))
                return "ext: object expected";
            var key = Object.keys(message.ext);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.ext[key[i]]))
                    return "ext: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupMemberUpdateRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMemberUpdateRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMemberUpdateRsp} XmsgImGroupMemberUpdateRsp
     */
    XmsgImGroupMemberUpdateRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMemberUpdateRsp)
            return object;
        var message = new $root.XmsgImGroupMemberUpdateRsp();
        if (object.ext) {
            if (typeof object.ext !== "object")
                throw TypeError(".XmsgImGroupMemberUpdateRsp.ext: object expected");
            message.ext = {};
            for (var keys = Object.keys(object.ext), i = 0; i < keys.length; ++i)
                message.ext[keys[i]] = String(object.ext[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMemberUpdateRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMemberUpdateRsp
     * @static
     * @param {XmsgImGroupMemberUpdateRsp} message XmsgImGroupMemberUpdateRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMemberUpdateRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.ext = {};
        var keys2;
        if (message.ext && (keys2 = Object.keys(message.ext)).length) {
            object.ext = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ext[keys2[j]] = message.ext[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupMemberUpdateRsp to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMemberUpdateRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMemberUpdateRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMemberUpdateRsp;
})();

$root.XmsgImGroupMemberDeleteReq = (function() {

    /**
     * Properties of a XmsgImGroupMemberDeleteReq.
     * @exports IXmsgImGroupMemberDeleteReq
     * @interface IXmsgImGroupMemberDeleteReq
     * @property {string|null} [gcgt] XmsgImGroupMemberDeleteReq gcgt
     * @property {Array.<string>|null} [mcgt] XmsgImGroupMemberDeleteReq mcgt
     */

    /**
     * Constructs a new XmsgImGroupMemberDeleteReq.
     * @exports XmsgImGroupMemberDeleteReq
     * @classdesc Represents a XmsgImGroupMemberDeleteReq.
     * @implements IXmsgImGroupMemberDeleteReq
     * @constructor
     * @param {IXmsgImGroupMemberDeleteReq=} [properties] Properties to set
     */
    function XmsgImGroupMemberDeleteReq(properties) {
        this.mcgt = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMemberDeleteReq gcgt.
     * @member {string} gcgt
     * @memberof XmsgImGroupMemberDeleteReq
     * @instance
     */
    XmsgImGroupMemberDeleteReq.prototype.gcgt = "";

    /**
     * XmsgImGroupMemberDeleteReq mcgt.
     * @member {Array.<string>} mcgt
     * @memberof XmsgImGroupMemberDeleteReq
     * @instance
     */
    XmsgImGroupMemberDeleteReq.prototype.mcgt = $util.emptyArray;

    /**
     * Creates a new XmsgImGroupMemberDeleteReq instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMemberDeleteReq
     * @static
     * @param {IXmsgImGroupMemberDeleteReq=} [properties] Properties to set
     * @returns {XmsgImGroupMemberDeleteReq} XmsgImGroupMemberDeleteReq instance
     */
    XmsgImGroupMemberDeleteReq.create = function create(properties) {
        return new XmsgImGroupMemberDeleteReq(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMemberDeleteReq message. Does not implicitly {@link XmsgImGroupMemberDeleteReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMemberDeleteReq
     * @static
     * @param {IXmsgImGroupMemberDeleteReq} message XmsgImGroupMemberDeleteReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMemberDeleteReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.gcgt != null && message.hasOwnProperty("gcgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.gcgt);
        if (message.mcgt != null && message.mcgt.length)
            for (var i = 0; i < message.mcgt.length; ++i)
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.mcgt[i]);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMemberDeleteReq message, length delimited. Does not implicitly {@link XmsgImGroupMemberDeleteReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMemberDeleteReq
     * @static
     * @param {IXmsgImGroupMemberDeleteReq} message XmsgImGroupMemberDeleteReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMemberDeleteReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMemberDeleteReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMemberDeleteReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMemberDeleteReq} XmsgImGroupMemberDeleteReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMemberDeleteReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMemberDeleteReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.gcgt = reader.string();
                break;
            case 2:
                if (!(message.mcgt && message.mcgt.length))
                    message.mcgt = [];
                message.mcgt.push(reader.string());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMemberDeleteReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMemberDeleteReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMemberDeleteReq} XmsgImGroupMemberDeleteReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMemberDeleteReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMemberDeleteReq message.
     * @function verify
     * @memberof XmsgImGroupMemberDeleteReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMemberDeleteReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.gcgt != null && message.hasOwnProperty("gcgt"))
            if (!$util.isString(message.gcgt))
                return "gcgt: string expected";
        if (message.mcgt != null && message.hasOwnProperty("mcgt")) {
            if (!Array.isArray(message.mcgt))
                return "mcgt: array expected";
            for (var i = 0; i < message.mcgt.length; ++i)
                if (!$util.isString(message.mcgt[i]))
                    return "mcgt: string[] expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupMemberDeleteReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMemberDeleteReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMemberDeleteReq} XmsgImGroupMemberDeleteReq
     */
    XmsgImGroupMemberDeleteReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMemberDeleteReq)
            return object;
        var message = new $root.XmsgImGroupMemberDeleteReq();
        if (object.gcgt != null)
            message.gcgt = String(object.gcgt);
        if (object.mcgt) {
            if (!Array.isArray(object.mcgt))
                throw TypeError(".XmsgImGroupMemberDeleteReq.mcgt: array expected");
            message.mcgt = [];
            for (var i = 0; i < object.mcgt.length; ++i)
                message.mcgt[i] = String(object.mcgt[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMemberDeleteReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMemberDeleteReq
     * @static
     * @param {XmsgImGroupMemberDeleteReq} message XmsgImGroupMemberDeleteReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMemberDeleteReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.mcgt = [];
        if (options.defaults)
            object.gcgt = "";
        if (message.gcgt != null && message.hasOwnProperty("gcgt"))
            object.gcgt = message.gcgt;
        if (message.mcgt && message.mcgt.length) {
            object.mcgt = [];
            for (var j = 0; j < message.mcgt.length; ++j)
                object.mcgt[j] = message.mcgt[j];
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupMemberDeleteReq to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMemberDeleteReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMemberDeleteReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMemberDeleteReq;
})();

$root.XmsgImGroupMemberDeleteRsp = (function() {

    /**
     * Properties of a XmsgImGroupMemberDeleteRsp.
     * @exports IXmsgImGroupMemberDeleteRsp
     * @interface IXmsgImGroupMemberDeleteRsp
     * @property {Object.<string,string>|null} [ext] XmsgImGroupMemberDeleteRsp ext
     */

    /**
     * Constructs a new XmsgImGroupMemberDeleteRsp.
     * @exports XmsgImGroupMemberDeleteRsp
     * @classdesc Represents a XmsgImGroupMemberDeleteRsp.
     * @implements IXmsgImGroupMemberDeleteRsp
     * @constructor
     * @param {IXmsgImGroupMemberDeleteRsp=} [properties] Properties to set
     */
    function XmsgImGroupMemberDeleteRsp(properties) {
        this.ext = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMemberDeleteRsp ext.
     * @member {Object.<string,string>} ext
     * @memberof XmsgImGroupMemberDeleteRsp
     * @instance
     */
    XmsgImGroupMemberDeleteRsp.prototype.ext = $util.emptyObject;

    /**
     * Creates a new XmsgImGroupMemberDeleteRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMemberDeleteRsp
     * @static
     * @param {IXmsgImGroupMemberDeleteRsp=} [properties] Properties to set
     * @returns {XmsgImGroupMemberDeleteRsp} XmsgImGroupMemberDeleteRsp instance
     */
    XmsgImGroupMemberDeleteRsp.create = function create(properties) {
        return new XmsgImGroupMemberDeleteRsp(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMemberDeleteRsp message. Does not implicitly {@link XmsgImGroupMemberDeleteRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMemberDeleteRsp
     * @static
     * @param {IXmsgImGroupMemberDeleteRsp} message XmsgImGroupMemberDeleteRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMemberDeleteRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ext != null && message.hasOwnProperty("ext"))
            for (var keys = Object.keys(message.ext), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.ext[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMemberDeleteRsp message, length delimited. Does not implicitly {@link XmsgImGroupMemberDeleteRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMemberDeleteRsp
     * @static
     * @param {IXmsgImGroupMemberDeleteRsp} message XmsgImGroupMemberDeleteRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMemberDeleteRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMemberDeleteRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMemberDeleteRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMemberDeleteRsp} XmsgImGroupMemberDeleteRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMemberDeleteRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMemberDeleteRsp(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                reader.skip().pos++;
                if (message.ext === $util.emptyObject)
                    message.ext = {};
                key = reader.string();
                reader.pos++;
                message.ext[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMemberDeleteRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMemberDeleteRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMemberDeleteRsp} XmsgImGroupMemberDeleteRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMemberDeleteRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMemberDeleteRsp message.
     * @function verify
     * @memberof XmsgImGroupMemberDeleteRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMemberDeleteRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ext != null && message.hasOwnProperty("ext")) {
            if (!$util.isObject(message.ext))
                return "ext: object expected";
            var key = Object.keys(message.ext);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.ext[key[i]]))
                    return "ext: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupMemberDeleteRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMemberDeleteRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMemberDeleteRsp} XmsgImGroupMemberDeleteRsp
     */
    XmsgImGroupMemberDeleteRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMemberDeleteRsp)
            return object;
        var message = new $root.XmsgImGroupMemberDeleteRsp();
        if (object.ext) {
            if (typeof object.ext !== "object")
                throw TypeError(".XmsgImGroupMemberDeleteRsp.ext: object expected");
            message.ext = {};
            for (var keys = Object.keys(object.ext), i = 0; i < keys.length; ++i)
                message.ext[keys[i]] = String(object.ext[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMemberDeleteRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMemberDeleteRsp
     * @static
     * @param {XmsgImGroupMemberDeleteRsp} message XmsgImGroupMemberDeleteRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMemberDeleteRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.ext = {};
        var keys2;
        if (message.ext && (keys2 = Object.keys(message.ext)).length) {
            object.ext = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ext[keys2[j]] = message.ext[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupMemberDeleteRsp to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMemberDeleteRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMemberDeleteRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMemberDeleteRsp;
})();

$root.XmsgImSdkEventAdapter = (function() {

    /**
     * Properties of a XmsgImSdkEventAdapter.
     * @exports IXmsgImSdkEventAdapter
     * @interface IXmsgImSdkEventAdapter
     * @property {number|null} [apiId] XmsgImSdkEventAdapter apiId
     * @property {XmsgImSdkEventType|null} [evnType] XmsgImSdkEventAdapter evnType
     * @property {XmsgImSdkEventAdapter.IXmsgImSdkEventNetNotice|null} [netNotice] XmsgImSdkEventAdapter netNotice
     * @property {XmsgImSdkEventAdapter.IXmsgImSdkEventNetReq|null} [netReq] XmsgImSdkEventAdapter netReq
     * @property {XmsgImSdkEventAdapter.IXmsgImSdkEventNetRsp|null} [netRsp] XmsgImSdkEventAdapter netRsp
     * @property {XmsgImSdkEventAdapter.IXmsgImSdkEventDbRsp|null} [dbRsp] XmsgImSdkEventAdapter dbRsp
     * @property {XmsgImSdkEventAdapter.IXmsgImSdkEventCxxLog|null} [cxxLog] XmsgImSdkEventAdapter cxxLog
     */

    /**
     * Constructs a new XmsgImSdkEventAdapter.
     * @exports XmsgImSdkEventAdapter
     * @classdesc Represents a XmsgImSdkEventAdapter.
     * @implements IXmsgImSdkEventAdapter
     * @constructor
     * @param {IXmsgImSdkEventAdapter=} [properties] Properties to set
     */
    function XmsgImSdkEventAdapter(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImSdkEventAdapter apiId.
     * @member {number} apiId
     * @memberof XmsgImSdkEventAdapter
     * @instance
     */
    XmsgImSdkEventAdapter.prototype.apiId = 0;

    /**
     * XmsgImSdkEventAdapter evnType.
     * @member {XmsgImSdkEventType} evnType
     * @memberof XmsgImSdkEventAdapter
     * @instance
     */
    XmsgImSdkEventAdapter.prototype.evnType = 0;

    /**
     * XmsgImSdkEventAdapter netNotice.
     * @member {XmsgImSdkEventAdapter.IXmsgImSdkEventNetNotice|null|undefined} netNotice
     * @memberof XmsgImSdkEventAdapter
     * @instance
     */
    XmsgImSdkEventAdapter.prototype.netNotice = null;

    /**
     * XmsgImSdkEventAdapter netReq.
     * @member {XmsgImSdkEventAdapter.IXmsgImSdkEventNetReq|null|undefined} netReq
     * @memberof XmsgImSdkEventAdapter
     * @instance
     */
    XmsgImSdkEventAdapter.prototype.netReq = null;

    /**
     * XmsgImSdkEventAdapter netRsp.
     * @member {XmsgImSdkEventAdapter.IXmsgImSdkEventNetRsp|null|undefined} netRsp
     * @memberof XmsgImSdkEventAdapter
     * @instance
     */
    XmsgImSdkEventAdapter.prototype.netRsp = null;

    /**
     * XmsgImSdkEventAdapter dbRsp.
     * @member {XmsgImSdkEventAdapter.IXmsgImSdkEventDbRsp|null|undefined} dbRsp
     * @memberof XmsgImSdkEventAdapter
     * @instance
     */
    XmsgImSdkEventAdapter.prototype.dbRsp = null;

    /**
     * XmsgImSdkEventAdapter cxxLog.
     * @member {XmsgImSdkEventAdapter.IXmsgImSdkEventCxxLog|null|undefined} cxxLog
     * @memberof XmsgImSdkEventAdapter
     * @instance
     */
    XmsgImSdkEventAdapter.prototype.cxxLog = null;

    /**
     * Creates a new XmsgImSdkEventAdapter instance using the specified properties.
     * @function create
     * @memberof XmsgImSdkEventAdapter
     * @static
     * @param {IXmsgImSdkEventAdapter=} [properties] Properties to set
     * @returns {XmsgImSdkEventAdapter} XmsgImSdkEventAdapter instance
     */
    XmsgImSdkEventAdapter.create = function create(properties) {
        return new XmsgImSdkEventAdapter(properties);
    };

    /**
     * Encodes the specified XmsgImSdkEventAdapter message. Does not implicitly {@link XmsgImSdkEventAdapter.verify|verify} messages.
     * @function encode
     * @memberof XmsgImSdkEventAdapter
     * @static
     * @param {IXmsgImSdkEventAdapter} message XmsgImSdkEventAdapter message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImSdkEventAdapter.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.apiId != null && message.hasOwnProperty("apiId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.apiId);
        if (message.evnType != null && message.hasOwnProperty("evnType"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.evnType);
        if (message.netNotice != null && message.hasOwnProperty("netNotice"))
            $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice.encode(message.netNotice, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.netReq != null && message.hasOwnProperty("netReq"))
            $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetReq.encode(message.netReq, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.netRsp != null && message.hasOwnProperty("netRsp"))
            $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp.encode(message.netRsp, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.dbRsp != null && message.hasOwnProperty("dbRsp"))
            $root.XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp.encode(message.dbRsp, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.cxxLog != null && message.hasOwnProperty("cxxLog"))
            $root.XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog.encode(message.cxxLog, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImSdkEventAdapter message, length delimited. Does not implicitly {@link XmsgImSdkEventAdapter.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImSdkEventAdapter
     * @static
     * @param {IXmsgImSdkEventAdapter} message XmsgImSdkEventAdapter message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImSdkEventAdapter.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImSdkEventAdapter message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImSdkEventAdapter
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImSdkEventAdapter} XmsgImSdkEventAdapter
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImSdkEventAdapter.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImSdkEventAdapter();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.apiId = reader.uint32();
                break;
            case 2:
                message.evnType = reader.int32();
                break;
            case 3:
                message.netNotice = $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice.decode(reader, reader.uint32());
                break;
            case 4:
                message.netReq = $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetReq.decode(reader, reader.uint32());
                break;
            case 5:
                message.netRsp = $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp.decode(reader, reader.uint32());
                break;
            case 6:
                message.dbRsp = $root.XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp.decode(reader, reader.uint32());
                break;
            case 7:
                message.cxxLog = $root.XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImSdkEventAdapter message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImSdkEventAdapter
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImSdkEventAdapter} XmsgImSdkEventAdapter
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImSdkEventAdapter.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImSdkEventAdapter message.
     * @function verify
     * @memberof XmsgImSdkEventAdapter
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImSdkEventAdapter.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.apiId != null && message.hasOwnProperty("apiId"))
            if (!$util.isInteger(message.apiId))
                return "apiId: integer expected";
        if (message.evnType != null && message.hasOwnProperty("evnType"))
            switch (message.evnType) {
            default:
                return "evnType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.netNotice != null && message.hasOwnProperty("netNotice")) {
            var error = $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice.verify(message.netNotice);
            if (error)
                return "netNotice." + error;
        }
        if (message.netReq != null && message.hasOwnProperty("netReq")) {
            var error = $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetReq.verify(message.netReq);
            if (error)
                return "netReq." + error;
        }
        if (message.netRsp != null && message.hasOwnProperty("netRsp")) {
            var error = $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp.verify(message.netRsp);
            if (error)
                return "netRsp." + error;
        }
        if (message.dbRsp != null && message.hasOwnProperty("dbRsp")) {
            var error = $root.XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp.verify(message.dbRsp);
            if (error)
                return "dbRsp." + error;
        }
        if (message.cxxLog != null && message.hasOwnProperty("cxxLog")) {
            var error = $root.XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog.verify(message.cxxLog);
            if (error)
                return "cxxLog." + error;
        }
        return null;
    };

    /**
     * Creates a XmsgImSdkEventAdapter message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImSdkEventAdapter
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImSdkEventAdapter} XmsgImSdkEventAdapter
     */
    XmsgImSdkEventAdapter.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImSdkEventAdapter)
            return object;
        var message = new $root.XmsgImSdkEventAdapter();
        if (object.apiId != null)
            message.apiId = object.apiId >>> 0;
        switch (object.evnType) {
        case "X_MSG_IM_SDK_EVENT_TYPE_NET_NOTICE":
        case 0:
            message.evnType = 0;
            break;
        case "X_MSG_IM_SDK_EVENT_TYPE_NET_REQ":
        case 1:
            message.evnType = 1;
            break;
        case "X_MSG_IM_SDK_EVENT_TYPE_NET_RSP":
        case 2:
            message.evnType = 2;
            break;
        case "X_MSG_IM_SDK_EVENT_TYPE_DB_RSP":
        case 3:
            message.evnType = 3;
            break;
        case "X_MSG_IM_SDK_EVENT_TYPE_CXX_LOG":
        case 4:
            message.evnType = 4;
            break;
        }
        if (object.netNotice != null) {
            if (typeof object.netNotice !== "object")
                throw TypeError(".XmsgImSdkEventAdapter.netNotice: object expected");
            message.netNotice = $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice.fromObject(object.netNotice);
        }
        if (object.netReq != null) {
            if (typeof object.netReq !== "object")
                throw TypeError(".XmsgImSdkEventAdapter.netReq: object expected");
            message.netReq = $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetReq.fromObject(object.netReq);
        }
        if (object.netRsp != null) {
            if (typeof object.netRsp !== "object")
                throw TypeError(".XmsgImSdkEventAdapter.netRsp: object expected");
            message.netRsp = $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp.fromObject(object.netRsp);
        }
        if (object.dbRsp != null) {
            if (typeof object.dbRsp !== "object")
                throw TypeError(".XmsgImSdkEventAdapter.dbRsp: object expected");
            message.dbRsp = $root.XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp.fromObject(object.dbRsp);
        }
        if (object.cxxLog != null) {
            if (typeof object.cxxLog !== "object")
                throw TypeError(".XmsgImSdkEventAdapter.cxxLog: object expected");
            message.cxxLog = $root.XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog.fromObject(object.cxxLog);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImSdkEventAdapter message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImSdkEventAdapter
     * @static
     * @param {XmsgImSdkEventAdapter} message XmsgImSdkEventAdapter
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImSdkEventAdapter.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.apiId = 0;
            object.evnType = options.enums === String ? "X_MSG_IM_SDK_EVENT_TYPE_NET_NOTICE" : 0;
            object.netNotice = null;
            object.netReq = null;
            object.netRsp = null;
            object.dbRsp = null;
            object.cxxLog = null;
        }
        if (message.apiId != null && message.hasOwnProperty("apiId"))
            object.apiId = message.apiId;
        if (message.evnType != null && message.hasOwnProperty("evnType"))
            object.evnType = options.enums === String ? $root.XmsgImSdkEventType[message.evnType] : message.evnType;
        if (message.netNotice != null && message.hasOwnProperty("netNotice"))
            object.netNotice = $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice.toObject(message.netNotice, options);
        if (message.netReq != null && message.hasOwnProperty("netReq"))
            object.netReq = $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetReq.toObject(message.netReq, options);
        if (message.netRsp != null && message.hasOwnProperty("netRsp"))
            object.netRsp = $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp.toObject(message.netRsp, options);
        if (message.dbRsp != null && message.hasOwnProperty("dbRsp"))
            object.dbRsp = $root.XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp.toObject(message.dbRsp, options);
        if (message.cxxLog != null && message.hasOwnProperty("cxxLog"))
            object.cxxLog = $root.XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog.toObject(message.cxxLog, options);
        return object;
    };

    /**
     * Converts this XmsgImSdkEventAdapter to JSON.
     * @function toJSON
     * @memberof XmsgImSdkEventAdapter
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImSdkEventAdapter.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice = (function() {

        /**
         * Properties of a XmsgImSdkEventNetNotice.
         * @memberof XmsgImSdkEventAdapter
         * @interface IXmsgImSdkEventNetNotice
         * @property {string|null} [msg] XmsgImSdkEventNetNotice msg
         * @property {Uint8Array|null} [dat] XmsgImSdkEventNetNotice dat
         */

        /**
         * Constructs a new XmsgImSdkEventNetNotice.
         * @memberof XmsgImSdkEventAdapter
         * @classdesc Represents a XmsgImSdkEventNetNotice.
         * @implements IXmsgImSdkEventNetNotice
         * @constructor
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventNetNotice=} [properties] Properties to set
         */
        function XmsgImSdkEventNetNotice(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * XmsgImSdkEventNetNotice msg.
         * @member {string} msg
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice
         * @instance
         */
        XmsgImSdkEventNetNotice.prototype.msg = "";

        /**
         * XmsgImSdkEventNetNotice dat.
         * @member {Uint8Array} dat
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice
         * @instance
         */
        XmsgImSdkEventNetNotice.prototype.dat = $util.newBuffer([]);

        /**
         * Creates a new XmsgImSdkEventNetNotice instance using the specified properties.
         * @function create
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice
         * @static
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventNetNotice=} [properties] Properties to set
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice} XmsgImSdkEventNetNotice instance
         */
        XmsgImSdkEventNetNotice.create = function create(properties) {
            return new XmsgImSdkEventNetNotice(properties);
        };

        /**
         * Encodes the specified XmsgImSdkEventNetNotice message. Does not implicitly {@link XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice.verify|verify} messages.
         * @function encode
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice
         * @static
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventNetNotice} message XmsgImSdkEventNetNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        XmsgImSdkEventNetNotice.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.msg != null && message.hasOwnProperty("msg"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.msg);
            if (message.dat != null && message.hasOwnProperty("dat"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.dat);
            return writer;
        };

        /**
         * Encodes the specified XmsgImSdkEventNetNotice message, length delimited. Does not implicitly {@link XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice.verify|verify} messages.
         * @function encodeDelimited
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice
         * @static
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventNetNotice} message XmsgImSdkEventNetNotice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        XmsgImSdkEventNetNotice.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a XmsgImSdkEventNetNotice message from the specified reader or buffer.
         * @function decode
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice} XmsgImSdkEventNetNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        XmsgImSdkEventNetNotice.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.msg = reader.string();
                    break;
                case 2:
                    message.dat = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a XmsgImSdkEventNetNotice message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice} XmsgImSdkEventNetNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        XmsgImSdkEventNetNotice.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a XmsgImSdkEventNetNotice message.
         * @function verify
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        XmsgImSdkEventNetNotice.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.msg != null && message.hasOwnProperty("msg"))
                if (!$util.isString(message.msg))
                    return "msg: string expected";
            if (message.dat != null && message.hasOwnProperty("dat"))
                if (!(message.dat && typeof message.dat.length === "number" || $util.isString(message.dat)))
                    return "dat: buffer expected";
            return null;
        };

        /**
         * Creates a XmsgImSdkEventNetNotice message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice} XmsgImSdkEventNetNotice
         */
        XmsgImSdkEventNetNotice.fromObject = function fromObject(object) {
            if (object instanceof $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice)
                return object;
            var message = new $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice();
            if (object.msg != null)
                message.msg = String(object.msg);
            if (object.dat != null)
                if (typeof object.dat === "string")
                    $util.base64.decode(object.dat, message.dat = $util.newBuffer($util.base64.length(object.dat)), 0);
                else if (object.dat.length)
                    message.dat = object.dat;
            return message;
        };

        /**
         * Creates a plain object from a XmsgImSdkEventNetNotice message. Also converts values to other types if specified.
         * @function toObject
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice
         * @static
         * @param {XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice} message XmsgImSdkEventNetNotice
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        XmsgImSdkEventNetNotice.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.msg = "";
                if (options.bytes === String)
                    object.dat = "";
                else {
                    object.dat = [];
                    if (options.bytes !== Array)
                        object.dat = $util.newBuffer(object.dat);
                }
            }
            if (message.msg != null && message.hasOwnProperty("msg"))
                object.msg = message.msg;
            if (message.dat != null && message.hasOwnProperty("dat"))
                object.dat = options.bytes === String ? $util.base64.encode(message.dat, 0, message.dat.length) : options.bytes === Array ? Array.prototype.slice.call(message.dat) : message.dat;
            return object;
        };

        /**
         * Converts this XmsgImSdkEventNetNotice to JSON.
         * @function toJSON
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetNotice
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        XmsgImSdkEventNetNotice.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return XmsgImSdkEventNetNotice;
    })();

    XmsgImSdkEventAdapter.XmsgImSdkEventNetReq = (function() {

        /**
         * Properties of a XmsgImSdkEventNetReq.
         * @memberof XmsgImSdkEventAdapter
         * @interface IXmsgImSdkEventNetReq
         * @property {number|null} [tid] XmsgImSdkEventNetReq tid
         * @property {string|null} [msg] XmsgImSdkEventNetReq msg
         * @property {Uint8Array|null} [dat] XmsgImSdkEventNetReq dat
         */

        /**
         * Constructs a new XmsgImSdkEventNetReq.
         * @memberof XmsgImSdkEventAdapter
         * @classdesc Represents a XmsgImSdkEventNetReq.
         * @implements IXmsgImSdkEventNetReq
         * @constructor
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventNetReq=} [properties] Properties to set
         */
        function XmsgImSdkEventNetReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * XmsgImSdkEventNetReq tid.
         * @member {number} tid
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetReq
         * @instance
         */
        XmsgImSdkEventNetReq.prototype.tid = 0;

        /**
         * XmsgImSdkEventNetReq msg.
         * @member {string} msg
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetReq
         * @instance
         */
        XmsgImSdkEventNetReq.prototype.msg = "";

        /**
         * XmsgImSdkEventNetReq dat.
         * @member {Uint8Array} dat
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetReq
         * @instance
         */
        XmsgImSdkEventNetReq.prototype.dat = $util.newBuffer([]);

        /**
         * Creates a new XmsgImSdkEventNetReq instance using the specified properties.
         * @function create
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetReq
         * @static
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventNetReq=} [properties] Properties to set
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventNetReq} XmsgImSdkEventNetReq instance
         */
        XmsgImSdkEventNetReq.create = function create(properties) {
            return new XmsgImSdkEventNetReq(properties);
        };

        /**
         * Encodes the specified XmsgImSdkEventNetReq message. Does not implicitly {@link XmsgImSdkEventAdapter.XmsgImSdkEventNetReq.verify|verify} messages.
         * @function encode
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetReq
         * @static
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventNetReq} message XmsgImSdkEventNetReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        XmsgImSdkEventNetReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tid != null && message.hasOwnProperty("tid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tid);
            if (message.msg != null && message.hasOwnProperty("msg"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.msg);
            if (message.dat != null && message.hasOwnProperty("dat"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.dat);
            return writer;
        };

        /**
         * Encodes the specified XmsgImSdkEventNetReq message, length delimited. Does not implicitly {@link XmsgImSdkEventAdapter.XmsgImSdkEventNetReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetReq
         * @static
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventNetReq} message XmsgImSdkEventNetReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        XmsgImSdkEventNetReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a XmsgImSdkEventNetReq message from the specified reader or buffer.
         * @function decode
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventNetReq} XmsgImSdkEventNetReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        XmsgImSdkEventNetReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tid = reader.uint32();
                    break;
                case 2:
                    message.msg = reader.string();
                    break;
                case 3:
                    message.dat = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a XmsgImSdkEventNetReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventNetReq} XmsgImSdkEventNetReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        XmsgImSdkEventNetReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a XmsgImSdkEventNetReq message.
         * @function verify
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        XmsgImSdkEventNetReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tid != null && message.hasOwnProperty("tid"))
                if (!$util.isInteger(message.tid))
                    return "tid: integer expected";
            if (message.msg != null && message.hasOwnProperty("msg"))
                if (!$util.isString(message.msg))
                    return "msg: string expected";
            if (message.dat != null && message.hasOwnProperty("dat"))
                if (!(message.dat && typeof message.dat.length === "number" || $util.isString(message.dat)))
                    return "dat: buffer expected";
            return null;
        };

        /**
         * Creates a XmsgImSdkEventNetReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventNetReq} XmsgImSdkEventNetReq
         */
        XmsgImSdkEventNetReq.fromObject = function fromObject(object) {
            if (object instanceof $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetReq)
                return object;
            var message = new $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetReq();
            if (object.tid != null)
                message.tid = object.tid >>> 0;
            if (object.msg != null)
                message.msg = String(object.msg);
            if (object.dat != null)
                if (typeof object.dat === "string")
                    $util.base64.decode(object.dat, message.dat = $util.newBuffer($util.base64.length(object.dat)), 0);
                else if (object.dat.length)
                    message.dat = object.dat;
            return message;
        };

        /**
         * Creates a plain object from a XmsgImSdkEventNetReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetReq
         * @static
         * @param {XmsgImSdkEventAdapter.XmsgImSdkEventNetReq} message XmsgImSdkEventNetReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        XmsgImSdkEventNetReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.tid = 0;
                object.msg = "";
                if (options.bytes === String)
                    object.dat = "";
                else {
                    object.dat = [];
                    if (options.bytes !== Array)
                        object.dat = $util.newBuffer(object.dat);
                }
            }
            if (message.tid != null && message.hasOwnProperty("tid"))
                object.tid = message.tid;
            if (message.msg != null && message.hasOwnProperty("msg"))
                object.msg = message.msg;
            if (message.dat != null && message.hasOwnProperty("dat"))
                object.dat = options.bytes === String ? $util.base64.encode(message.dat, 0, message.dat.length) : options.bytes === Array ? Array.prototype.slice.call(message.dat) : message.dat;
            return object;
        };

        /**
         * Converts this XmsgImSdkEventNetReq to JSON.
         * @function toJSON
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        XmsgImSdkEventNetReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return XmsgImSdkEventNetReq;
    })();

    XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp = (function() {

        /**
         * Properties of a XmsgImSdkEventNetRsp.
         * @memberof XmsgImSdkEventAdapter
         * @interface IXmsgImSdkEventNetRsp
         * @property {number|null} [tid] XmsgImSdkEventNetRsp tid
         * @property {number|null} [ret] XmsgImSdkEventNetRsp ret
         * @property {string|null} [desc] XmsgImSdkEventNetRsp desc
         * @property {string|null} [msg] XmsgImSdkEventNetRsp msg
         * @property {Uint8Array|null} [dat] XmsgImSdkEventNetRsp dat
         */

        /**
         * Constructs a new XmsgImSdkEventNetRsp.
         * @memberof XmsgImSdkEventAdapter
         * @classdesc Represents a XmsgImSdkEventNetRsp.
         * @implements IXmsgImSdkEventNetRsp
         * @constructor
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventNetRsp=} [properties] Properties to set
         */
        function XmsgImSdkEventNetRsp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * XmsgImSdkEventNetRsp tid.
         * @member {number} tid
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp
         * @instance
         */
        XmsgImSdkEventNetRsp.prototype.tid = 0;

        /**
         * XmsgImSdkEventNetRsp ret.
         * @member {number} ret
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp
         * @instance
         */
        XmsgImSdkEventNetRsp.prototype.ret = 0;

        /**
         * XmsgImSdkEventNetRsp desc.
         * @member {string} desc
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp
         * @instance
         */
        XmsgImSdkEventNetRsp.prototype.desc = "";

        /**
         * XmsgImSdkEventNetRsp msg.
         * @member {string} msg
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp
         * @instance
         */
        XmsgImSdkEventNetRsp.prototype.msg = "";

        /**
         * XmsgImSdkEventNetRsp dat.
         * @member {Uint8Array} dat
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp
         * @instance
         */
        XmsgImSdkEventNetRsp.prototype.dat = $util.newBuffer([]);

        /**
         * Creates a new XmsgImSdkEventNetRsp instance using the specified properties.
         * @function create
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp
         * @static
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventNetRsp=} [properties] Properties to set
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp} XmsgImSdkEventNetRsp instance
         */
        XmsgImSdkEventNetRsp.create = function create(properties) {
            return new XmsgImSdkEventNetRsp(properties);
        };

        /**
         * Encodes the specified XmsgImSdkEventNetRsp message. Does not implicitly {@link XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp.verify|verify} messages.
         * @function encode
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp
         * @static
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventNetRsp} message XmsgImSdkEventNetRsp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        XmsgImSdkEventNetRsp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tid != null && message.hasOwnProperty("tid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tid);
            if (message.ret != null && message.hasOwnProperty("ret"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ret);
            if (message.desc != null && message.hasOwnProperty("desc"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.desc);
            if (message.msg != null && message.hasOwnProperty("msg"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.msg);
            if (message.dat != null && message.hasOwnProperty("dat"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.dat);
            return writer;
        };

        /**
         * Encodes the specified XmsgImSdkEventNetRsp message, length delimited. Does not implicitly {@link XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp
         * @static
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventNetRsp} message XmsgImSdkEventNetRsp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        XmsgImSdkEventNetRsp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a XmsgImSdkEventNetRsp message from the specified reader or buffer.
         * @function decode
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp} XmsgImSdkEventNetRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        XmsgImSdkEventNetRsp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tid = reader.uint32();
                    break;
                case 2:
                    message.ret = reader.uint32();
                    break;
                case 3:
                    message.desc = reader.string();
                    break;
                case 4:
                    message.msg = reader.string();
                    break;
                case 5:
                    message.dat = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a XmsgImSdkEventNetRsp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp} XmsgImSdkEventNetRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        XmsgImSdkEventNetRsp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a XmsgImSdkEventNetRsp message.
         * @function verify
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        XmsgImSdkEventNetRsp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tid != null && message.hasOwnProperty("tid"))
                if (!$util.isInteger(message.tid))
                    return "tid: integer expected";
            if (message.ret != null && message.hasOwnProperty("ret"))
                if (!$util.isInteger(message.ret))
                    return "ret: integer expected";
            if (message.desc != null && message.hasOwnProperty("desc"))
                if (!$util.isString(message.desc))
                    return "desc: string expected";
            if (message.msg != null && message.hasOwnProperty("msg"))
                if (!$util.isString(message.msg))
                    return "msg: string expected";
            if (message.dat != null && message.hasOwnProperty("dat"))
                if (!(message.dat && typeof message.dat.length === "number" || $util.isString(message.dat)))
                    return "dat: buffer expected";
            return null;
        };

        /**
         * Creates a XmsgImSdkEventNetRsp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp} XmsgImSdkEventNetRsp
         */
        XmsgImSdkEventNetRsp.fromObject = function fromObject(object) {
            if (object instanceof $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp)
                return object;
            var message = new $root.XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp();
            if (object.tid != null)
                message.tid = object.tid >>> 0;
            if (object.ret != null)
                message.ret = object.ret >>> 0;
            if (object.desc != null)
                message.desc = String(object.desc);
            if (object.msg != null)
                message.msg = String(object.msg);
            if (object.dat != null)
                if (typeof object.dat === "string")
                    $util.base64.decode(object.dat, message.dat = $util.newBuffer($util.base64.length(object.dat)), 0);
                else if (object.dat.length)
                    message.dat = object.dat;
            return message;
        };

        /**
         * Creates a plain object from a XmsgImSdkEventNetRsp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp
         * @static
         * @param {XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp} message XmsgImSdkEventNetRsp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        XmsgImSdkEventNetRsp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.tid = 0;
                object.ret = 0;
                object.desc = "";
                object.msg = "";
                if (options.bytes === String)
                    object.dat = "";
                else {
                    object.dat = [];
                    if (options.bytes !== Array)
                        object.dat = $util.newBuffer(object.dat);
                }
            }
            if (message.tid != null && message.hasOwnProperty("tid"))
                object.tid = message.tid;
            if (message.ret != null && message.hasOwnProperty("ret"))
                object.ret = message.ret;
            if (message.desc != null && message.hasOwnProperty("desc"))
                object.desc = message.desc;
            if (message.msg != null && message.hasOwnProperty("msg"))
                object.msg = message.msg;
            if (message.dat != null && message.hasOwnProperty("dat"))
                object.dat = options.bytes === String ? $util.base64.encode(message.dat, 0, message.dat.length) : options.bytes === Array ? Array.prototype.slice.call(message.dat) : message.dat;
            return object;
        };

        /**
         * Converts this XmsgImSdkEventNetRsp to JSON.
         * @function toJSON
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventNetRsp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        XmsgImSdkEventNetRsp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return XmsgImSdkEventNetRsp;
    })();

    XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp = (function() {

        /**
         * Properties of a XmsgImSdkEventDbRsp.
         * @memberof XmsgImSdkEventAdapter
         * @interface IXmsgImSdkEventDbRsp
         * @property {number|null} [tid] XmsgImSdkEventDbRsp tid
         * @property {number|null} [ret] XmsgImSdkEventDbRsp ret
         * @property {string|null} [desc] XmsgImSdkEventDbRsp desc
         * @property {IXmsgImClientDbCrudRsp|null} [dat] XmsgImSdkEventDbRsp dat
         */

        /**
         * Constructs a new XmsgImSdkEventDbRsp.
         * @memberof XmsgImSdkEventAdapter
         * @classdesc Represents a XmsgImSdkEventDbRsp.
         * @implements IXmsgImSdkEventDbRsp
         * @constructor
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventDbRsp=} [properties] Properties to set
         */
        function XmsgImSdkEventDbRsp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * XmsgImSdkEventDbRsp tid.
         * @member {number} tid
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp
         * @instance
         */
        XmsgImSdkEventDbRsp.prototype.tid = 0;

        /**
         * XmsgImSdkEventDbRsp ret.
         * @member {number} ret
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp
         * @instance
         */
        XmsgImSdkEventDbRsp.prototype.ret = 0;

        /**
         * XmsgImSdkEventDbRsp desc.
         * @member {string} desc
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp
         * @instance
         */
        XmsgImSdkEventDbRsp.prototype.desc = "";

        /**
         * XmsgImSdkEventDbRsp dat.
         * @member {IXmsgImClientDbCrudRsp|null|undefined} dat
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp
         * @instance
         */
        XmsgImSdkEventDbRsp.prototype.dat = null;

        /**
         * Creates a new XmsgImSdkEventDbRsp instance using the specified properties.
         * @function create
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp
         * @static
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventDbRsp=} [properties] Properties to set
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp} XmsgImSdkEventDbRsp instance
         */
        XmsgImSdkEventDbRsp.create = function create(properties) {
            return new XmsgImSdkEventDbRsp(properties);
        };

        /**
         * Encodes the specified XmsgImSdkEventDbRsp message. Does not implicitly {@link XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp.verify|verify} messages.
         * @function encode
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp
         * @static
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventDbRsp} message XmsgImSdkEventDbRsp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        XmsgImSdkEventDbRsp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tid != null && message.hasOwnProperty("tid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tid);
            if (message.ret != null && message.hasOwnProperty("ret"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ret);
            if (message.desc != null && message.hasOwnProperty("desc"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.desc);
            if (message.dat != null && message.hasOwnProperty("dat"))
                $root.XmsgImClientDbCrudRsp.encode(message.dat, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified XmsgImSdkEventDbRsp message, length delimited. Does not implicitly {@link XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp
         * @static
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventDbRsp} message XmsgImSdkEventDbRsp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        XmsgImSdkEventDbRsp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a XmsgImSdkEventDbRsp message from the specified reader or buffer.
         * @function decode
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp} XmsgImSdkEventDbRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        XmsgImSdkEventDbRsp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tid = reader.uint32();
                    break;
                case 2:
                    message.ret = reader.uint32();
                    break;
                case 3:
                    message.desc = reader.string();
                    break;
                case 5:
                    message.dat = $root.XmsgImClientDbCrudRsp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a XmsgImSdkEventDbRsp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp} XmsgImSdkEventDbRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        XmsgImSdkEventDbRsp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a XmsgImSdkEventDbRsp message.
         * @function verify
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        XmsgImSdkEventDbRsp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tid != null && message.hasOwnProperty("tid"))
                if (!$util.isInteger(message.tid))
                    return "tid: integer expected";
            if (message.ret != null && message.hasOwnProperty("ret"))
                if (!$util.isInteger(message.ret))
                    return "ret: integer expected";
            if (message.desc != null && message.hasOwnProperty("desc"))
                if (!$util.isString(message.desc))
                    return "desc: string expected";
            if (message.dat != null && message.hasOwnProperty("dat")) {
                var error = $root.XmsgImClientDbCrudRsp.verify(message.dat);
                if (error)
                    return "dat." + error;
            }
            return null;
        };

        /**
         * Creates a XmsgImSdkEventDbRsp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp} XmsgImSdkEventDbRsp
         */
        XmsgImSdkEventDbRsp.fromObject = function fromObject(object) {
            if (object instanceof $root.XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp)
                return object;
            var message = new $root.XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp();
            if (object.tid != null)
                message.tid = object.tid >>> 0;
            if (object.ret != null)
                message.ret = object.ret >>> 0;
            if (object.desc != null)
                message.desc = String(object.desc);
            if (object.dat != null) {
                if (typeof object.dat !== "object")
                    throw TypeError(".XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp.dat: object expected");
                message.dat = $root.XmsgImClientDbCrudRsp.fromObject(object.dat);
            }
            return message;
        };

        /**
         * Creates a plain object from a XmsgImSdkEventDbRsp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp
         * @static
         * @param {XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp} message XmsgImSdkEventDbRsp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        XmsgImSdkEventDbRsp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.tid = 0;
                object.ret = 0;
                object.desc = "";
                object.dat = null;
            }
            if (message.tid != null && message.hasOwnProperty("tid"))
                object.tid = message.tid;
            if (message.ret != null && message.hasOwnProperty("ret"))
                object.ret = message.ret;
            if (message.desc != null && message.hasOwnProperty("desc"))
                object.desc = message.desc;
            if (message.dat != null && message.hasOwnProperty("dat"))
                object.dat = $root.XmsgImClientDbCrudRsp.toObject(message.dat, options);
            return object;
        };

        /**
         * Converts this XmsgImSdkEventDbRsp to JSON.
         * @function toJSON
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventDbRsp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        XmsgImSdkEventDbRsp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return XmsgImSdkEventDbRsp;
    })();

    XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog = (function() {

        /**
         * Properties of a XmsgImSdkEventCxxLog.
         * @memberof XmsgImSdkEventAdapter
         * @interface IXmsgImSdkEventCxxLog
         * @property {number|null} [lev] XmsgImSdkEventCxxLog lev
         * @property {string|null} [log] XmsgImSdkEventCxxLog log
         */

        /**
         * Constructs a new XmsgImSdkEventCxxLog.
         * @memberof XmsgImSdkEventAdapter
         * @classdesc Represents a XmsgImSdkEventCxxLog.
         * @implements IXmsgImSdkEventCxxLog
         * @constructor
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventCxxLog=} [properties] Properties to set
         */
        function XmsgImSdkEventCxxLog(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * XmsgImSdkEventCxxLog lev.
         * @member {number} lev
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog
         * @instance
         */
        XmsgImSdkEventCxxLog.prototype.lev = 0;

        /**
         * XmsgImSdkEventCxxLog log.
         * @member {string} log
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog
         * @instance
         */
        XmsgImSdkEventCxxLog.prototype.log = "";

        /**
         * Creates a new XmsgImSdkEventCxxLog instance using the specified properties.
         * @function create
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog
         * @static
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventCxxLog=} [properties] Properties to set
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog} XmsgImSdkEventCxxLog instance
         */
        XmsgImSdkEventCxxLog.create = function create(properties) {
            return new XmsgImSdkEventCxxLog(properties);
        };

        /**
         * Encodes the specified XmsgImSdkEventCxxLog message. Does not implicitly {@link XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog.verify|verify} messages.
         * @function encode
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog
         * @static
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventCxxLog} message XmsgImSdkEventCxxLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        XmsgImSdkEventCxxLog.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.lev != null && message.hasOwnProperty("lev"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.lev);
            if (message.log != null && message.hasOwnProperty("log"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.log);
            return writer;
        };

        /**
         * Encodes the specified XmsgImSdkEventCxxLog message, length delimited. Does not implicitly {@link XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog.verify|verify} messages.
         * @function encodeDelimited
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog
         * @static
         * @param {XmsgImSdkEventAdapter.IXmsgImSdkEventCxxLog} message XmsgImSdkEventCxxLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        XmsgImSdkEventCxxLog.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a XmsgImSdkEventCxxLog message from the specified reader or buffer.
         * @function decode
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog} XmsgImSdkEventCxxLog
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        XmsgImSdkEventCxxLog.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.lev = reader.uint32();
                    break;
                case 2:
                    message.log = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a XmsgImSdkEventCxxLog message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog} XmsgImSdkEventCxxLog
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        XmsgImSdkEventCxxLog.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a XmsgImSdkEventCxxLog message.
         * @function verify
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        XmsgImSdkEventCxxLog.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.lev != null && message.hasOwnProperty("lev"))
                if (!$util.isInteger(message.lev))
                    return "lev: integer expected";
            if (message.log != null && message.hasOwnProperty("log"))
                if (!$util.isString(message.log))
                    return "log: string expected";
            return null;
        };

        /**
         * Creates a XmsgImSdkEventCxxLog message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog} XmsgImSdkEventCxxLog
         */
        XmsgImSdkEventCxxLog.fromObject = function fromObject(object) {
            if (object instanceof $root.XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog)
                return object;
            var message = new $root.XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog();
            if (object.lev != null)
                message.lev = object.lev >>> 0;
            if (object.log != null)
                message.log = String(object.log);
            return message;
        };

        /**
         * Creates a plain object from a XmsgImSdkEventCxxLog message. Also converts values to other types if specified.
         * @function toObject
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog
         * @static
         * @param {XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog} message XmsgImSdkEventCxxLog
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        XmsgImSdkEventCxxLog.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.lev = 0;
                object.log = "";
            }
            if (message.lev != null && message.hasOwnProperty("lev"))
                object.lev = message.lev;
            if (message.log != null && message.hasOwnProperty("log"))
                object.log = message.log;
            return object;
        };

        /**
         * Converts this XmsgImSdkEventCxxLog to JSON.
         * @function toJSON
         * @memberof XmsgImSdkEventAdapter.XmsgImSdkEventCxxLog
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        XmsgImSdkEventCxxLog.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return XmsgImSdkEventCxxLog;
    })();

    return XmsgImSdkEventAdapter;
})();

$root.XmsgImSdkEventXmsgImAuth = (function() {

    /**
     * Properties of a XmsgImSdkEventXmsgImAuth.
     * @exports IXmsgImSdkEventXmsgImAuth
     * @interface IXmsgImSdkEventXmsgImAuth
     * @property {string|null} [evn] XmsgImSdkEventXmsgImAuth evn
     * @property {number|null} [times] XmsgImSdkEventXmsgImAuth times
     * @property {string|null} [addr] XmsgImSdkEventXmsgImAuth addr
     */

    /**
     * Constructs a new XmsgImSdkEventXmsgImAuth.
     * @exports XmsgImSdkEventXmsgImAuth
     * @classdesc Represents a XmsgImSdkEventXmsgImAuth.
     * @implements IXmsgImSdkEventXmsgImAuth
     * @constructor
     * @param {IXmsgImSdkEventXmsgImAuth=} [properties] Properties to set
     */
    function XmsgImSdkEventXmsgImAuth(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImSdkEventXmsgImAuth evn.
     * @member {string} evn
     * @memberof XmsgImSdkEventXmsgImAuth
     * @instance
     */
    XmsgImSdkEventXmsgImAuth.prototype.evn = "";

    /**
     * XmsgImSdkEventXmsgImAuth times.
     * @member {number} times
     * @memberof XmsgImSdkEventXmsgImAuth
     * @instance
     */
    XmsgImSdkEventXmsgImAuth.prototype.times = 0;

    /**
     * XmsgImSdkEventXmsgImAuth addr.
     * @member {string} addr
     * @memberof XmsgImSdkEventXmsgImAuth
     * @instance
     */
    XmsgImSdkEventXmsgImAuth.prototype.addr = "";

    /**
     * Creates a new XmsgImSdkEventXmsgImAuth instance using the specified properties.
     * @function create
     * @memberof XmsgImSdkEventXmsgImAuth
     * @static
     * @param {IXmsgImSdkEventXmsgImAuth=} [properties] Properties to set
     * @returns {XmsgImSdkEventXmsgImAuth} XmsgImSdkEventXmsgImAuth instance
     */
    XmsgImSdkEventXmsgImAuth.create = function create(properties) {
        return new XmsgImSdkEventXmsgImAuth(properties);
    };

    /**
     * Encodes the specified XmsgImSdkEventXmsgImAuth message. Does not implicitly {@link XmsgImSdkEventXmsgImAuth.verify|verify} messages.
     * @function encode
     * @memberof XmsgImSdkEventXmsgImAuth
     * @static
     * @param {IXmsgImSdkEventXmsgImAuth} message XmsgImSdkEventXmsgImAuth message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImSdkEventXmsgImAuth.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.evn != null && message.hasOwnProperty("evn"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.evn);
        if (message.times != null && message.hasOwnProperty("times"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.times);
        if (message.addr != null && message.hasOwnProperty("addr"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.addr);
        return writer;
    };

    /**
     * Encodes the specified XmsgImSdkEventXmsgImAuth message, length delimited. Does not implicitly {@link XmsgImSdkEventXmsgImAuth.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImSdkEventXmsgImAuth
     * @static
     * @param {IXmsgImSdkEventXmsgImAuth} message XmsgImSdkEventXmsgImAuth message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImSdkEventXmsgImAuth.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImSdkEventXmsgImAuth message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImSdkEventXmsgImAuth
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImSdkEventXmsgImAuth} XmsgImSdkEventXmsgImAuth
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImSdkEventXmsgImAuth.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImSdkEventXmsgImAuth();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.evn = reader.string();
                break;
            case 2:
                message.times = reader.uint32();
                break;
            case 3:
                message.addr = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImSdkEventXmsgImAuth message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImSdkEventXmsgImAuth
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImSdkEventXmsgImAuth} XmsgImSdkEventXmsgImAuth
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImSdkEventXmsgImAuth.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImSdkEventXmsgImAuth message.
     * @function verify
     * @memberof XmsgImSdkEventXmsgImAuth
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImSdkEventXmsgImAuth.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.evn != null && message.hasOwnProperty("evn"))
            if (!$util.isString(message.evn))
                return "evn: string expected";
        if (message.times != null && message.hasOwnProperty("times"))
            if (!$util.isInteger(message.times))
                return "times: integer expected";
        if (message.addr != null && message.hasOwnProperty("addr"))
            if (!$util.isString(message.addr))
                return "addr: string expected";
        return null;
    };

    /**
     * Creates a XmsgImSdkEventXmsgImAuth message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImSdkEventXmsgImAuth
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImSdkEventXmsgImAuth} XmsgImSdkEventXmsgImAuth
     */
    XmsgImSdkEventXmsgImAuth.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImSdkEventXmsgImAuth)
            return object;
        var message = new $root.XmsgImSdkEventXmsgImAuth();
        if (object.evn != null)
            message.evn = String(object.evn);
        if (object.times != null)
            message.times = object.times >>> 0;
        if (object.addr != null)
            message.addr = String(object.addr);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImSdkEventXmsgImAuth message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImSdkEventXmsgImAuth
     * @static
     * @param {XmsgImSdkEventXmsgImAuth} message XmsgImSdkEventXmsgImAuth
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImSdkEventXmsgImAuth.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.evn = "";
            object.times = 0;
            object.addr = "";
        }
        if (message.evn != null && message.hasOwnProperty("evn"))
            object.evn = message.evn;
        if (message.times != null && message.hasOwnProperty("times"))
            object.times = message.times;
        if (message.addr != null && message.hasOwnProperty("addr"))
            object.addr = message.addr;
        return object;
    };

    /**
     * Converts this XmsgImSdkEventXmsgImAuth to JSON.
     * @function toJSON
     * @memberof XmsgImSdkEventXmsgImAuth
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImSdkEventXmsgImAuth.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImSdkEventXmsgImAuth;
})();

$root.XmsgImSdkEventXmsgAp = (function() {

    /**
     * Properties of a XmsgImSdkEventXmsgAp.
     * @exports IXmsgImSdkEventXmsgAp
     * @interface IXmsgImSdkEventXmsgAp
     * @property {string|null} [evn] XmsgImSdkEventXmsgAp evn
     * @property {number|null} [times] XmsgImSdkEventXmsgAp times
     * @property {string|null} [addr] XmsgImSdkEventXmsgAp addr
     */

    /**
     * Constructs a new XmsgImSdkEventXmsgAp.
     * @exports XmsgImSdkEventXmsgAp
     * @classdesc Represents a XmsgImSdkEventXmsgAp.
     * @implements IXmsgImSdkEventXmsgAp
     * @constructor
     * @param {IXmsgImSdkEventXmsgAp=} [properties] Properties to set
     */
    function XmsgImSdkEventXmsgAp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImSdkEventXmsgAp evn.
     * @member {string} evn
     * @memberof XmsgImSdkEventXmsgAp
     * @instance
     */
    XmsgImSdkEventXmsgAp.prototype.evn = "";

    /**
     * XmsgImSdkEventXmsgAp times.
     * @member {number} times
     * @memberof XmsgImSdkEventXmsgAp
     * @instance
     */
    XmsgImSdkEventXmsgAp.prototype.times = 0;

    /**
     * XmsgImSdkEventXmsgAp addr.
     * @member {string} addr
     * @memberof XmsgImSdkEventXmsgAp
     * @instance
     */
    XmsgImSdkEventXmsgAp.prototype.addr = "";

    /**
     * Creates a new XmsgImSdkEventXmsgAp instance using the specified properties.
     * @function create
     * @memberof XmsgImSdkEventXmsgAp
     * @static
     * @param {IXmsgImSdkEventXmsgAp=} [properties] Properties to set
     * @returns {XmsgImSdkEventXmsgAp} XmsgImSdkEventXmsgAp instance
     */
    XmsgImSdkEventXmsgAp.create = function create(properties) {
        return new XmsgImSdkEventXmsgAp(properties);
    };

    /**
     * Encodes the specified XmsgImSdkEventXmsgAp message. Does not implicitly {@link XmsgImSdkEventXmsgAp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImSdkEventXmsgAp
     * @static
     * @param {IXmsgImSdkEventXmsgAp} message XmsgImSdkEventXmsgAp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImSdkEventXmsgAp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.evn != null && message.hasOwnProperty("evn"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.evn);
        if (message.times != null && message.hasOwnProperty("times"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.times);
        if (message.addr != null && message.hasOwnProperty("addr"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.addr);
        return writer;
    };

    /**
     * Encodes the specified XmsgImSdkEventXmsgAp message, length delimited. Does not implicitly {@link XmsgImSdkEventXmsgAp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImSdkEventXmsgAp
     * @static
     * @param {IXmsgImSdkEventXmsgAp} message XmsgImSdkEventXmsgAp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImSdkEventXmsgAp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImSdkEventXmsgAp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImSdkEventXmsgAp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImSdkEventXmsgAp} XmsgImSdkEventXmsgAp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImSdkEventXmsgAp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImSdkEventXmsgAp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.evn = reader.string();
                break;
            case 2:
                message.times = reader.uint32();
                break;
            case 3:
                message.addr = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImSdkEventXmsgAp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImSdkEventXmsgAp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImSdkEventXmsgAp} XmsgImSdkEventXmsgAp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImSdkEventXmsgAp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImSdkEventXmsgAp message.
     * @function verify
     * @memberof XmsgImSdkEventXmsgAp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImSdkEventXmsgAp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.evn != null && message.hasOwnProperty("evn"))
            if (!$util.isString(message.evn))
                return "evn: string expected";
        if (message.times != null && message.hasOwnProperty("times"))
            if (!$util.isInteger(message.times))
                return "times: integer expected";
        if (message.addr != null && message.hasOwnProperty("addr"))
            if (!$util.isString(message.addr))
                return "addr: string expected";
        return null;
    };

    /**
     * Creates a XmsgImSdkEventXmsgAp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImSdkEventXmsgAp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImSdkEventXmsgAp} XmsgImSdkEventXmsgAp
     */
    XmsgImSdkEventXmsgAp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImSdkEventXmsgAp)
            return object;
        var message = new $root.XmsgImSdkEventXmsgAp();
        if (object.evn != null)
            message.evn = String(object.evn);
        if (object.times != null)
            message.times = object.times >>> 0;
        if (object.addr != null)
            message.addr = String(object.addr);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImSdkEventXmsgAp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImSdkEventXmsgAp
     * @static
     * @param {XmsgImSdkEventXmsgAp} message XmsgImSdkEventXmsgAp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImSdkEventXmsgAp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.evn = "";
            object.times = 0;
            object.addr = "";
        }
        if (message.evn != null && message.hasOwnProperty("evn"))
            object.evn = message.evn;
        if (message.times != null && message.hasOwnProperty("times"))
            object.times = message.times;
        if (message.addr != null && message.hasOwnProperty("addr"))
            object.addr = message.addr;
        return object;
    };

    /**
     * Converts this XmsgImSdkEventXmsgAp to JSON.
     * @function toJSON
     * @memberof XmsgImSdkEventXmsgAp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImSdkEventXmsgAp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImSdkEventXmsgAp;
})();

/**
 * XmsgImSdkEventType enum.
 * @exports XmsgImSdkEventType
 * @enum {string}
 * @property {number} X_MSG_IM_SDK_EVENT_TYPE_NET_NOTICE=0 X_MSG_IM_SDK_EVENT_TYPE_NET_NOTICE value
 * @property {number} X_MSG_IM_SDK_EVENT_TYPE_NET_REQ=1 X_MSG_IM_SDK_EVENT_TYPE_NET_REQ value
 * @property {number} X_MSG_IM_SDK_EVENT_TYPE_NET_RSP=2 X_MSG_IM_SDK_EVENT_TYPE_NET_RSP value
 * @property {number} X_MSG_IM_SDK_EVENT_TYPE_DB_RSP=3 X_MSG_IM_SDK_EVENT_TYPE_DB_RSP value
 * @property {number} X_MSG_IM_SDK_EVENT_TYPE_CXX_LOG=4 X_MSG_IM_SDK_EVENT_TYPE_CXX_LOG value
 */
$root.XmsgImSdkEventType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "X_MSG_IM_SDK_EVENT_TYPE_NET_NOTICE"] = 0;
    values[valuesById[1] = "X_MSG_IM_SDK_EVENT_TYPE_NET_REQ"] = 1;
    values[valuesById[2] = "X_MSG_IM_SDK_EVENT_TYPE_NET_RSP"] = 2;
    values[valuesById[3] = "X_MSG_IM_SDK_EVENT_TYPE_DB_RSP"] = 3;
    values[valuesById[4] = "X_MSG_IM_SDK_EVENT_TYPE_CXX_LOG"] = 4;
    return values;
})();

$root.XmsgImHlrAttachSimpleReq = (function() {

    /**
     * Properties of a XmsgImHlrAttachSimpleReq.
     * @exports IXmsgImHlrAttachSimpleReq
     * @interface IXmsgImHlrAttachSimpleReq
     * @property {string|null} [token] XmsgImHlrAttachSimpleReq token
     * @property {string|null} [salt] XmsgImHlrAttachSimpleReq salt
     * @property {string|null} [sign] XmsgImHlrAttachSimpleReq sign
     * @property {string|null} [alg] XmsgImHlrAttachSimpleReq alg
     * @property {string|null} [ext] XmsgImHlrAttachSimpleReq ext
     */

    /**
     * Constructs a new XmsgImHlrAttachSimpleReq.
     * @exports XmsgImHlrAttachSimpleReq
     * @classdesc Represents a XmsgImHlrAttachSimpleReq.
     * @implements IXmsgImHlrAttachSimpleReq
     * @constructor
     * @param {IXmsgImHlrAttachSimpleReq=} [properties] Properties to set
     */
    function XmsgImHlrAttachSimpleReq(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrAttachSimpleReq token.
     * @member {string} token
     * @memberof XmsgImHlrAttachSimpleReq
     * @instance
     */
    XmsgImHlrAttachSimpleReq.prototype.token = "";

    /**
     * XmsgImHlrAttachSimpleReq salt.
     * @member {string} salt
     * @memberof XmsgImHlrAttachSimpleReq
     * @instance
     */
    XmsgImHlrAttachSimpleReq.prototype.salt = "";

    /**
     * XmsgImHlrAttachSimpleReq sign.
     * @member {string} sign
     * @memberof XmsgImHlrAttachSimpleReq
     * @instance
     */
    XmsgImHlrAttachSimpleReq.prototype.sign = "";

    /**
     * XmsgImHlrAttachSimpleReq alg.
     * @member {string} alg
     * @memberof XmsgImHlrAttachSimpleReq
     * @instance
     */
    XmsgImHlrAttachSimpleReq.prototype.alg = "";

    /**
     * XmsgImHlrAttachSimpleReq ext.
     * @member {string} ext
     * @memberof XmsgImHlrAttachSimpleReq
     * @instance
     */
    XmsgImHlrAttachSimpleReq.prototype.ext = "";

    /**
     * Creates a new XmsgImHlrAttachSimpleReq instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrAttachSimpleReq
     * @static
     * @param {IXmsgImHlrAttachSimpleReq=} [properties] Properties to set
     * @returns {XmsgImHlrAttachSimpleReq} XmsgImHlrAttachSimpleReq instance
     */
    XmsgImHlrAttachSimpleReq.create = function create(properties) {
        return new XmsgImHlrAttachSimpleReq(properties);
    };

    /**
     * Encodes the specified XmsgImHlrAttachSimpleReq message. Does not implicitly {@link XmsgImHlrAttachSimpleReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrAttachSimpleReq
     * @static
     * @param {IXmsgImHlrAttachSimpleReq} message XmsgImHlrAttachSimpleReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrAttachSimpleReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.token != null && message.hasOwnProperty("token"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.token);
        if (message.salt != null && message.hasOwnProperty("salt"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.salt);
        if (message.sign != null && message.hasOwnProperty("sign"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.sign);
        if (message.alg != null && message.hasOwnProperty("alg"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.alg);
        if (message.ext != null && message.hasOwnProperty("ext"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.ext);
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrAttachSimpleReq message, length delimited. Does not implicitly {@link XmsgImHlrAttachSimpleReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrAttachSimpleReq
     * @static
     * @param {IXmsgImHlrAttachSimpleReq} message XmsgImHlrAttachSimpleReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrAttachSimpleReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrAttachSimpleReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrAttachSimpleReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrAttachSimpleReq} XmsgImHlrAttachSimpleReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrAttachSimpleReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrAttachSimpleReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.token = reader.string();
                break;
            case 2:
                message.salt = reader.string();
                break;
            case 3:
                message.sign = reader.string();
                break;
            case 4:
                message.alg = reader.string();
                break;
            case 5:
                message.ext = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrAttachSimpleReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrAttachSimpleReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrAttachSimpleReq} XmsgImHlrAttachSimpleReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrAttachSimpleReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrAttachSimpleReq message.
     * @function verify
     * @memberof XmsgImHlrAttachSimpleReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrAttachSimpleReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.token != null && message.hasOwnProperty("token"))
            if (!$util.isString(message.token))
                return "token: string expected";
        if (message.salt != null && message.hasOwnProperty("salt"))
            if (!$util.isString(message.salt))
                return "salt: string expected";
        if (message.sign != null && message.hasOwnProperty("sign"))
            if (!$util.isString(message.sign))
                return "sign: string expected";
        if (message.alg != null && message.hasOwnProperty("alg"))
            if (!$util.isString(message.alg))
                return "alg: string expected";
        if (message.ext != null && message.hasOwnProperty("ext"))
            if (!$util.isString(message.ext))
                return "ext: string expected";
        return null;
    };

    /**
     * Creates a XmsgImHlrAttachSimpleReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrAttachSimpleReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrAttachSimpleReq} XmsgImHlrAttachSimpleReq
     */
    XmsgImHlrAttachSimpleReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrAttachSimpleReq)
            return object;
        var message = new $root.XmsgImHlrAttachSimpleReq();
        if (object.token != null)
            message.token = String(object.token);
        if (object.salt != null)
            message.salt = String(object.salt);
        if (object.sign != null)
            message.sign = String(object.sign);
        if (object.alg != null)
            message.alg = String(object.alg);
        if (object.ext != null)
            message.ext = String(object.ext);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrAttachSimpleReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrAttachSimpleReq
     * @static
     * @param {XmsgImHlrAttachSimpleReq} message XmsgImHlrAttachSimpleReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrAttachSimpleReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.token = "";
            object.salt = "";
            object.sign = "";
            object.alg = "";
            object.ext = "";
        }
        if (message.token != null && message.hasOwnProperty("token"))
            object.token = message.token;
        if (message.salt != null && message.hasOwnProperty("salt"))
            object.salt = message.salt;
        if (message.sign != null && message.hasOwnProperty("sign"))
            object.sign = message.sign;
        if (message.alg != null && message.hasOwnProperty("alg"))
            object.alg = message.alg;
        if (message.ext != null && message.hasOwnProperty("ext"))
            object.ext = message.ext;
        return object;
    };

    /**
     * Converts this XmsgImHlrAttachSimpleReq to JSON.
     * @function toJSON
     * @memberof XmsgImHlrAttachSimpleReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrAttachSimpleReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrAttachSimpleReq;
})();

$root.XmsgImHlrAttachSimpleRsp = (function() {

    /**
     * Properties of a XmsgImHlrAttachSimpleRsp.
     * @exports IXmsgImHlrAttachSimpleRsp
     * @interface IXmsgImHlrAttachSimpleRsp
     * @property {string|null} [cgt] XmsgImHlrAttachSimpleRsp cgt
     * @property {string|null} [ext] XmsgImHlrAttachSimpleRsp ext
     */

    /**
     * Constructs a new XmsgImHlrAttachSimpleRsp.
     * @exports XmsgImHlrAttachSimpleRsp
     * @classdesc Represents a XmsgImHlrAttachSimpleRsp.
     * @implements IXmsgImHlrAttachSimpleRsp
     * @constructor
     * @param {IXmsgImHlrAttachSimpleRsp=} [properties] Properties to set
     */
    function XmsgImHlrAttachSimpleRsp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrAttachSimpleRsp cgt.
     * @member {string} cgt
     * @memberof XmsgImHlrAttachSimpleRsp
     * @instance
     */
    XmsgImHlrAttachSimpleRsp.prototype.cgt = "";

    /**
     * XmsgImHlrAttachSimpleRsp ext.
     * @member {string} ext
     * @memberof XmsgImHlrAttachSimpleRsp
     * @instance
     */
    XmsgImHlrAttachSimpleRsp.prototype.ext = "";

    /**
     * Creates a new XmsgImHlrAttachSimpleRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrAttachSimpleRsp
     * @static
     * @param {IXmsgImHlrAttachSimpleRsp=} [properties] Properties to set
     * @returns {XmsgImHlrAttachSimpleRsp} XmsgImHlrAttachSimpleRsp instance
     */
    XmsgImHlrAttachSimpleRsp.create = function create(properties) {
        return new XmsgImHlrAttachSimpleRsp(properties);
    };

    /**
     * Encodes the specified XmsgImHlrAttachSimpleRsp message. Does not implicitly {@link XmsgImHlrAttachSimpleRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrAttachSimpleRsp
     * @static
     * @param {IXmsgImHlrAttachSimpleRsp} message XmsgImHlrAttachSimpleRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrAttachSimpleRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.ext != null && message.hasOwnProperty("ext"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.ext);
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrAttachSimpleRsp message, length delimited. Does not implicitly {@link XmsgImHlrAttachSimpleRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrAttachSimpleRsp
     * @static
     * @param {IXmsgImHlrAttachSimpleRsp} message XmsgImHlrAttachSimpleRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrAttachSimpleRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrAttachSimpleRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrAttachSimpleRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrAttachSimpleRsp} XmsgImHlrAttachSimpleRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrAttachSimpleRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrAttachSimpleRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.ext = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrAttachSimpleRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrAttachSimpleRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrAttachSimpleRsp} XmsgImHlrAttachSimpleRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrAttachSimpleRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrAttachSimpleRsp message.
     * @function verify
     * @memberof XmsgImHlrAttachSimpleRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrAttachSimpleRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.ext != null && message.hasOwnProperty("ext"))
            if (!$util.isString(message.ext))
                return "ext: string expected";
        return null;
    };

    /**
     * Creates a XmsgImHlrAttachSimpleRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrAttachSimpleRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrAttachSimpleRsp} XmsgImHlrAttachSimpleRsp
     */
    XmsgImHlrAttachSimpleRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrAttachSimpleRsp)
            return object;
        var message = new $root.XmsgImHlrAttachSimpleRsp();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.ext != null)
            message.ext = String(object.ext);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrAttachSimpleRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrAttachSimpleRsp
     * @static
     * @param {XmsgImHlrAttachSimpleRsp} message XmsgImHlrAttachSimpleRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrAttachSimpleRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cgt = "";
            object.ext = "";
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.ext != null && message.hasOwnProperty("ext"))
            object.ext = message.ext;
        return object;
    };

    /**
     * Converts this XmsgImHlrAttachSimpleRsp to JSON.
     * @function toJSON
     * @memberof XmsgImHlrAttachSimpleRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrAttachSimpleRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrAttachSimpleRsp;
})();

$root.XmsgImHlrDetachSimpleReq = (function() {

    /**
     * Properties of a XmsgImHlrDetachSimpleReq.
     * @exports IXmsgImHlrDetachSimpleReq
     * @interface IXmsgImHlrDetachSimpleReq
     * @property {string|null} [ext] XmsgImHlrDetachSimpleReq ext
     */

    /**
     * Constructs a new XmsgImHlrDetachSimpleReq.
     * @exports XmsgImHlrDetachSimpleReq
     * @classdesc Represents a XmsgImHlrDetachSimpleReq.
     * @implements IXmsgImHlrDetachSimpleReq
     * @constructor
     * @param {IXmsgImHlrDetachSimpleReq=} [properties] Properties to set
     */
    function XmsgImHlrDetachSimpleReq(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrDetachSimpleReq ext.
     * @member {string} ext
     * @memberof XmsgImHlrDetachSimpleReq
     * @instance
     */
    XmsgImHlrDetachSimpleReq.prototype.ext = "";

    /**
     * Creates a new XmsgImHlrDetachSimpleReq instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrDetachSimpleReq
     * @static
     * @param {IXmsgImHlrDetachSimpleReq=} [properties] Properties to set
     * @returns {XmsgImHlrDetachSimpleReq} XmsgImHlrDetachSimpleReq instance
     */
    XmsgImHlrDetachSimpleReq.create = function create(properties) {
        return new XmsgImHlrDetachSimpleReq(properties);
    };

    /**
     * Encodes the specified XmsgImHlrDetachSimpleReq message. Does not implicitly {@link XmsgImHlrDetachSimpleReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrDetachSimpleReq
     * @static
     * @param {IXmsgImHlrDetachSimpleReq} message XmsgImHlrDetachSimpleReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrDetachSimpleReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ext != null && message.hasOwnProperty("ext"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.ext);
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrDetachSimpleReq message, length delimited. Does not implicitly {@link XmsgImHlrDetachSimpleReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrDetachSimpleReq
     * @static
     * @param {IXmsgImHlrDetachSimpleReq} message XmsgImHlrDetachSimpleReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrDetachSimpleReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrDetachSimpleReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrDetachSimpleReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrDetachSimpleReq} XmsgImHlrDetachSimpleReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrDetachSimpleReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrDetachSimpleReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ext = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrDetachSimpleReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrDetachSimpleReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrDetachSimpleReq} XmsgImHlrDetachSimpleReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrDetachSimpleReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrDetachSimpleReq message.
     * @function verify
     * @memberof XmsgImHlrDetachSimpleReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrDetachSimpleReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ext != null && message.hasOwnProperty("ext"))
            if (!$util.isString(message.ext))
                return "ext: string expected";
        return null;
    };

    /**
     * Creates a XmsgImHlrDetachSimpleReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrDetachSimpleReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrDetachSimpleReq} XmsgImHlrDetachSimpleReq
     */
    XmsgImHlrDetachSimpleReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrDetachSimpleReq)
            return object;
        var message = new $root.XmsgImHlrDetachSimpleReq();
        if (object.ext != null)
            message.ext = String(object.ext);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrDetachSimpleReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrDetachSimpleReq
     * @static
     * @param {XmsgImHlrDetachSimpleReq} message XmsgImHlrDetachSimpleReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrDetachSimpleReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.ext = "";
        if (message.ext != null && message.hasOwnProperty("ext"))
            object.ext = message.ext;
        return object;
    };

    /**
     * Converts this XmsgImHlrDetachSimpleReq to JSON.
     * @function toJSON
     * @memberof XmsgImHlrDetachSimpleReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrDetachSimpleReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrDetachSimpleReq;
})();

$root.XmsgImHlrDetachSimpleRsp = (function() {

    /**
     * Properties of a XmsgImHlrDetachSimpleRsp.
     * @exports IXmsgImHlrDetachSimpleRsp
     * @interface IXmsgImHlrDetachSimpleRsp
     * @property {string|null} [ext] XmsgImHlrDetachSimpleRsp ext
     */

    /**
     * Constructs a new XmsgImHlrDetachSimpleRsp.
     * @exports XmsgImHlrDetachSimpleRsp
     * @classdesc Represents a XmsgImHlrDetachSimpleRsp.
     * @implements IXmsgImHlrDetachSimpleRsp
     * @constructor
     * @param {IXmsgImHlrDetachSimpleRsp=} [properties] Properties to set
     */
    function XmsgImHlrDetachSimpleRsp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrDetachSimpleRsp ext.
     * @member {string} ext
     * @memberof XmsgImHlrDetachSimpleRsp
     * @instance
     */
    XmsgImHlrDetachSimpleRsp.prototype.ext = "";

    /**
     * Creates a new XmsgImHlrDetachSimpleRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrDetachSimpleRsp
     * @static
     * @param {IXmsgImHlrDetachSimpleRsp=} [properties] Properties to set
     * @returns {XmsgImHlrDetachSimpleRsp} XmsgImHlrDetachSimpleRsp instance
     */
    XmsgImHlrDetachSimpleRsp.create = function create(properties) {
        return new XmsgImHlrDetachSimpleRsp(properties);
    };

    /**
     * Encodes the specified XmsgImHlrDetachSimpleRsp message. Does not implicitly {@link XmsgImHlrDetachSimpleRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrDetachSimpleRsp
     * @static
     * @param {IXmsgImHlrDetachSimpleRsp} message XmsgImHlrDetachSimpleRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrDetachSimpleRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ext != null && message.hasOwnProperty("ext"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.ext);
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrDetachSimpleRsp message, length delimited. Does not implicitly {@link XmsgImHlrDetachSimpleRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrDetachSimpleRsp
     * @static
     * @param {IXmsgImHlrDetachSimpleRsp} message XmsgImHlrDetachSimpleRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrDetachSimpleRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrDetachSimpleRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrDetachSimpleRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrDetachSimpleRsp} XmsgImHlrDetachSimpleRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrDetachSimpleRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrDetachSimpleRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ext = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrDetachSimpleRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrDetachSimpleRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrDetachSimpleRsp} XmsgImHlrDetachSimpleRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrDetachSimpleRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrDetachSimpleRsp message.
     * @function verify
     * @memberof XmsgImHlrDetachSimpleRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrDetachSimpleRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ext != null && message.hasOwnProperty("ext"))
            if (!$util.isString(message.ext))
                return "ext: string expected";
        return null;
    };

    /**
     * Creates a XmsgImHlrDetachSimpleRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrDetachSimpleRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrDetachSimpleRsp} XmsgImHlrDetachSimpleRsp
     */
    XmsgImHlrDetachSimpleRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrDetachSimpleRsp)
            return object;
        var message = new $root.XmsgImHlrDetachSimpleRsp();
        if (object.ext != null)
            message.ext = String(object.ext);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrDetachSimpleRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrDetachSimpleRsp
     * @static
     * @param {XmsgImHlrDetachSimpleRsp} message XmsgImHlrDetachSimpleRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrDetachSimpleRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.ext = "";
        if (message.ext != null && message.hasOwnProperty("ext"))
            object.ext = message.ext;
        return object;
    };

    /**
     * Converts this XmsgImHlrDetachSimpleRsp to JSON.
     * @function toJSON
     * @memberof XmsgImHlrDetachSimpleRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrDetachSimpleRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrDetachSimpleRsp;
})();

$root.XmsgImHlrOtherClientAttachReq = (function() {

    /**
     * Properties of a XmsgImHlrOtherClientAttachReq.
     * @exports IXmsgImHlrOtherClientAttachReq
     * @interface IXmsgImHlrOtherClientAttachReq
     * @property {IXmsgImClientDeviceInfo|null} [dev] XmsgImHlrOtherClientAttachReq dev
     * @property {string|null} [host] XmsgImHlrOtherClientAttachReq host
     */

    /**
     * Constructs a new XmsgImHlrOtherClientAttachReq.
     * @exports XmsgImHlrOtherClientAttachReq
     * @classdesc Represents a XmsgImHlrOtherClientAttachReq.
     * @implements IXmsgImHlrOtherClientAttachReq
     * @constructor
     * @param {IXmsgImHlrOtherClientAttachReq=} [properties] Properties to set
     */
    function XmsgImHlrOtherClientAttachReq(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrOtherClientAttachReq dev.
     * @member {IXmsgImClientDeviceInfo|null|undefined} dev
     * @memberof XmsgImHlrOtherClientAttachReq
     * @instance
     */
    XmsgImHlrOtherClientAttachReq.prototype.dev = null;

    /**
     * XmsgImHlrOtherClientAttachReq host.
     * @member {string} host
     * @memberof XmsgImHlrOtherClientAttachReq
     * @instance
     */
    XmsgImHlrOtherClientAttachReq.prototype.host = "";

    /**
     * Creates a new XmsgImHlrOtherClientAttachReq instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrOtherClientAttachReq
     * @static
     * @param {IXmsgImHlrOtherClientAttachReq=} [properties] Properties to set
     * @returns {XmsgImHlrOtherClientAttachReq} XmsgImHlrOtherClientAttachReq instance
     */
    XmsgImHlrOtherClientAttachReq.create = function create(properties) {
        return new XmsgImHlrOtherClientAttachReq(properties);
    };

    /**
     * Encodes the specified XmsgImHlrOtherClientAttachReq message. Does not implicitly {@link XmsgImHlrOtherClientAttachReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrOtherClientAttachReq
     * @static
     * @param {IXmsgImHlrOtherClientAttachReq} message XmsgImHlrOtherClientAttachReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrOtherClientAttachReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.dev != null && message.hasOwnProperty("dev"))
            $root.XmsgImClientDeviceInfo.encode(message.dev, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.host != null && message.hasOwnProperty("host"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.host);
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrOtherClientAttachReq message, length delimited. Does not implicitly {@link XmsgImHlrOtherClientAttachReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrOtherClientAttachReq
     * @static
     * @param {IXmsgImHlrOtherClientAttachReq} message XmsgImHlrOtherClientAttachReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrOtherClientAttachReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrOtherClientAttachReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrOtherClientAttachReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrOtherClientAttachReq} XmsgImHlrOtherClientAttachReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrOtherClientAttachReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrOtherClientAttachReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.dev = $root.XmsgImClientDeviceInfo.decode(reader, reader.uint32());
                break;
            case 2:
                message.host = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrOtherClientAttachReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrOtherClientAttachReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrOtherClientAttachReq} XmsgImHlrOtherClientAttachReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrOtherClientAttachReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrOtherClientAttachReq message.
     * @function verify
     * @memberof XmsgImHlrOtherClientAttachReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrOtherClientAttachReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.dev != null && message.hasOwnProperty("dev")) {
            var error = $root.XmsgImClientDeviceInfo.verify(message.dev);
            if (error)
                return "dev." + error;
        }
        if (message.host != null && message.hasOwnProperty("host"))
            if (!$util.isString(message.host))
                return "host: string expected";
        return null;
    };

    /**
     * Creates a XmsgImHlrOtherClientAttachReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrOtherClientAttachReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrOtherClientAttachReq} XmsgImHlrOtherClientAttachReq
     */
    XmsgImHlrOtherClientAttachReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrOtherClientAttachReq)
            return object;
        var message = new $root.XmsgImHlrOtherClientAttachReq();
        if (object.dev != null) {
            if (typeof object.dev !== "object")
                throw TypeError(".XmsgImHlrOtherClientAttachReq.dev: object expected");
            message.dev = $root.XmsgImClientDeviceInfo.fromObject(object.dev);
        }
        if (object.host != null)
            message.host = String(object.host);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrOtherClientAttachReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrOtherClientAttachReq
     * @static
     * @param {XmsgImHlrOtherClientAttachReq} message XmsgImHlrOtherClientAttachReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrOtherClientAttachReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.dev = null;
            object.host = "";
        }
        if (message.dev != null && message.hasOwnProperty("dev"))
            object.dev = $root.XmsgImClientDeviceInfo.toObject(message.dev, options);
        if (message.host != null && message.hasOwnProperty("host"))
            object.host = message.host;
        return object;
    };

    /**
     * Converts this XmsgImHlrOtherClientAttachReq to JSON.
     * @function toJSON
     * @memberof XmsgImHlrOtherClientAttachReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrOtherClientAttachReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrOtherClientAttachReq;
})();

$root.XmsgImHlrOtherClientAttachRsp = (function() {

    /**
     * Properties of a XmsgImHlrOtherClientAttachRsp.
     * @exports IXmsgImHlrOtherClientAttachRsp
     * @interface IXmsgImHlrOtherClientAttachRsp
     * @property {string|null} [action] XmsgImHlrOtherClientAttachRsp action
     */

    /**
     * Constructs a new XmsgImHlrOtherClientAttachRsp.
     * @exports XmsgImHlrOtherClientAttachRsp
     * @classdesc Represents a XmsgImHlrOtherClientAttachRsp.
     * @implements IXmsgImHlrOtherClientAttachRsp
     * @constructor
     * @param {IXmsgImHlrOtherClientAttachRsp=} [properties] Properties to set
     */
    function XmsgImHlrOtherClientAttachRsp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrOtherClientAttachRsp action.
     * @member {string} action
     * @memberof XmsgImHlrOtherClientAttachRsp
     * @instance
     */
    XmsgImHlrOtherClientAttachRsp.prototype.action = "";

    /**
     * Creates a new XmsgImHlrOtherClientAttachRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrOtherClientAttachRsp
     * @static
     * @param {IXmsgImHlrOtherClientAttachRsp=} [properties] Properties to set
     * @returns {XmsgImHlrOtherClientAttachRsp} XmsgImHlrOtherClientAttachRsp instance
     */
    XmsgImHlrOtherClientAttachRsp.create = function create(properties) {
        return new XmsgImHlrOtherClientAttachRsp(properties);
    };

    /**
     * Encodes the specified XmsgImHlrOtherClientAttachRsp message. Does not implicitly {@link XmsgImHlrOtherClientAttachRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrOtherClientAttachRsp
     * @static
     * @param {IXmsgImHlrOtherClientAttachRsp} message XmsgImHlrOtherClientAttachRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrOtherClientAttachRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.action != null && message.hasOwnProperty("action"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.action);
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrOtherClientAttachRsp message, length delimited. Does not implicitly {@link XmsgImHlrOtherClientAttachRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrOtherClientAttachRsp
     * @static
     * @param {IXmsgImHlrOtherClientAttachRsp} message XmsgImHlrOtherClientAttachRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrOtherClientAttachRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrOtherClientAttachRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrOtherClientAttachRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrOtherClientAttachRsp} XmsgImHlrOtherClientAttachRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrOtherClientAttachRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrOtherClientAttachRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.action = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrOtherClientAttachRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrOtherClientAttachRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrOtherClientAttachRsp} XmsgImHlrOtherClientAttachRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrOtherClientAttachRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrOtherClientAttachRsp message.
     * @function verify
     * @memberof XmsgImHlrOtherClientAttachRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrOtherClientAttachRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.action != null && message.hasOwnProperty("action"))
            if (!$util.isString(message.action))
                return "action: string expected";
        return null;
    };

    /**
     * Creates a XmsgImHlrOtherClientAttachRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrOtherClientAttachRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrOtherClientAttachRsp} XmsgImHlrOtherClientAttachRsp
     */
    XmsgImHlrOtherClientAttachRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrOtherClientAttachRsp)
            return object;
        var message = new $root.XmsgImHlrOtherClientAttachRsp();
        if (object.action != null)
            message.action = String(object.action);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrOtherClientAttachRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrOtherClientAttachRsp
     * @static
     * @param {XmsgImHlrOtherClientAttachRsp} message XmsgImHlrOtherClientAttachRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrOtherClientAttachRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.action = "";
        if (message.action != null && message.hasOwnProperty("action"))
            object.action = message.action;
        return object;
    };

    /**
     * Converts this XmsgImHlrOtherClientAttachRsp to JSON.
     * @function toJSON
     * @memberof XmsgImHlrOtherClientAttachRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrOtherClientAttachRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrOtherClientAttachRsp;
})();

$root.XmsgImHlrOtherClientAttachNotice = (function() {

    /**
     * Properties of a XmsgImHlrOtherClientAttachNotice.
     * @exports IXmsgImHlrOtherClientAttachNotice
     * @interface IXmsgImHlrOtherClientAttachNotice
     * @property {IXmsgImClientDeviceInfo|null} [dev] XmsgImHlrOtherClientAttachNotice dev
     * @property {string|null} [host] XmsgImHlrOtherClientAttachNotice host
     */

    /**
     * Constructs a new XmsgImHlrOtherClientAttachNotice.
     * @exports XmsgImHlrOtherClientAttachNotice
     * @classdesc Represents a XmsgImHlrOtherClientAttachNotice.
     * @implements IXmsgImHlrOtherClientAttachNotice
     * @constructor
     * @param {IXmsgImHlrOtherClientAttachNotice=} [properties] Properties to set
     */
    function XmsgImHlrOtherClientAttachNotice(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrOtherClientAttachNotice dev.
     * @member {IXmsgImClientDeviceInfo|null|undefined} dev
     * @memberof XmsgImHlrOtherClientAttachNotice
     * @instance
     */
    XmsgImHlrOtherClientAttachNotice.prototype.dev = null;

    /**
     * XmsgImHlrOtherClientAttachNotice host.
     * @member {string} host
     * @memberof XmsgImHlrOtherClientAttachNotice
     * @instance
     */
    XmsgImHlrOtherClientAttachNotice.prototype.host = "";

    /**
     * Creates a new XmsgImHlrOtherClientAttachNotice instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrOtherClientAttachNotice
     * @static
     * @param {IXmsgImHlrOtherClientAttachNotice=} [properties] Properties to set
     * @returns {XmsgImHlrOtherClientAttachNotice} XmsgImHlrOtherClientAttachNotice instance
     */
    XmsgImHlrOtherClientAttachNotice.create = function create(properties) {
        return new XmsgImHlrOtherClientAttachNotice(properties);
    };

    /**
     * Encodes the specified XmsgImHlrOtherClientAttachNotice message. Does not implicitly {@link XmsgImHlrOtherClientAttachNotice.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrOtherClientAttachNotice
     * @static
     * @param {IXmsgImHlrOtherClientAttachNotice} message XmsgImHlrOtherClientAttachNotice message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrOtherClientAttachNotice.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.dev != null && message.hasOwnProperty("dev"))
            $root.XmsgImClientDeviceInfo.encode(message.dev, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.host != null && message.hasOwnProperty("host"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.host);
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrOtherClientAttachNotice message, length delimited. Does not implicitly {@link XmsgImHlrOtherClientAttachNotice.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrOtherClientAttachNotice
     * @static
     * @param {IXmsgImHlrOtherClientAttachNotice} message XmsgImHlrOtherClientAttachNotice message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrOtherClientAttachNotice.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrOtherClientAttachNotice message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrOtherClientAttachNotice
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrOtherClientAttachNotice} XmsgImHlrOtherClientAttachNotice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrOtherClientAttachNotice.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrOtherClientAttachNotice();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.dev = $root.XmsgImClientDeviceInfo.decode(reader, reader.uint32());
                break;
            case 2:
                message.host = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrOtherClientAttachNotice message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrOtherClientAttachNotice
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrOtherClientAttachNotice} XmsgImHlrOtherClientAttachNotice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrOtherClientAttachNotice.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrOtherClientAttachNotice message.
     * @function verify
     * @memberof XmsgImHlrOtherClientAttachNotice
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrOtherClientAttachNotice.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.dev != null && message.hasOwnProperty("dev")) {
            var error = $root.XmsgImClientDeviceInfo.verify(message.dev);
            if (error)
                return "dev." + error;
        }
        if (message.host != null && message.hasOwnProperty("host"))
            if (!$util.isString(message.host))
                return "host: string expected";
        return null;
    };

    /**
     * Creates a XmsgImHlrOtherClientAttachNotice message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrOtherClientAttachNotice
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrOtherClientAttachNotice} XmsgImHlrOtherClientAttachNotice
     */
    XmsgImHlrOtherClientAttachNotice.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrOtherClientAttachNotice)
            return object;
        var message = new $root.XmsgImHlrOtherClientAttachNotice();
        if (object.dev != null) {
            if (typeof object.dev !== "object")
                throw TypeError(".XmsgImHlrOtherClientAttachNotice.dev: object expected");
            message.dev = $root.XmsgImClientDeviceInfo.fromObject(object.dev);
        }
        if (object.host != null)
            message.host = String(object.host);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrOtherClientAttachNotice message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrOtherClientAttachNotice
     * @static
     * @param {XmsgImHlrOtherClientAttachNotice} message XmsgImHlrOtherClientAttachNotice
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrOtherClientAttachNotice.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.dev = null;
            object.host = "";
        }
        if (message.dev != null && message.hasOwnProperty("dev"))
            object.dev = $root.XmsgImClientDeviceInfo.toObject(message.dev, options);
        if (message.host != null && message.hasOwnProperty("host"))
            object.host = message.host;
        return object;
    };

    /**
     * Converts this XmsgImHlrOtherClientAttachNotice to JSON.
     * @function toJSON
     * @memberof XmsgImHlrOtherClientAttachNotice
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrOtherClientAttachNotice.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrOtherClientAttachNotice;
})();

$root.XmsgImAuthSimpleReq = (function() {

    /**
     * Properties of a XmsgImAuthSimpleReq.
     * @exports IXmsgImAuthSimpleReq
     * @interface IXmsgImAuthSimpleReq
     * @property {string|null} [usr] XmsgImAuthSimpleReq usr
     * @property {string|null} [salt] XmsgImAuthSimpleReq salt
     * @property {string|null} [sign] XmsgImAuthSimpleReq sign
     * @property {IXmsgImClientDeviceInfo|null} [dev] XmsgImAuthSimpleReq dev
     */

    /**
     * Constructs a new XmsgImAuthSimpleReq.
     * @exports XmsgImAuthSimpleReq
     * @classdesc Represents a XmsgImAuthSimpleReq.
     * @implements IXmsgImAuthSimpleReq
     * @constructor
     * @param {IXmsgImAuthSimpleReq=} [properties] Properties to set
     */
    function XmsgImAuthSimpleReq(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImAuthSimpleReq usr.
     * @member {string} usr
     * @memberof XmsgImAuthSimpleReq
     * @instance
     */
    XmsgImAuthSimpleReq.prototype.usr = "";

    /**
     * XmsgImAuthSimpleReq salt.
     * @member {string} salt
     * @memberof XmsgImAuthSimpleReq
     * @instance
     */
    XmsgImAuthSimpleReq.prototype.salt = "";

    /**
     * XmsgImAuthSimpleReq sign.
     * @member {string} sign
     * @memberof XmsgImAuthSimpleReq
     * @instance
     */
    XmsgImAuthSimpleReq.prototype.sign = "";

    /**
     * XmsgImAuthSimpleReq dev.
     * @member {IXmsgImClientDeviceInfo|null|undefined} dev
     * @memberof XmsgImAuthSimpleReq
     * @instance
     */
    XmsgImAuthSimpleReq.prototype.dev = null;

    /**
     * Creates a new XmsgImAuthSimpleReq instance using the specified properties.
     * @function create
     * @memberof XmsgImAuthSimpleReq
     * @static
     * @param {IXmsgImAuthSimpleReq=} [properties] Properties to set
     * @returns {XmsgImAuthSimpleReq} XmsgImAuthSimpleReq instance
     */
    XmsgImAuthSimpleReq.create = function create(properties) {
        return new XmsgImAuthSimpleReq(properties);
    };

    /**
     * Encodes the specified XmsgImAuthSimpleReq message. Does not implicitly {@link XmsgImAuthSimpleReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImAuthSimpleReq
     * @static
     * @param {IXmsgImAuthSimpleReq} message XmsgImAuthSimpleReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImAuthSimpleReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.usr != null && message.hasOwnProperty("usr"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.usr);
        if (message.salt != null && message.hasOwnProperty("salt"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.salt);
        if (message.sign != null && message.hasOwnProperty("sign"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.sign);
        if (message.dev != null && message.hasOwnProperty("dev"))
            $root.XmsgImClientDeviceInfo.encode(message.dev, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImAuthSimpleReq message, length delimited. Does not implicitly {@link XmsgImAuthSimpleReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImAuthSimpleReq
     * @static
     * @param {IXmsgImAuthSimpleReq} message XmsgImAuthSimpleReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImAuthSimpleReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImAuthSimpleReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImAuthSimpleReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImAuthSimpleReq} XmsgImAuthSimpleReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImAuthSimpleReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImAuthSimpleReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.usr = reader.string();
                break;
            case 2:
                message.salt = reader.string();
                break;
            case 3:
                message.sign = reader.string();
                break;
            case 4:
                message.dev = $root.XmsgImClientDeviceInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImAuthSimpleReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImAuthSimpleReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImAuthSimpleReq} XmsgImAuthSimpleReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImAuthSimpleReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImAuthSimpleReq message.
     * @function verify
     * @memberof XmsgImAuthSimpleReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImAuthSimpleReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.usr != null && message.hasOwnProperty("usr"))
            if (!$util.isString(message.usr))
                return "usr: string expected";
        if (message.salt != null && message.hasOwnProperty("salt"))
            if (!$util.isString(message.salt))
                return "salt: string expected";
        if (message.sign != null && message.hasOwnProperty("sign"))
            if (!$util.isString(message.sign))
                return "sign: string expected";
        if (message.dev != null && message.hasOwnProperty("dev")) {
            var error = $root.XmsgImClientDeviceInfo.verify(message.dev);
            if (error)
                return "dev." + error;
        }
        return null;
    };

    /**
     * Creates a XmsgImAuthSimpleReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImAuthSimpleReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImAuthSimpleReq} XmsgImAuthSimpleReq
     */
    XmsgImAuthSimpleReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImAuthSimpleReq)
            return object;
        var message = new $root.XmsgImAuthSimpleReq();
        if (object.usr != null)
            message.usr = String(object.usr);
        if (object.salt != null)
            message.salt = String(object.salt);
        if (object.sign != null)
            message.sign = String(object.sign);
        if (object.dev != null) {
            if (typeof object.dev !== "object")
                throw TypeError(".XmsgImAuthSimpleReq.dev: object expected");
            message.dev = $root.XmsgImClientDeviceInfo.fromObject(object.dev);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImAuthSimpleReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImAuthSimpleReq
     * @static
     * @param {XmsgImAuthSimpleReq} message XmsgImAuthSimpleReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImAuthSimpleReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.usr = "";
            object.salt = "";
            object.sign = "";
            object.dev = null;
        }
        if (message.usr != null && message.hasOwnProperty("usr"))
            object.usr = message.usr;
        if (message.salt != null && message.hasOwnProperty("salt"))
            object.salt = message.salt;
        if (message.sign != null && message.hasOwnProperty("sign"))
            object.sign = message.sign;
        if (message.dev != null && message.hasOwnProperty("dev"))
            object.dev = $root.XmsgImClientDeviceInfo.toObject(message.dev, options);
        return object;
    };

    /**
     * Converts this XmsgImAuthSimpleReq to JSON.
     * @function toJSON
     * @memberof XmsgImAuthSimpleReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImAuthSimpleReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImAuthSimpleReq;
})();

$root.XmsgImAuthSimpleRsp = (function() {

    /**
     * Properties of a XmsgImAuthSimpleRsp.
     * @exports IXmsgImAuthSimpleRsp
     * @interface IXmsgImAuthSimpleRsp
     * @property {string|null} [token] XmsgImAuthSimpleRsp token
     * @property {string|null} [secret] XmsgImAuthSimpleRsp secret
     * @property {number|Long|null} [expired] XmsgImAuthSimpleRsp expired
     * @property {Array.<IXmsgImClientServiceAddress>|null} [apAddr] XmsgImAuthSimpleRsp apAddr
     * @property {Array.<IXmsgImClientServiceAddress>|null} [fsAddr] XmsgImAuthSimpleRsp fsAddr
     * @property {string|null} [ext] XmsgImAuthSimpleRsp ext
     */

    /**
     * Constructs a new XmsgImAuthSimpleRsp.
     * @exports XmsgImAuthSimpleRsp
     * @classdesc Represents a XmsgImAuthSimpleRsp.
     * @implements IXmsgImAuthSimpleRsp
     * @constructor
     * @param {IXmsgImAuthSimpleRsp=} [properties] Properties to set
     */
    function XmsgImAuthSimpleRsp(properties) {
        this.apAddr = [];
        this.fsAddr = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImAuthSimpleRsp token.
     * @member {string} token
     * @memberof XmsgImAuthSimpleRsp
     * @instance
     */
    XmsgImAuthSimpleRsp.prototype.token = "";

    /**
     * XmsgImAuthSimpleRsp secret.
     * @member {string} secret
     * @memberof XmsgImAuthSimpleRsp
     * @instance
     */
    XmsgImAuthSimpleRsp.prototype.secret = "";

    /**
     * XmsgImAuthSimpleRsp expired.
     * @member {number|Long} expired
     * @memberof XmsgImAuthSimpleRsp
     * @instance
     */
    XmsgImAuthSimpleRsp.prototype.expired = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImAuthSimpleRsp apAddr.
     * @member {Array.<IXmsgImClientServiceAddress>} apAddr
     * @memberof XmsgImAuthSimpleRsp
     * @instance
     */
    XmsgImAuthSimpleRsp.prototype.apAddr = $util.emptyArray;

    /**
     * XmsgImAuthSimpleRsp fsAddr.
     * @member {Array.<IXmsgImClientServiceAddress>} fsAddr
     * @memberof XmsgImAuthSimpleRsp
     * @instance
     */
    XmsgImAuthSimpleRsp.prototype.fsAddr = $util.emptyArray;

    /**
     * XmsgImAuthSimpleRsp ext.
     * @member {string} ext
     * @memberof XmsgImAuthSimpleRsp
     * @instance
     */
    XmsgImAuthSimpleRsp.prototype.ext = "";

    /**
     * Creates a new XmsgImAuthSimpleRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImAuthSimpleRsp
     * @static
     * @param {IXmsgImAuthSimpleRsp=} [properties] Properties to set
     * @returns {XmsgImAuthSimpleRsp} XmsgImAuthSimpleRsp instance
     */
    XmsgImAuthSimpleRsp.create = function create(properties) {
        return new XmsgImAuthSimpleRsp(properties);
    };

    /**
     * Encodes the specified XmsgImAuthSimpleRsp message. Does not implicitly {@link XmsgImAuthSimpleRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImAuthSimpleRsp
     * @static
     * @param {IXmsgImAuthSimpleRsp} message XmsgImAuthSimpleRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImAuthSimpleRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.token != null && message.hasOwnProperty("token"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.token);
        if (message.secret != null && message.hasOwnProperty("secret"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.secret);
        if (message.expired != null && message.hasOwnProperty("expired"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.expired);
        if (message.apAddr != null && message.apAddr.length)
            for (var i = 0; i < message.apAddr.length; ++i)
                $root.XmsgImClientServiceAddress.encode(message.apAddr[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.fsAddr != null && message.fsAddr.length)
            for (var i = 0; i < message.fsAddr.length; ++i)
                $root.XmsgImClientServiceAddress.encode(message.fsAddr[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.ext != null && message.hasOwnProperty("ext"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.ext);
        return writer;
    };

    /**
     * Encodes the specified XmsgImAuthSimpleRsp message, length delimited. Does not implicitly {@link XmsgImAuthSimpleRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImAuthSimpleRsp
     * @static
     * @param {IXmsgImAuthSimpleRsp} message XmsgImAuthSimpleRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImAuthSimpleRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImAuthSimpleRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImAuthSimpleRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImAuthSimpleRsp} XmsgImAuthSimpleRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImAuthSimpleRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImAuthSimpleRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.token = reader.string();
                break;
            case 2:
                message.secret = reader.string();
                break;
            case 3:
                message.expired = reader.uint64();
                break;
            case 4:
                if (!(message.apAddr && message.apAddr.length))
                    message.apAddr = [];
                message.apAddr.push($root.XmsgImClientServiceAddress.decode(reader, reader.uint32()));
                break;
            case 5:
                if (!(message.fsAddr && message.fsAddr.length))
                    message.fsAddr = [];
                message.fsAddr.push($root.XmsgImClientServiceAddress.decode(reader, reader.uint32()));
                break;
            case 6:
                message.ext = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImAuthSimpleRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImAuthSimpleRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImAuthSimpleRsp} XmsgImAuthSimpleRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImAuthSimpleRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImAuthSimpleRsp message.
     * @function verify
     * @memberof XmsgImAuthSimpleRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImAuthSimpleRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.token != null && message.hasOwnProperty("token"))
            if (!$util.isString(message.token))
                return "token: string expected";
        if (message.secret != null && message.hasOwnProperty("secret"))
            if (!$util.isString(message.secret))
                return "secret: string expected";
        if (message.expired != null && message.hasOwnProperty("expired"))
            if (!$util.isInteger(message.expired) && !(message.expired && $util.isInteger(message.expired.low) && $util.isInteger(message.expired.high)))
                return "expired: integer|Long expected";
        if (message.apAddr != null && message.hasOwnProperty("apAddr")) {
            if (!Array.isArray(message.apAddr))
                return "apAddr: array expected";
            for (var i = 0; i < message.apAddr.length; ++i) {
                var error = $root.XmsgImClientServiceAddress.verify(message.apAddr[i]);
                if (error)
                    return "apAddr." + error;
            }
        }
        if (message.fsAddr != null && message.hasOwnProperty("fsAddr")) {
            if (!Array.isArray(message.fsAddr))
                return "fsAddr: array expected";
            for (var i = 0; i < message.fsAddr.length; ++i) {
                var error = $root.XmsgImClientServiceAddress.verify(message.fsAddr[i]);
                if (error)
                    return "fsAddr." + error;
            }
        }
        if (message.ext != null && message.hasOwnProperty("ext"))
            if (!$util.isString(message.ext))
                return "ext: string expected";
        return null;
    };

    /**
     * Creates a XmsgImAuthSimpleRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImAuthSimpleRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImAuthSimpleRsp} XmsgImAuthSimpleRsp
     */
    XmsgImAuthSimpleRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImAuthSimpleRsp)
            return object;
        var message = new $root.XmsgImAuthSimpleRsp();
        if (object.token != null)
            message.token = String(object.token);
        if (object.secret != null)
            message.secret = String(object.secret);
        if (object.expired != null)
            if ($util.Long)
                (message.expired = $util.Long.fromValue(object.expired)).unsigned = true;
            else if (typeof object.expired === "string")
                message.expired = parseInt(object.expired, 10);
            else if (typeof object.expired === "number")
                message.expired = object.expired;
            else if (typeof object.expired === "object")
                message.expired = new $util.LongBits(object.expired.low >>> 0, object.expired.high >>> 0).toNumber(true);
        if (object.apAddr) {
            if (!Array.isArray(object.apAddr))
                throw TypeError(".XmsgImAuthSimpleRsp.apAddr: array expected");
            message.apAddr = [];
            for (var i = 0; i < object.apAddr.length; ++i) {
                if (typeof object.apAddr[i] !== "object")
                    throw TypeError(".XmsgImAuthSimpleRsp.apAddr: object expected");
                message.apAddr[i] = $root.XmsgImClientServiceAddress.fromObject(object.apAddr[i]);
            }
        }
        if (object.fsAddr) {
            if (!Array.isArray(object.fsAddr))
                throw TypeError(".XmsgImAuthSimpleRsp.fsAddr: array expected");
            message.fsAddr = [];
            for (var i = 0; i < object.fsAddr.length; ++i) {
                if (typeof object.fsAddr[i] !== "object")
                    throw TypeError(".XmsgImAuthSimpleRsp.fsAddr: object expected");
                message.fsAddr[i] = $root.XmsgImClientServiceAddress.fromObject(object.fsAddr[i]);
            }
        }
        if (object.ext != null)
            message.ext = String(object.ext);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImAuthSimpleRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImAuthSimpleRsp
     * @static
     * @param {XmsgImAuthSimpleRsp} message XmsgImAuthSimpleRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImAuthSimpleRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.apAddr = [];
            object.fsAddr = [];
        }
        if (options.defaults) {
            object.token = "";
            object.secret = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.expired = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.expired = options.longs === String ? "0" : 0;
            object.ext = "";
        }
        if (message.token != null && message.hasOwnProperty("token"))
            object.token = message.token;
        if (message.secret != null && message.hasOwnProperty("secret"))
            object.secret = message.secret;
        if (message.expired != null && message.hasOwnProperty("expired"))
            if (typeof message.expired === "number")
                object.expired = options.longs === String ? String(message.expired) : message.expired;
            else
                object.expired = options.longs === String ? $util.Long.prototype.toString.call(message.expired) : options.longs === Number ? new $util.LongBits(message.expired.low >>> 0, message.expired.high >>> 0).toNumber(true) : message.expired;
        if (message.apAddr && message.apAddr.length) {
            object.apAddr = [];
            for (var j = 0; j < message.apAddr.length; ++j)
                object.apAddr[j] = $root.XmsgImClientServiceAddress.toObject(message.apAddr[j], options);
        }
        if (message.fsAddr && message.fsAddr.length) {
            object.fsAddr = [];
            for (var j = 0; j < message.fsAddr.length; ++j)
                object.fsAddr[j] = $root.XmsgImClientServiceAddress.toObject(message.fsAddr[j], options);
        }
        if (message.ext != null && message.hasOwnProperty("ext"))
            object.ext = message.ext;
        return object;
    };

    /**
     * Converts this XmsgImAuthSimpleRsp to JSON.
     * @function toJSON
     * @memberof XmsgImAuthSimpleRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImAuthSimpleRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImAuthSimpleRsp;
})();

$root.XmsgImClientDeviceInfo = (function() {

    /**
     * Properties of a XmsgImClientDeviceInfo.
     * @exports IXmsgImClientDeviceInfo
     * @interface IXmsgImClientDeviceInfo
     * @property {string|null} [plat] XmsgImClientDeviceInfo plat
     * @property {string|null} [did] XmsgImClientDeviceInfo did
     * @property {string|null} [ver] XmsgImClientDeviceInfo ver
     * @property {string|null} [ext] XmsgImClientDeviceInfo ext
     */

    /**
     * Constructs a new XmsgImClientDeviceInfo.
     * @exports XmsgImClientDeviceInfo
     * @classdesc Represents a XmsgImClientDeviceInfo.
     * @implements IXmsgImClientDeviceInfo
     * @constructor
     * @param {IXmsgImClientDeviceInfo=} [properties] Properties to set
     */
    function XmsgImClientDeviceInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImClientDeviceInfo plat.
     * @member {string} plat
     * @memberof XmsgImClientDeviceInfo
     * @instance
     */
    XmsgImClientDeviceInfo.prototype.plat = "";

    /**
     * XmsgImClientDeviceInfo did.
     * @member {string} did
     * @memberof XmsgImClientDeviceInfo
     * @instance
     */
    XmsgImClientDeviceInfo.prototype.did = "";

    /**
     * XmsgImClientDeviceInfo ver.
     * @member {string} ver
     * @memberof XmsgImClientDeviceInfo
     * @instance
     */
    XmsgImClientDeviceInfo.prototype.ver = "";

    /**
     * XmsgImClientDeviceInfo ext.
     * @member {string} ext
     * @memberof XmsgImClientDeviceInfo
     * @instance
     */
    XmsgImClientDeviceInfo.prototype.ext = "";

    /**
     * Creates a new XmsgImClientDeviceInfo instance using the specified properties.
     * @function create
     * @memberof XmsgImClientDeviceInfo
     * @static
     * @param {IXmsgImClientDeviceInfo=} [properties] Properties to set
     * @returns {XmsgImClientDeviceInfo} XmsgImClientDeviceInfo instance
     */
    XmsgImClientDeviceInfo.create = function create(properties) {
        return new XmsgImClientDeviceInfo(properties);
    };

    /**
     * Encodes the specified XmsgImClientDeviceInfo message. Does not implicitly {@link XmsgImClientDeviceInfo.verify|verify} messages.
     * @function encode
     * @memberof XmsgImClientDeviceInfo
     * @static
     * @param {IXmsgImClientDeviceInfo} message XmsgImClientDeviceInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImClientDeviceInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.plat != null && message.hasOwnProperty("plat"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.plat);
        if (message.did != null && message.hasOwnProperty("did"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.did);
        if (message.ver != null && message.hasOwnProperty("ver"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.ver);
        if (message.ext != null && message.hasOwnProperty("ext"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.ext);
        return writer;
    };

    /**
     * Encodes the specified XmsgImClientDeviceInfo message, length delimited. Does not implicitly {@link XmsgImClientDeviceInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImClientDeviceInfo
     * @static
     * @param {IXmsgImClientDeviceInfo} message XmsgImClientDeviceInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImClientDeviceInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImClientDeviceInfo message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImClientDeviceInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImClientDeviceInfo} XmsgImClientDeviceInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImClientDeviceInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImClientDeviceInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.plat = reader.string();
                break;
            case 2:
                message.did = reader.string();
                break;
            case 3:
                message.ver = reader.string();
                break;
            case 4:
                message.ext = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImClientDeviceInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImClientDeviceInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImClientDeviceInfo} XmsgImClientDeviceInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImClientDeviceInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImClientDeviceInfo message.
     * @function verify
     * @memberof XmsgImClientDeviceInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImClientDeviceInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.plat != null && message.hasOwnProperty("plat"))
            if (!$util.isString(message.plat))
                return "plat: string expected";
        if (message.did != null && message.hasOwnProperty("did"))
            if (!$util.isString(message.did))
                return "did: string expected";
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (!$util.isString(message.ver))
                return "ver: string expected";
        if (message.ext != null && message.hasOwnProperty("ext"))
            if (!$util.isString(message.ext))
                return "ext: string expected";
        return null;
    };

    /**
     * Creates a XmsgImClientDeviceInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImClientDeviceInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImClientDeviceInfo} XmsgImClientDeviceInfo
     */
    XmsgImClientDeviceInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImClientDeviceInfo)
            return object;
        var message = new $root.XmsgImClientDeviceInfo();
        if (object.plat != null)
            message.plat = String(object.plat);
        if (object.did != null)
            message.did = String(object.did);
        if (object.ver != null)
            message.ver = String(object.ver);
        if (object.ext != null)
            message.ext = String(object.ext);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImClientDeviceInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImClientDeviceInfo
     * @static
     * @param {XmsgImClientDeviceInfo} message XmsgImClientDeviceInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImClientDeviceInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.plat = "";
            object.did = "";
            object.ver = "";
            object.ext = "";
        }
        if (message.plat != null && message.hasOwnProperty("plat"))
            object.plat = message.plat;
        if (message.did != null && message.hasOwnProperty("did"))
            object.did = message.did;
        if (message.ver != null && message.hasOwnProperty("ver"))
            object.ver = message.ver;
        if (message.ext != null && message.hasOwnProperty("ext"))
            object.ext = message.ext;
        return object;
    };

    /**
     * Converts this XmsgImClientDeviceInfo to JSON.
     * @function toJSON
     * @memberof XmsgImClientDeviceInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImClientDeviceInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImClientDeviceInfo;
})();

$root.XmsgImClientServiceAddress = (function() {

    /**
     * Properties of a XmsgImClientServiceAddress.
     * @exports IXmsgImClientServiceAddress
     * @interface IXmsgImClientServiceAddress
     * @property {string|null} [ip] XmsgImClientServiceAddress ip
     * @property {number|null} [port] XmsgImClientServiceAddress port
     * @property {number|null} [weight] XmsgImClientServiceAddress weight
     * @property {Array.<string>|null} [proto] XmsgImClientServiceAddress proto
     * @property {string|null} [ext] XmsgImClientServiceAddress ext
     */

    /**
     * Constructs a new XmsgImClientServiceAddress.
     * @exports XmsgImClientServiceAddress
     * @classdesc Represents a XmsgImClientServiceAddress.
     * @implements IXmsgImClientServiceAddress
     * @constructor
     * @param {IXmsgImClientServiceAddress=} [properties] Properties to set
     */
    function XmsgImClientServiceAddress(properties) {
        this.proto = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImClientServiceAddress ip.
     * @member {string} ip
     * @memberof XmsgImClientServiceAddress
     * @instance
     */
    XmsgImClientServiceAddress.prototype.ip = "";

    /**
     * XmsgImClientServiceAddress port.
     * @member {number} port
     * @memberof XmsgImClientServiceAddress
     * @instance
     */
    XmsgImClientServiceAddress.prototype.port = 0;

    /**
     * XmsgImClientServiceAddress weight.
     * @member {number} weight
     * @memberof XmsgImClientServiceAddress
     * @instance
     */
    XmsgImClientServiceAddress.prototype.weight = 0;

    /**
     * XmsgImClientServiceAddress proto.
     * @member {Array.<string>} proto
     * @memberof XmsgImClientServiceAddress
     * @instance
     */
    XmsgImClientServiceAddress.prototype.proto = $util.emptyArray;

    /**
     * XmsgImClientServiceAddress ext.
     * @member {string} ext
     * @memberof XmsgImClientServiceAddress
     * @instance
     */
    XmsgImClientServiceAddress.prototype.ext = "";

    /**
     * Creates a new XmsgImClientServiceAddress instance using the specified properties.
     * @function create
     * @memberof XmsgImClientServiceAddress
     * @static
     * @param {IXmsgImClientServiceAddress=} [properties] Properties to set
     * @returns {XmsgImClientServiceAddress} XmsgImClientServiceAddress instance
     */
    XmsgImClientServiceAddress.create = function create(properties) {
        return new XmsgImClientServiceAddress(properties);
    };

    /**
     * Encodes the specified XmsgImClientServiceAddress message. Does not implicitly {@link XmsgImClientServiceAddress.verify|verify} messages.
     * @function encode
     * @memberof XmsgImClientServiceAddress
     * @static
     * @param {IXmsgImClientServiceAddress} message XmsgImClientServiceAddress message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImClientServiceAddress.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ip != null && message.hasOwnProperty("ip"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.ip);
        if (message.port != null && message.hasOwnProperty("port"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.port);
        if (message.weight != null && message.hasOwnProperty("weight"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.weight);
        if (message.proto != null && message.proto.length)
            for (var i = 0; i < message.proto.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.proto[i]);
        if (message.ext != null && message.hasOwnProperty("ext"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.ext);
        return writer;
    };

    /**
     * Encodes the specified XmsgImClientServiceAddress message, length delimited. Does not implicitly {@link XmsgImClientServiceAddress.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImClientServiceAddress
     * @static
     * @param {IXmsgImClientServiceAddress} message XmsgImClientServiceAddress message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImClientServiceAddress.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImClientServiceAddress message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImClientServiceAddress
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImClientServiceAddress} XmsgImClientServiceAddress
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImClientServiceAddress.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImClientServiceAddress();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ip = reader.string();
                break;
            case 2:
                message.port = reader.uint32();
                break;
            case 3:
                message.weight = reader.uint32();
                break;
            case 4:
                if (!(message.proto && message.proto.length))
                    message.proto = [];
                message.proto.push(reader.string());
                break;
            case 5:
                message.ext = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImClientServiceAddress message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImClientServiceAddress
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImClientServiceAddress} XmsgImClientServiceAddress
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImClientServiceAddress.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImClientServiceAddress message.
     * @function verify
     * @memberof XmsgImClientServiceAddress
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImClientServiceAddress.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ip != null && message.hasOwnProperty("ip"))
            if (!$util.isString(message.ip))
                return "ip: string expected";
        if (message.port != null && message.hasOwnProperty("port"))
            if (!$util.isInteger(message.port))
                return "port: integer expected";
        if (message.weight != null && message.hasOwnProperty("weight"))
            if (!$util.isInteger(message.weight))
                return "weight: integer expected";
        if (message.proto != null && message.hasOwnProperty("proto")) {
            if (!Array.isArray(message.proto))
                return "proto: array expected";
            for (var i = 0; i < message.proto.length; ++i)
                if (!$util.isString(message.proto[i]))
                    return "proto: string[] expected";
        }
        if (message.ext != null && message.hasOwnProperty("ext"))
            if (!$util.isString(message.ext))
                return "ext: string expected";
        return null;
    };

    /**
     * Creates a XmsgImClientServiceAddress message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImClientServiceAddress
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImClientServiceAddress} XmsgImClientServiceAddress
     */
    XmsgImClientServiceAddress.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImClientServiceAddress)
            return object;
        var message = new $root.XmsgImClientServiceAddress();
        if (object.ip != null)
            message.ip = String(object.ip);
        if (object.port != null)
            message.port = object.port >>> 0;
        if (object.weight != null)
            message.weight = object.weight >>> 0;
        if (object.proto) {
            if (!Array.isArray(object.proto))
                throw TypeError(".XmsgImClientServiceAddress.proto: array expected");
            message.proto = [];
            for (var i = 0; i < object.proto.length; ++i)
                message.proto[i] = String(object.proto[i]);
        }
        if (object.ext != null)
            message.ext = String(object.ext);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImClientServiceAddress message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImClientServiceAddress
     * @static
     * @param {XmsgImClientServiceAddress} message XmsgImClientServiceAddress
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImClientServiceAddress.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.proto = [];
        if (options.defaults) {
            object.ip = "";
            object.port = 0;
            object.weight = 0;
            object.ext = "";
        }
        if (message.ip != null && message.hasOwnProperty("ip"))
            object.ip = message.ip;
        if (message.port != null && message.hasOwnProperty("port"))
            object.port = message.port;
        if (message.weight != null && message.hasOwnProperty("weight"))
            object.weight = message.weight;
        if (message.proto && message.proto.length) {
            object.proto = [];
            for (var j = 0; j < message.proto.length; ++j)
                object.proto[j] = message.proto[j];
        }
        if (message.ext != null && message.hasOwnProperty("ext"))
            object.ext = message.ext;
        return object;
    };

    /**
     * Converts this XmsgImClientServiceAddress to JSON.
     * @function toJSON
     * @memberof XmsgImClientServiceAddress
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImClientServiceAddress.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImClientServiceAddress;
})();

$root.XmsgImAuthRegSimpleReq = (function() {

    /**
     * Properties of a XmsgImAuthRegSimpleReq.
     * @exports IXmsgImAuthRegSimpleReq
     * @interface IXmsgImAuthRegSimpleReq
     * @property {string|null} [usr] XmsgImAuthRegSimpleReq usr
     * @property {string|null} [salt] XmsgImAuthRegSimpleReq salt
     * @property {string|null} [pwd] XmsgImAuthRegSimpleReq pwd
     * @property {IXmsgImClientDeviceInfo|null} [dev] XmsgImAuthRegSimpleReq dev
     */

    /**
     * Constructs a new XmsgImAuthRegSimpleReq.
     * @exports XmsgImAuthRegSimpleReq
     * @classdesc Represents a XmsgImAuthRegSimpleReq.
     * @implements IXmsgImAuthRegSimpleReq
     * @constructor
     * @param {IXmsgImAuthRegSimpleReq=} [properties] Properties to set
     */
    function XmsgImAuthRegSimpleReq(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImAuthRegSimpleReq usr.
     * @member {string} usr
     * @memberof XmsgImAuthRegSimpleReq
     * @instance
     */
    XmsgImAuthRegSimpleReq.prototype.usr = "";

    /**
     * XmsgImAuthRegSimpleReq salt.
     * @member {string} salt
     * @memberof XmsgImAuthRegSimpleReq
     * @instance
     */
    XmsgImAuthRegSimpleReq.prototype.salt = "";

    /**
     * XmsgImAuthRegSimpleReq pwd.
     * @member {string} pwd
     * @memberof XmsgImAuthRegSimpleReq
     * @instance
     */
    XmsgImAuthRegSimpleReq.prototype.pwd = "";

    /**
     * XmsgImAuthRegSimpleReq dev.
     * @member {IXmsgImClientDeviceInfo|null|undefined} dev
     * @memberof XmsgImAuthRegSimpleReq
     * @instance
     */
    XmsgImAuthRegSimpleReq.prototype.dev = null;

    /**
     * Creates a new XmsgImAuthRegSimpleReq instance using the specified properties.
     * @function create
     * @memberof XmsgImAuthRegSimpleReq
     * @static
     * @param {IXmsgImAuthRegSimpleReq=} [properties] Properties to set
     * @returns {XmsgImAuthRegSimpleReq} XmsgImAuthRegSimpleReq instance
     */
    XmsgImAuthRegSimpleReq.create = function create(properties) {
        return new XmsgImAuthRegSimpleReq(properties);
    };

    /**
     * Encodes the specified XmsgImAuthRegSimpleReq message. Does not implicitly {@link XmsgImAuthRegSimpleReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImAuthRegSimpleReq
     * @static
     * @param {IXmsgImAuthRegSimpleReq} message XmsgImAuthRegSimpleReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImAuthRegSimpleReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.usr != null && message.hasOwnProperty("usr"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.usr);
        if (message.salt != null && message.hasOwnProperty("salt"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.salt);
        if (message.pwd != null && message.hasOwnProperty("pwd"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.pwd);
        if (message.dev != null && message.hasOwnProperty("dev"))
            $root.XmsgImClientDeviceInfo.encode(message.dev, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImAuthRegSimpleReq message, length delimited. Does not implicitly {@link XmsgImAuthRegSimpleReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImAuthRegSimpleReq
     * @static
     * @param {IXmsgImAuthRegSimpleReq} message XmsgImAuthRegSimpleReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImAuthRegSimpleReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImAuthRegSimpleReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImAuthRegSimpleReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImAuthRegSimpleReq} XmsgImAuthRegSimpleReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImAuthRegSimpleReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImAuthRegSimpleReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.usr = reader.string();
                break;
            case 2:
                message.salt = reader.string();
                break;
            case 3:
                message.pwd = reader.string();
                break;
            case 4:
                message.dev = $root.XmsgImClientDeviceInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImAuthRegSimpleReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImAuthRegSimpleReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImAuthRegSimpleReq} XmsgImAuthRegSimpleReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImAuthRegSimpleReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImAuthRegSimpleReq message.
     * @function verify
     * @memberof XmsgImAuthRegSimpleReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImAuthRegSimpleReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.usr != null && message.hasOwnProperty("usr"))
            if (!$util.isString(message.usr))
                return "usr: string expected";
        if (message.salt != null && message.hasOwnProperty("salt"))
            if (!$util.isString(message.salt))
                return "salt: string expected";
        if (message.pwd != null && message.hasOwnProperty("pwd"))
            if (!$util.isString(message.pwd))
                return "pwd: string expected";
        if (message.dev != null && message.hasOwnProperty("dev")) {
            var error = $root.XmsgImClientDeviceInfo.verify(message.dev);
            if (error)
                return "dev." + error;
        }
        return null;
    };

    /**
     * Creates a XmsgImAuthRegSimpleReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImAuthRegSimpleReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImAuthRegSimpleReq} XmsgImAuthRegSimpleReq
     */
    XmsgImAuthRegSimpleReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImAuthRegSimpleReq)
            return object;
        var message = new $root.XmsgImAuthRegSimpleReq();
        if (object.usr != null)
            message.usr = String(object.usr);
        if (object.salt != null)
            message.salt = String(object.salt);
        if (object.pwd != null)
            message.pwd = String(object.pwd);
        if (object.dev != null) {
            if (typeof object.dev !== "object")
                throw TypeError(".XmsgImAuthRegSimpleReq.dev: object expected");
            message.dev = $root.XmsgImClientDeviceInfo.fromObject(object.dev);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImAuthRegSimpleReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImAuthRegSimpleReq
     * @static
     * @param {XmsgImAuthRegSimpleReq} message XmsgImAuthRegSimpleReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImAuthRegSimpleReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.usr = "";
            object.salt = "";
            object.pwd = "";
            object.dev = null;
        }
        if (message.usr != null && message.hasOwnProperty("usr"))
            object.usr = message.usr;
        if (message.salt != null && message.hasOwnProperty("salt"))
            object.salt = message.salt;
        if (message.pwd != null && message.hasOwnProperty("pwd"))
            object.pwd = message.pwd;
        if (message.dev != null && message.hasOwnProperty("dev"))
            object.dev = $root.XmsgImClientDeviceInfo.toObject(message.dev, options);
        return object;
    };

    /**
     * Converts this XmsgImAuthRegSimpleReq to JSON.
     * @function toJSON
     * @memberof XmsgImAuthRegSimpleReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImAuthRegSimpleReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImAuthRegSimpleReq;
})();

$root.XmsgImAuthRegSimpleRsp = (function() {

    /**
     * Properties of a XmsgImAuthRegSimpleRsp.
     * @exports IXmsgImAuthRegSimpleRsp
     * @interface IXmsgImAuthRegSimpleRsp
     * @property {string|null} [ext] XmsgImAuthRegSimpleRsp ext
     */

    /**
     * Constructs a new XmsgImAuthRegSimpleRsp.
     * @exports XmsgImAuthRegSimpleRsp
     * @classdesc Represents a XmsgImAuthRegSimpleRsp.
     * @implements IXmsgImAuthRegSimpleRsp
     * @constructor
     * @param {IXmsgImAuthRegSimpleRsp=} [properties] Properties to set
     */
    function XmsgImAuthRegSimpleRsp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImAuthRegSimpleRsp ext.
     * @member {string} ext
     * @memberof XmsgImAuthRegSimpleRsp
     * @instance
     */
    XmsgImAuthRegSimpleRsp.prototype.ext = "";

    /**
     * Creates a new XmsgImAuthRegSimpleRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImAuthRegSimpleRsp
     * @static
     * @param {IXmsgImAuthRegSimpleRsp=} [properties] Properties to set
     * @returns {XmsgImAuthRegSimpleRsp} XmsgImAuthRegSimpleRsp instance
     */
    XmsgImAuthRegSimpleRsp.create = function create(properties) {
        return new XmsgImAuthRegSimpleRsp(properties);
    };

    /**
     * Encodes the specified XmsgImAuthRegSimpleRsp message. Does not implicitly {@link XmsgImAuthRegSimpleRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImAuthRegSimpleRsp
     * @static
     * @param {IXmsgImAuthRegSimpleRsp} message XmsgImAuthRegSimpleRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImAuthRegSimpleRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ext != null && message.hasOwnProperty("ext"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.ext);
        return writer;
    };

    /**
     * Encodes the specified XmsgImAuthRegSimpleRsp message, length delimited. Does not implicitly {@link XmsgImAuthRegSimpleRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImAuthRegSimpleRsp
     * @static
     * @param {IXmsgImAuthRegSimpleRsp} message XmsgImAuthRegSimpleRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImAuthRegSimpleRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImAuthRegSimpleRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImAuthRegSimpleRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImAuthRegSimpleRsp} XmsgImAuthRegSimpleRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImAuthRegSimpleRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImAuthRegSimpleRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ext = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImAuthRegSimpleRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImAuthRegSimpleRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImAuthRegSimpleRsp} XmsgImAuthRegSimpleRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImAuthRegSimpleRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImAuthRegSimpleRsp message.
     * @function verify
     * @memberof XmsgImAuthRegSimpleRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImAuthRegSimpleRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ext != null && message.hasOwnProperty("ext"))
            if (!$util.isString(message.ext))
                return "ext: string expected";
        return null;
    };

    /**
     * Creates a XmsgImAuthRegSimpleRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImAuthRegSimpleRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImAuthRegSimpleRsp} XmsgImAuthRegSimpleRsp
     */
    XmsgImAuthRegSimpleRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImAuthRegSimpleRsp)
            return object;
        var message = new $root.XmsgImAuthRegSimpleRsp();
        if (object.ext != null)
            message.ext = String(object.ext);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImAuthRegSimpleRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImAuthRegSimpleRsp
     * @static
     * @param {XmsgImAuthRegSimpleRsp} message XmsgImAuthRegSimpleRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImAuthRegSimpleRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.ext = "";
        if (message.ext != null && message.hasOwnProperty("ext"))
            object.ext = message.ext;
        return object;
    };

    /**
     * Converts this XmsgImAuthRegSimpleRsp to JSON.
     * @function toJSON
     * @memberof XmsgImAuthRegSimpleRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImAuthRegSimpleRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImAuthRegSimpleRsp;
})();

$root.XmsgImHlrOtherUsrInfoQueryReq = (function() {

    /**
     * Properties of a XmsgImHlrOtherUsrInfoQueryReq.
     * @exports IXmsgImHlrOtherUsrInfoQueryReq
     * @interface IXmsgImHlrOtherUsrInfoQueryReq
     * @property {Array.<string>|null} [cgt] XmsgImHlrOtherUsrInfoQueryReq cgt
     */

    /**
     * Constructs a new XmsgImHlrOtherUsrInfoQueryReq.
     * @exports XmsgImHlrOtherUsrInfoQueryReq
     * @classdesc Represents a XmsgImHlrOtherUsrInfoQueryReq.
     * @implements IXmsgImHlrOtherUsrInfoQueryReq
     * @constructor
     * @param {IXmsgImHlrOtherUsrInfoQueryReq=} [properties] Properties to set
     */
    function XmsgImHlrOtherUsrInfoQueryReq(properties) {
        this.cgt = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrOtherUsrInfoQueryReq cgt.
     * @member {Array.<string>} cgt
     * @memberof XmsgImHlrOtherUsrInfoQueryReq
     * @instance
     */
    XmsgImHlrOtherUsrInfoQueryReq.prototype.cgt = $util.emptyArray;

    /**
     * Creates a new XmsgImHlrOtherUsrInfoQueryReq instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrOtherUsrInfoQueryReq
     * @static
     * @param {IXmsgImHlrOtherUsrInfoQueryReq=} [properties] Properties to set
     * @returns {XmsgImHlrOtherUsrInfoQueryReq} XmsgImHlrOtherUsrInfoQueryReq instance
     */
    XmsgImHlrOtherUsrInfoQueryReq.create = function create(properties) {
        return new XmsgImHlrOtherUsrInfoQueryReq(properties);
    };

    /**
     * Encodes the specified XmsgImHlrOtherUsrInfoQueryReq message. Does not implicitly {@link XmsgImHlrOtherUsrInfoQueryReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrOtherUsrInfoQueryReq
     * @static
     * @param {IXmsgImHlrOtherUsrInfoQueryReq} message XmsgImHlrOtherUsrInfoQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrOtherUsrInfoQueryReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.cgt.length)
            for (var i = 0; i < message.cgt.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt[i]);
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrOtherUsrInfoQueryReq message, length delimited. Does not implicitly {@link XmsgImHlrOtherUsrInfoQueryReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrOtherUsrInfoQueryReq
     * @static
     * @param {IXmsgImHlrOtherUsrInfoQueryReq} message XmsgImHlrOtherUsrInfoQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrOtherUsrInfoQueryReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrOtherUsrInfoQueryReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrOtherUsrInfoQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrOtherUsrInfoQueryReq} XmsgImHlrOtherUsrInfoQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrOtherUsrInfoQueryReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrOtherUsrInfoQueryReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.cgt && message.cgt.length))
                    message.cgt = [];
                message.cgt.push(reader.string());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrOtherUsrInfoQueryReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrOtherUsrInfoQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrOtherUsrInfoQueryReq} XmsgImHlrOtherUsrInfoQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrOtherUsrInfoQueryReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrOtherUsrInfoQueryReq message.
     * @function verify
     * @memberof XmsgImHlrOtherUsrInfoQueryReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrOtherUsrInfoQueryReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt")) {
            if (!Array.isArray(message.cgt))
                return "cgt: array expected";
            for (var i = 0; i < message.cgt.length; ++i)
                if (!$util.isString(message.cgt[i]))
                    return "cgt: string[] expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImHlrOtherUsrInfoQueryReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrOtherUsrInfoQueryReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrOtherUsrInfoQueryReq} XmsgImHlrOtherUsrInfoQueryReq
     */
    XmsgImHlrOtherUsrInfoQueryReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrOtherUsrInfoQueryReq)
            return object;
        var message = new $root.XmsgImHlrOtherUsrInfoQueryReq();
        if (object.cgt) {
            if (!Array.isArray(object.cgt))
                throw TypeError(".XmsgImHlrOtherUsrInfoQueryReq.cgt: array expected");
            message.cgt = [];
            for (var i = 0; i < object.cgt.length; ++i)
                message.cgt[i] = String(object.cgt[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrOtherUsrInfoQueryReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrOtherUsrInfoQueryReq
     * @static
     * @param {XmsgImHlrOtherUsrInfoQueryReq} message XmsgImHlrOtherUsrInfoQueryReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrOtherUsrInfoQueryReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.cgt = [];
        if (message.cgt && message.cgt.length) {
            object.cgt = [];
            for (var j = 0; j < message.cgt.length; ++j)
                object.cgt[j] = message.cgt[j];
        }
        return object;
    };

    /**
     * Converts this XmsgImHlrOtherUsrInfoQueryReq to JSON.
     * @function toJSON
     * @memberof XmsgImHlrOtherUsrInfoQueryReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrOtherUsrInfoQueryReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrOtherUsrInfoQueryReq;
})();

$root.XmsgImHlrOtherUsrInfoQueryRsp = (function() {

    /**
     * Properties of a XmsgImHlrOtherUsrInfoQueryRsp.
     * @exports IXmsgImHlrOtherUsrInfoQueryRsp
     * @interface IXmsgImHlrOtherUsrInfoQueryRsp
     * @property {Object.<string,IXmsgImHlrOtherUsrInfo>|null} [usrInfo] XmsgImHlrOtherUsrInfoQueryRsp usrInfo
     */

    /**
     * Constructs a new XmsgImHlrOtherUsrInfoQueryRsp.
     * @exports XmsgImHlrOtherUsrInfoQueryRsp
     * @classdesc Represents a XmsgImHlrOtherUsrInfoQueryRsp.
     * @implements IXmsgImHlrOtherUsrInfoQueryRsp
     * @constructor
     * @param {IXmsgImHlrOtherUsrInfoQueryRsp=} [properties] Properties to set
     */
    function XmsgImHlrOtherUsrInfoQueryRsp(properties) {
        this.usrInfo = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrOtherUsrInfoQueryRsp usrInfo.
     * @member {Object.<string,IXmsgImHlrOtherUsrInfo>} usrInfo
     * @memberof XmsgImHlrOtherUsrInfoQueryRsp
     * @instance
     */
    XmsgImHlrOtherUsrInfoQueryRsp.prototype.usrInfo = $util.emptyObject;

    /**
     * Creates a new XmsgImHlrOtherUsrInfoQueryRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrOtherUsrInfoQueryRsp
     * @static
     * @param {IXmsgImHlrOtherUsrInfoQueryRsp=} [properties] Properties to set
     * @returns {XmsgImHlrOtherUsrInfoQueryRsp} XmsgImHlrOtherUsrInfoQueryRsp instance
     */
    XmsgImHlrOtherUsrInfoQueryRsp.create = function create(properties) {
        return new XmsgImHlrOtherUsrInfoQueryRsp(properties);
    };

    /**
     * Encodes the specified XmsgImHlrOtherUsrInfoQueryRsp message. Does not implicitly {@link XmsgImHlrOtherUsrInfoQueryRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrOtherUsrInfoQueryRsp
     * @static
     * @param {IXmsgImHlrOtherUsrInfoQueryRsp} message XmsgImHlrOtherUsrInfoQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrOtherUsrInfoQueryRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.usrInfo != null && message.hasOwnProperty("usrInfo"))
            for (var keys = Object.keys(message.usrInfo), i = 0; i < keys.length; ++i) {
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                $root.XmsgImHlrOtherUsrInfo.encode(message.usrInfo[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
            }
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrOtherUsrInfoQueryRsp message, length delimited. Does not implicitly {@link XmsgImHlrOtherUsrInfoQueryRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrOtherUsrInfoQueryRsp
     * @static
     * @param {IXmsgImHlrOtherUsrInfoQueryRsp} message XmsgImHlrOtherUsrInfoQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrOtherUsrInfoQueryRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrOtherUsrInfoQueryRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrOtherUsrInfoQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrOtherUsrInfoQueryRsp} XmsgImHlrOtherUsrInfoQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrOtherUsrInfoQueryRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrOtherUsrInfoQueryRsp(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                reader.skip().pos++;
                if (message.usrInfo === $util.emptyObject)
                    message.usrInfo = {};
                key = reader.string();
                reader.pos++;
                message.usrInfo[key] = $root.XmsgImHlrOtherUsrInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrOtherUsrInfoQueryRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrOtherUsrInfoQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrOtherUsrInfoQueryRsp} XmsgImHlrOtherUsrInfoQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrOtherUsrInfoQueryRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrOtherUsrInfoQueryRsp message.
     * @function verify
     * @memberof XmsgImHlrOtherUsrInfoQueryRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrOtherUsrInfoQueryRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.usrInfo != null && message.hasOwnProperty("usrInfo")) {
            if (!$util.isObject(message.usrInfo))
                return "usrInfo: object expected";
            var key = Object.keys(message.usrInfo);
            for (var i = 0; i < key.length; ++i) {
                var error = $root.XmsgImHlrOtherUsrInfo.verify(message.usrInfo[key[i]]);
                if (error)
                    return "usrInfo." + error;
            }
        }
        return null;
    };

    /**
     * Creates a XmsgImHlrOtherUsrInfoQueryRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrOtherUsrInfoQueryRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrOtherUsrInfoQueryRsp} XmsgImHlrOtherUsrInfoQueryRsp
     */
    XmsgImHlrOtherUsrInfoQueryRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrOtherUsrInfoQueryRsp)
            return object;
        var message = new $root.XmsgImHlrOtherUsrInfoQueryRsp();
        if (object.usrInfo) {
            if (typeof object.usrInfo !== "object")
                throw TypeError(".XmsgImHlrOtherUsrInfoQueryRsp.usrInfo: object expected");
            message.usrInfo = {};
            for (var keys = Object.keys(object.usrInfo), i = 0; i < keys.length; ++i) {
                if (typeof object.usrInfo[keys[i]] !== "object")
                    throw TypeError(".XmsgImHlrOtherUsrInfoQueryRsp.usrInfo: object expected");
                message.usrInfo[keys[i]] = $root.XmsgImHlrOtherUsrInfo.fromObject(object.usrInfo[keys[i]]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrOtherUsrInfoQueryRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrOtherUsrInfoQueryRsp
     * @static
     * @param {XmsgImHlrOtherUsrInfoQueryRsp} message XmsgImHlrOtherUsrInfoQueryRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrOtherUsrInfoQueryRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.usrInfo = {};
        var keys2;
        if (message.usrInfo && (keys2 = Object.keys(message.usrInfo)).length) {
            object.usrInfo = {};
            for (var j = 0; j < keys2.length; ++j)
                object.usrInfo[keys2[j]] = $root.XmsgImHlrOtherUsrInfo.toObject(message.usrInfo[keys2[j]], options);
        }
        return object;
    };

    /**
     * Converts this XmsgImHlrOtherUsrInfoQueryRsp to JSON.
     * @function toJSON
     * @memberof XmsgImHlrOtherUsrInfoQueryRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrOtherUsrInfoQueryRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrOtherUsrInfoQueryRsp;
})();

$root.XmsgImHlrOtherUsrInfo = (function() {

    /**
     * Properties of a XmsgImHlrOtherUsrInfo.
     * @exports IXmsgImHlrOtherUsrInfo
     * @interface IXmsgImHlrOtherUsrInfo
     * @property {Object.<string,string>|null} [info] XmsgImHlrOtherUsrInfo info
     */

    /**
     * Constructs a new XmsgImHlrOtherUsrInfo.
     * @exports XmsgImHlrOtherUsrInfo
     * @classdesc Represents a XmsgImHlrOtherUsrInfo.
     * @implements IXmsgImHlrOtherUsrInfo
     * @constructor
     * @param {IXmsgImHlrOtherUsrInfo=} [properties] Properties to set
     */
    function XmsgImHlrOtherUsrInfo(properties) {
        this.info = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrOtherUsrInfo info.
     * @member {Object.<string,string>} info
     * @memberof XmsgImHlrOtherUsrInfo
     * @instance
     */
    XmsgImHlrOtherUsrInfo.prototype.info = $util.emptyObject;

    /**
     * Creates a new XmsgImHlrOtherUsrInfo instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrOtherUsrInfo
     * @static
     * @param {IXmsgImHlrOtherUsrInfo=} [properties] Properties to set
     * @returns {XmsgImHlrOtherUsrInfo} XmsgImHlrOtherUsrInfo instance
     */
    XmsgImHlrOtherUsrInfo.create = function create(properties) {
        return new XmsgImHlrOtherUsrInfo(properties);
    };

    /**
     * Encodes the specified XmsgImHlrOtherUsrInfo message. Does not implicitly {@link XmsgImHlrOtherUsrInfo.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrOtherUsrInfo
     * @static
     * @param {IXmsgImHlrOtherUsrInfo} message XmsgImHlrOtherUsrInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrOtherUsrInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.info != null && message.hasOwnProperty("info"))
            for (var keys = Object.keys(message.info), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.info[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrOtherUsrInfo message, length delimited. Does not implicitly {@link XmsgImHlrOtherUsrInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrOtherUsrInfo
     * @static
     * @param {IXmsgImHlrOtherUsrInfo} message XmsgImHlrOtherUsrInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrOtherUsrInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrOtherUsrInfo message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrOtherUsrInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrOtherUsrInfo} XmsgImHlrOtherUsrInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrOtherUsrInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrOtherUsrInfo(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                reader.skip().pos++;
                if (message.info === $util.emptyObject)
                    message.info = {};
                key = reader.string();
                reader.pos++;
                message.info[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrOtherUsrInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrOtherUsrInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrOtherUsrInfo} XmsgImHlrOtherUsrInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrOtherUsrInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrOtherUsrInfo message.
     * @function verify
     * @memberof XmsgImHlrOtherUsrInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrOtherUsrInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            if (!$util.isObject(message.info))
                return "info: object expected";
            var key = Object.keys(message.info);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.info[key[i]]))
                    return "info: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImHlrOtherUsrInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrOtherUsrInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrOtherUsrInfo} XmsgImHlrOtherUsrInfo
     */
    XmsgImHlrOtherUsrInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrOtherUsrInfo)
            return object;
        var message = new $root.XmsgImHlrOtherUsrInfo();
        if (object.info) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImHlrOtherUsrInfo.info: object expected");
            message.info = {};
            for (var keys = Object.keys(object.info), i = 0; i < keys.length; ++i)
                message.info[keys[i]] = String(object.info[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrOtherUsrInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrOtherUsrInfo
     * @static
     * @param {XmsgImHlrOtherUsrInfo} message XmsgImHlrOtherUsrInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrOtherUsrInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.info = {};
        var keys2;
        if (message.info && (keys2 = Object.keys(message.info)).length) {
            object.info = {};
            for (var j = 0; j < keys2.length; ++j)
                object.info[keys2[j]] = message.info[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImHlrOtherUsrInfo to JSON.
     * @function toJSON
     * @memberof XmsgImHlrOtherUsrInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrOtherUsrInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrOtherUsrInfo;
})();

$root.XmsgFileUploadSimpleReq = (function() {

    /**
     * Properties of a XmsgFileUploadSimpleReq.
     * @exports IXmsgFileUploadSimpleReq
     * @interface IXmsgFileUploadSimpleReq
     * @property {string|null} [fileName] XmsgFileUploadSimpleReq fileName
     * @property {number|Long|null} [fileSize] XmsgFileUploadSimpleReq fileSize
     * @property {Object.<string,string>|null} [ext] XmsgFileUploadSimpleReq ext
     */

    /**
     * Constructs a new XmsgFileUploadSimpleReq.
     * @exports XmsgFileUploadSimpleReq
     * @classdesc Represents a XmsgFileUploadSimpleReq.
     * @implements IXmsgFileUploadSimpleReq
     * @constructor
     * @param {IXmsgFileUploadSimpleReq=} [properties] Properties to set
     */
    function XmsgFileUploadSimpleReq(properties) {
        this.ext = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgFileUploadSimpleReq fileName.
     * @member {string} fileName
     * @memberof XmsgFileUploadSimpleReq
     * @instance
     */
    XmsgFileUploadSimpleReq.prototype.fileName = "";

    /**
     * XmsgFileUploadSimpleReq fileSize.
     * @member {number|Long} fileSize
     * @memberof XmsgFileUploadSimpleReq
     * @instance
     */
    XmsgFileUploadSimpleReq.prototype.fileSize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgFileUploadSimpleReq ext.
     * @member {Object.<string,string>} ext
     * @memberof XmsgFileUploadSimpleReq
     * @instance
     */
    XmsgFileUploadSimpleReq.prototype.ext = $util.emptyObject;

    /**
     * Creates a new XmsgFileUploadSimpleReq instance using the specified properties.
     * @function create
     * @memberof XmsgFileUploadSimpleReq
     * @static
     * @param {IXmsgFileUploadSimpleReq=} [properties] Properties to set
     * @returns {XmsgFileUploadSimpleReq} XmsgFileUploadSimpleReq instance
     */
    XmsgFileUploadSimpleReq.create = function create(properties) {
        return new XmsgFileUploadSimpleReq(properties);
    };

    /**
     * Encodes the specified XmsgFileUploadSimpleReq message. Does not implicitly {@link XmsgFileUploadSimpleReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgFileUploadSimpleReq
     * @static
     * @param {IXmsgFileUploadSimpleReq} message XmsgFileUploadSimpleReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgFileUploadSimpleReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.fileName != null && message.hasOwnProperty("fileName"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.fileName);
        if (message.fileSize != null && message.hasOwnProperty("fileSize"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.fileSize);
        if (message.ext != null && message.hasOwnProperty("ext"))
            for (var keys = Object.keys(message.ext), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.ext[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgFileUploadSimpleReq message, length delimited. Does not implicitly {@link XmsgFileUploadSimpleReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgFileUploadSimpleReq
     * @static
     * @param {IXmsgFileUploadSimpleReq} message XmsgFileUploadSimpleReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgFileUploadSimpleReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgFileUploadSimpleReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgFileUploadSimpleReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgFileUploadSimpleReq} XmsgFileUploadSimpleReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgFileUploadSimpleReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgFileUploadSimpleReq(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.fileName = reader.string();
                break;
            case 2:
                message.fileSize = reader.uint64();
                break;
            case 3:
                reader.skip().pos++;
                if (message.ext === $util.emptyObject)
                    message.ext = {};
                key = reader.string();
                reader.pos++;
                message.ext[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgFileUploadSimpleReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgFileUploadSimpleReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgFileUploadSimpleReq} XmsgFileUploadSimpleReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgFileUploadSimpleReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgFileUploadSimpleReq message.
     * @function verify
     * @memberof XmsgFileUploadSimpleReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgFileUploadSimpleReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.fileName != null && message.hasOwnProperty("fileName"))
            if (!$util.isString(message.fileName))
                return "fileName: string expected";
        if (message.fileSize != null && message.hasOwnProperty("fileSize"))
            if (!$util.isInteger(message.fileSize) && !(message.fileSize && $util.isInteger(message.fileSize.low) && $util.isInteger(message.fileSize.high)))
                return "fileSize: integer|Long expected";
        if (message.ext != null && message.hasOwnProperty("ext")) {
            if (!$util.isObject(message.ext))
                return "ext: object expected";
            var key = Object.keys(message.ext);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.ext[key[i]]))
                    return "ext: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgFileUploadSimpleReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgFileUploadSimpleReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgFileUploadSimpleReq} XmsgFileUploadSimpleReq
     */
    XmsgFileUploadSimpleReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgFileUploadSimpleReq)
            return object;
        var message = new $root.XmsgFileUploadSimpleReq();
        if (object.fileName != null)
            message.fileName = String(object.fileName);
        if (object.fileSize != null)
            if ($util.Long)
                (message.fileSize = $util.Long.fromValue(object.fileSize)).unsigned = true;
            else if (typeof object.fileSize === "string")
                message.fileSize = parseInt(object.fileSize, 10);
            else if (typeof object.fileSize === "number")
                message.fileSize = object.fileSize;
            else if (typeof object.fileSize === "object")
                message.fileSize = new $util.LongBits(object.fileSize.low >>> 0, object.fileSize.high >>> 0).toNumber(true);
        if (object.ext) {
            if (typeof object.ext !== "object")
                throw TypeError(".XmsgFileUploadSimpleReq.ext: object expected");
            message.ext = {};
            for (var keys = Object.keys(object.ext), i = 0; i < keys.length; ++i)
                message.ext[keys[i]] = String(object.ext[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgFileUploadSimpleReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgFileUploadSimpleReq
     * @static
     * @param {XmsgFileUploadSimpleReq} message XmsgFileUploadSimpleReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgFileUploadSimpleReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.ext = {};
        if (options.defaults) {
            object.fileName = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.fileSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.fileSize = options.longs === String ? "0" : 0;
        }
        if (message.fileName != null && message.hasOwnProperty("fileName"))
            object.fileName = message.fileName;
        if (message.fileSize != null && message.hasOwnProperty("fileSize"))
            if (typeof message.fileSize === "number")
                object.fileSize = options.longs === String ? String(message.fileSize) : message.fileSize;
            else
                object.fileSize = options.longs === String ? $util.Long.prototype.toString.call(message.fileSize) : options.longs === Number ? new $util.LongBits(message.fileSize.low >>> 0, message.fileSize.high >>> 0).toNumber(true) : message.fileSize;
        var keys2;
        if (message.ext && (keys2 = Object.keys(message.ext)).length) {
            object.ext = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ext[keys2[j]] = message.ext[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgFileUploadSimpleReq to JSON.
     * @function toJSON
     * @memberof XmsgFileUploadSimpleReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgFileUploadSimpleReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgFileUploadSimpleReq;
})();

$root.XmsgFileUploadSimpleRsp = (function() {

    /**
     * Properties of a XmsgFileUploadSimpleRsp.
     * @exports IXmsgFileUploadSimpleRsp
     * @interface IXmsgFileUploadSimpleRsp
     * @property {string|null} [fid] XmsgFileUploadSimpleRsp fid
     * @property {string|null} [hashVal] XmsgFileUploadSimpleRsp hashVal
     * @property {Object.<string,string>|null} [ext] XmsgFileUploadSimpleRsp ext
     */

    /**
     * Constructs a new XmsgFileUploadSimpleRsp.
     * @exports XmsgFileUploadSimpleRsp
     * @classdesc Represents a XmsgFileUploadSimpleRsp.
     * @implements IXmsgFileUploadSimpleRsp
     * @constructor
     * @param {IXmsgFileUploadSimpleRsp=} [properties] Properties to set
     */
    function XmsgFileUploadSimpleRsp(properties) {
        this.ext = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgFileUploadSimpleRsp fid.
     * @member {string} fid
     * @memberof XmsgFileUploadSimpleRsp
     * @instance
     */
    XmsgFileUploadSimpleRsp.prototype.fid = "";

    /**
     * XmsgFileUploadSimpleRsp hashVal.
     * @member {string} hashVal
     * @memberof XmsgFileUploadSimpleRsp
     * @instance
     */
    XmsgFileUploadSimpleRsp.prototype.hashVal = "";

    /**
     * XmsgFileUploadSimpleRsp ext.
     * @member {Object.<string,string>} ext
     * @memberof XmsgFileUploadSimpleRsp
     * @instance
     */
    XmsgFileUploadSimpleRsp.prototype.ext = $util.emptyObject;

    /**
     * Creates a new XmsgFileUploadSimpleRsp instance using the specified properties.
     * @function create
     * @memberof XmsgFileUploadSimpleRsp
     * @static
     * @param {IXmsgFileUploadSimpleRsp=} [properties] Properties to set
     * @returns {XmsgFileUploadSimpleRsp} XmsgFileUploadSimpleRsp instance
     */
    XmsgFileUploadSimpleRsp.create = function create(properties) {
        return new XmsgFileUploadSimpleRsp(properties);
    };

    /**
     * Encodes the specified XmsgFileUploadSimpleRsp message. Does not implicitly {@link XmsgFileUploadSimpleRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgFileUploadSimpleRsp
     * @static
     * @param {IXmsgFileUploadSimpleRsp} message XmsgFileUploadSimpleRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgFileUploadSimpleRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.fid != null && message.hasOwnProperty("fid"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.fid);
        if (message.hashVal != null && message.hasOwnProperty("hashVal"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.hashVal);
        if (message.ext != null && message.hasOwnProperty("ext"))
            for (var keys = Object.keys(message.ext), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.ext[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgFileUploadSimpleRsp message, length delimited. Does not implicitly {@link XmsgFileUploadSimpleRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgFileUploadSimpleRsp
     * @static
     * @param {IXmsgFileUploadSimpleRsp} message XmsgFileUploadSimpleRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgFileUploadSimpleRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgFileUploadSimpleRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgFileUploadSimpleRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgFileUploadSimpleRsp} XmsgFileUploadSimpleRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgFileUploadSimpleRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgFileUploadSimpleRsp(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.fid = reader.string();
                break;
            case 2:
                message.hashVal = reader.string();
                break;
            case 3:
                reader.skip().pos++;
                if (message.ext === $util.emptyObject)
                    message.ext = {};
                key = reader.string();
                reader.pos++;
                message.ext[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgFileUploadSimpleRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgFileUploadSimpleRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgFileUploadSimpleRsp} XmsgFileUploadSimpleRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgFileUploadSimpleRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgFileUploadSimpleRsp message.
     * @function verify
     * @memberof XmsgFileUploadSimpleRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgFileUploadSimpleRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.fid != null && message.hasOwnProperty("fid"))
            if (!$util.isString(message.fid))
                return "fid: string expected";
        if (message.hashVal != null && message.hasOwnProperty("hashVal"))
            if (!$util.isString(message.hashVal))
                return "hashVal: string expected";
        if (message.ext != null && message.hasOwnProperty("ext")) {
            if (!$util.isObject(message.ext))
                return "ext: object expected";
            var key = Object.keys(message.ext);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.ext[key[i]]))
                    return "ext: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgFileUploadSimpleRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgFileUploadSimpleRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgFileUploadSimpleRsp} XmsgFileUploadSimpleRsp
     */
    XmsgFileUploadSimpleRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgFileUploadSimpleRsp)
            return object;
        var message = new $root.XmsgFileUploadSimpleRsp();
        if (object.fid != null)
            message.fid = String(object.fid);
        if (object.hashVal != null)
            message.hashVal = String(object.hashVal);
        if (object.ext) {
            if (typeof object.ext !== "object")
                throw TypeError(".XmsgFileUploadSimpleRsp.ext: object expected");
            message.ext = {};
            for (var keys = Object.keys(object.ext), i = 0; i < keys.length; ++i)
                message.ext[keys[i]] = String(object.ext[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgFileUploadSimpleRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgFileUploadSimpleRsp
     * @static
     * @param {XmsgFileUploadSimpleRsp} message XmsgFileUploadSimpleRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgFileUploadSimpleRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.ext = {};
        if (options.defaults) {
            object.fid = "";
            object.hashVal = "";
        }
        if (message.fid != null && message.hasOwnProperty("fid"))
            object.fid = message.fid;
        if (message.hashVal != null && message.hasOwnProperty("hashVal"))
            object.hashVal = message.hashVal;
        var keys2;
        if (message.ext && (keys2 = Object.keys(message.ext)).length) {
            object.ext = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ext[keys2[j]] = message.ext[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgFileUploadSimpleRsp to JSON.
     * @function toJSON
     * @memberof XmsgFileUploadSimpleRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgFileUploadSimpleRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgFileUploadSimpleRsp;
})();

$root.XmsgFileDownloadSimpleReq = (function() {

    /**
     * Properties of a XmsgFileDownloadSimpleReq.
     * @exports IXmsgFileDownloadSimpleReq
     * @interface IXmsgFileDownloadSimpleReq
     * @property {string|null} [fid] XmsgFileDownloadSimpleReq fid
     * @property {string|null} [cgt] XmsgFileDownloadSimpleReq cgt
     * @property {number|Long|null} [offset] XmsgFileDownloadSimpleReq offset
     * @property {number|Long|null} [len] XmsgFileDownloadSimpleReq len
     * @property {Object.<string,string>|null} [ext] XmsgFileDownloadSimpleReq ext
     */

    /**
     * Constructs a new XmsgFileDownloadSimpleReq.
     * @exports XmsgFileDownloadSimpleReq
     * @classdesc Represents a XmsgFileDownloadSimpleReq.
     * @implements IXmsgFileDownloadSimpleReq
     * @constructor
     * @param {IXmsgFileDownloadSimpleReq=} [properties] Properties to set
     */
    function XmsgFileDownloadSimpleReq(properties) {
        this.ext = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgFileDownloadSimpleReq fid.
     * @member {string} fid
     * @memberof XmsgFileDownloadSimpleReq
     * @instance
     */
    XmsgFileDownloadSimpleReq.prototype.fid = "";

    /**
     * XmsgFileDownloadSimpleReq cgt.
     * @member {string} cgt
     * @memberof XmsgFileDownloadSimpleReq
     * @instance
     */
    XmsgFileDownloadSimpleReq.prototype.cgt = "";

    /**
     * XmsgFileDownloadSimpleReq offset.
     * @member {number|Long} offset
     * @memberof XmsgFileDownloadSimpleReq
     * @instance
     */
    XmsgFileDownloadSimpleReq.prototype.offset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgFileDownloadSimpleReq len.
     * @member {number|Long} len
     * @memberof XmsgFileDownloadSimpleReq
     * @instance
     */
    XmsgFileDownloadSimpleReq.prototype.len = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgFileDownloadSimpleReq ext.
     * @member {Object.<string,string>} ext
     * @memberof XmsgFileDownloadSimpleReq
     * @instance
     */
    XmsgFileDownloadSimpleReq.prototype.ext = $util.emptyObject;

    /**
     * Creates a new XmsgFileDownloadSimpleReq instance using the specified properties.
     * @function create
     * @memberof XmsgFileDownloadSimpleReq
     * @static
     * @param {IXmsgFileDownloadSimpleReq=} [properties] Properties to set
     * @returns {XmsgFileDownloadSimpleReq} XmsgFileDownloadSimpleReq instance
     */
    XmsgFileDownloadSimpleReq.create = function create(properties) {
        return new XmsgFileDownloadSimpleReq(properties);
    };

    /**
     * Encodes the specified XmsgFileDownloadSimpleReq message. Does not implicitly {@link XmsgFileDownloadSimpleReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgFileDownloadSimpleReq
     * @static
     * @param {IXmsgFileDownloadSimpleReq} message XmsgFileDownloadSimpleReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgFileDownloadSimpleReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.fid != null && message.hasOwnProperty("fid"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.fid);
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.cgt);
        if (message.offset != null && message.hasOwnProperty("offset"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.offset);
        if (message.len != null && message.hasOwnProperty("len"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.len);
        if (message.ext != null && message.hasOwnProperty("ext"))
            for (var keys = Object.keys(message.ext), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.ext[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgFileDownloadSimpleReq message, length delimited. Does not implicitly {@link XmsgFileDownloadSimpleReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgFileDownloadSimpleReq
     * @static
     * @param {IXmsgFileDownloadSimpleReq} message XmsgFileDownloadSimpleReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgFileDownloadSimpleReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgFileDownloadSimpleReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgFileDownloadSimpleReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgFileDownloadSimpleReq} XmsgFileDownloadSimpleReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgFileDownloadSimpleReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgFileDownloadSimpleReq(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.fid = reader.string();
                break;
            case 2:
                message.cgt = reader.string();
                break;
            case 3:
                message.offset = reader.uint64();
                break;
            case 4:
                message.len = reader.uint64();
                break;
            case 5:
                reader.skip().pos++;
                if (message.ext === $util.emptyObject)
                    message.ext = {};
                key = reader.string();
                reader.pos++;
                message.ext[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgFileDownloadSimpleReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgFileDownloadSimpleReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgFileDownloadSimpleReq} XmsgFileDownloadSimpleReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgFileDownloadSimpleReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgFileDownloadSimpleReq message.
     * @function verify
     * @memberof XmsgFileDownloadSimpleReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgFileDownloadSimpleReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.fid != null && message.hasOwnProperty("fid"))
            if (!$util.isString(message.fid))
                return "fid: string expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.offset != null && message.hasOwnProperty("offset"))
            if (!$util.isInteger(message.offset) && !(message.offset && $util.isInteger(message.offset.low) && $util.isInteger(message.offset.high)))
                return "offset: integer|Long expected";
        if (message.len != null && message.hasOwnProperty("len"))
            if (!$util.isInteger(message.len) && !(message.len && $util.isInteger(message.len.low) && $util.isInteger(message.len.high)))
                return "len: integer|Long expected";
        if (message.ext != null && message.hasOwnProperty("ext")) {
            if (!$util.isObject(message.ext))
                return "ext: object expected";
            var key = Object.keys(message.ext);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.ext[key[i]]))
                    return "ext: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgFileDownloadSimpleReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgFileDownloadSimpleReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgFileDownloadSimpleReq} XmsgFileDownloadSimpleReq
     */
    XmsgFileDownloadSimpleReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgFileDownloadSimpleReq)
            return object;
        var message = new $root.XmsgFileDownloadSimpleReq();
        if (object.fid != null)
            message.fid = String(object.fid);
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.offset != null)
            if ($util.Long)
                (message.offset = $util.Long.fromValue(object.offset)).unsigned = true;
            else if (typeof object.offset === "string")
                message.offset = parseInt(object.offset, 10);
            else if (typeof object.offset === "number")
                message.offset = object.offset;
            else if (typeof object.offset === "object")
                message.offset = new $util.LongBits(object.offset.low >>> 0, object.offset.high >>> 0).toNumber(true);
        if (object.len != null)
            if ($util.Long)
                (message.len = $util.Long.fromValue(object.len)).unsigned = true;
            else if (typeof object.len === "string")
                message.len = parseInt(object.len, 10);
            else if (typeof object.len === "number")
                message.len = object.len;
            else if (typeof object.len === "object")
                message.len = new $util.LongBits(object.len.low >>> 0, object.len.high >>> 0).toNumber(true);
        if (object.ext) {
            if (typeof object.ext !== "object")
                throw TypeError(".XmsgFileDownloadSimpleReq.ext: object expected");
            message.ext = {};
            for (var keys = Object.keys(object.ext), i = 0; i < keys.length; ++i)
                message.ext[keys[i]] = String(object.ext[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgFileDownloadSimpleReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgFileDownloadSimpleReq
     * @static
     * @param {XmsgFileDownloadSimpleReq} message XmsgFileDownloadSimpleReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgFileDownloadSimpleReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.ext = {};
        if (options.defaults) {
            object.fid = "";
            object.cgt = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.offset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.offset = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.len = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.len = options.longs === String ? "0" : 0;
        }
        if (message.fid != null && message.hasOwnProperty("fid"))
            object.fid = message.fid;
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.offset != null && message.hasOwnProperty("offset"))
            if (typeof message.offset === "number")
                object.offset = options.longs === String ? String(message.offset) : message.offset;
            else
                object.offset = options.longs === String ? $util.Long.prototype.toString.call(message.offset) : options.longs === Number ? new $util.LongBits(message.offset.low >>> 0, message.offset.high >>> 0).toNumber(true) : message.offset;
        if (message.len != null && message.hasOwnProperty("len"))
            if (typeof message.len === "number")
                object.len = options.longs === String ? String(message.len) : message.len;
            else
                object.len = options.longs === String ? $util.Long.prototype.toString.call(message.len) : options.longs === Number ? new $util.LongBits(message.len.low >>> 0, message.len.high >>> 0).toNumber(true) : message.len;
        var keys2;
        if (message.ext && (keys2 = Object.keys(message.ext)).length) {
            object.ext = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ext[keys2[j]] = message.ext[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgFileDownloadSimpleReq to JSON.
     * @function toJSON
     * @memberof XmsgFileDownloadSimpleReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgFileDownloadSimpleReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgFileDownloadSimpleReq;
})();

$root.XmsgFileDownloadSimpleRsp = (function() {

    /**
     * Properties of a XmsgFileDownloadSimpleRsp.
     * @exports IXmsgFileDownloadSimpleRsp
     * @interface IXmsgFileDownloadSimpleRsp
     * @property {string|null} [fileName] XmsgFileDownloadSimpleRsp fileName
     * @property {number|Long|null} [fileSize] XmsgFileDownloadSimpleRsp fileSize
     * @property {string|null} [hashVal] XmsgFileDownloadSimpleRsp hashVal
     * @property {number|Long|null} [gts] XmsgFileDownloadSimpleRsp gts
     * @property {Object.<string,string>|null} [ext] XmsgFileDownloadSimpleRsp ext
     */

    /**
     * Constructs a new XmsgFileDownloadSimpleRsp.
     * @exports XmsgFileDownloadSimpleRsp
     * @classdesc Represents a XmsgFileDownloadSimpleRsp.
     * @implements IXmsgFileDownloadSimpleRsp
     * @constructor
     * @param {IXmsgFileDownloadSimpleRsp=} [properties] Properties to set
     */
    function XmsgFileDownloadSimpleRsp(properties) {
        this.ext = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgFileDownloadSimpleRsp fileName.
     * @member {string} fileName
     * @memberof XmsgFileDownloadSimpleRsp
     * @instance
     */
    XmsgFileDownloadSimpleRsp.prototype.fileName = "";

    /**
     * XmsgFileDownloadSimpleRsp fileSize.
     * @member {number|Long} fileSize
     * @memberof XmsgFileDownloadSimpleRsp
     * @instance
     */
    XmsgFileDownloadSimpleRsp.prototype.fileSize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgFileDownloadSimpleRsp hashVal.
     * @member {string} hashVal
     * @memberof XmsgFileDownloadSimpleRsp
     * @instance
     */
    XmsgFileDownloadSimpleRsp.prototype.hashVal = "";

    /**
     * XmsgFileDownloadSimpleRsp gts.
     * @member {number|Long} gts
     * @memberof XmsgFileDownloadSimpleRsp
     * @instance
     */
    XmsgFileDownloadSimpleRsp.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgFileDownloadSimpleRsp ext.
     * @member {Object.<string,string>} ext
     * @memberof XmsgFileDownloadSimpleRsp
     * @instance
     */
    XmsgFileDownloadSimpleRsp.prototype.ext = $util.emptyObject;

    /**
     * Creates a new XmsgFileDownloadSimpleRsp instance using the specified properties.
     * @function create
     * @memberof XmsgFileDownloadSimpleRsp
     * @static
     * @param {IXmsgFileDownloadSimpleRsp=} [properties] Properties to set
     * @returns {XmsgFileDownloadSimpleRsp} XmsgFileDownloadSimpleRsp instance
     */
    XmsgFileDownloadSimpleRsp.create = function create(properties) {
        return new XmsgFileDownloadSimpleRsp(properties);
    };

    /**
     * Encodes the specified XmsgFileDownloadSimpleRsp message. Does not implicitly {@link XmsgFileDownloadSimpleRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgFileDownloadSimpleRsp
     * @static
     * @param {IXmsgFileDownloadSimpleRsp} message XmsgFileDownloadSimpleRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgFileDownloadSimpleRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.fileName != null && message.hasOwnProperty("fileName"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.fileName);
        if (message.fileSize != null && message.hasOwnProperty("fileSize"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.fileSize);
        if (message.hashVal != null && message.hasOwnProperty("hashVal"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.hashVal);
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.gts);
        if (message.ext != null && message.hasOwnProperty("ext"))
            for (var keys = Object.keys(message.ext), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.ext[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgFileDownloadSimpleRsp message, length delimited. Does not implicitly {@link XmsgFileDownloadSimpleRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgFileDownloadSimpleRsp
     * @static
     * @param {IXmsgFileDownloadSimpleRsp} message XmsgFileDownloadSimpleRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgFileDownloadSimpleRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgFileDownloadSimpleRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgFileDownloadSimpleRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgFileDownloadSimpleRsp} XmsgFileDownloadSimpleRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgFileDownloadSimpleRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgFileDownloadSimpleRsp(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.fileName = reader.string();
                break;
            case 2:
                message.fileSize = reader.uint64();
                break;
            case 3:
                message.hashVal = reader.string();
                break;
            case 4:
                message.gts = reader.uint64();
                break;
            case 5:
                reader.skip().pos++;
                if (message.ext === $util.emptyObject)
                    message.ext = {};
                key = reader.string();
                reader.pos++;
                message.ext[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgFileDownloadSimpleRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgFileDownloadSimpleRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgFileDownloadSimpleRsp} XmsgFileDownloadSimpleRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgFileDownloadSimpleRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgFileDownloadSimpleRsp message.
     * @function verify
     * @memberof XmsgFileDownloadSimpleRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgFileDownloadSimpleRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.fileName != null && message.hasOwnProperty("fileName"))
            if (!$util.isString(message.fileName))
                return "fileName: string expected";
        if (message.fileSize != null && message.hasOwnProperty("fileSize"))
            if (!$util.isInteger(message.fileSize) && !(message.fileSize && $util.isInteger(message.fileSize.low) && $util.isInteger(message.fileSize.high)))
                return "fileSize: integer|Long expected";
        if (message.hashVal != null && message.hasOwnProperty("hashVal"))
            if (!$util.isString(message.hashVal))
                return "hashVal: string expected";
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        if (message.ext != null && message.hasOwnProperty("ext")) {
            if (!$util.isObject(message.ext))
                return "ext: object expected";
            var key = Object.keys(message.ext);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.ext[key[i]]))
                    return "ext: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgFileDownloadSimpleRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgFileDownloadSimpleRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgFileDownloadSimpleRsp} XmsgFileDownloadSimpleRsp
     */
    XmsgFileDownloadSimpleRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgFileDownloadSimpleRsp)
            return object;
        var message = new $root.XmsgFileDownloadSimpleRsp();
        if (object.fileName != null)
            message.fileName = String(object.fileName);
        if (object.fileSize != null)
            if ($util.Long)
                (message.fileSize = $util.Long.fromValue(object.fileSize)).unsigned = true;
            else if (typeof object.fileSize === "string")
                message.fileSize = parseInt(object.fileSize, 10);
            else if (typeof object.fileSize === "number")
                message.fileSize = object.fileSize;
            else if (typeof object.fileSize === "object")
                message.fileSize = new $util.LongBits(object.fileSize.low >>> 0, object.fileSize.high >>> 0).toNumber(true);
        if (object.hashVal != null)
            message.hashVal = String(object.hashVal);
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        if (object.ext) {
            if (typeof object.ext !== "object")
                throw TypeError(".XmsgFileDownloadSimpleRsp.ext: object expected");
            message.ext = {};
            for (var keys = Object.keys(object.ext), i = 0; i < keys.length; ++i)
                message.ext[keys[i]] = String(object.ext[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgFileDownloadSimpleRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgFileDownloadSimpleRsp
     * @static
     * @param {XmsgFileDownloadSimpleRsp} message XmsgFileDownloadSimpleRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgFileDownloadSimpleRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.ext = {};
        if (options.defaults) {
            object.fileName = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.fileSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.fileSize = options.longs === String ? "0" : 0;
            object.hashVal = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
        }
        if (message.fileName != null && message.hasOwnProperty("fileName"))
            object.fileName = message.fileName;
        if (message.fileSize != null && message.hasOwnProperty("fileSize"))
            if (typeof message.fileSize === "number")
                object.fileSize = options.longs === String ? String(message.fileSize) : message.fileSize;
            else
                object.fileSize = options.longs === String ? $util.Long.prototype.toString.call(message.fileSize) : options.longs === Number ? new $util.LongBits(message.fileSize.low >>> 0, message.fileSize.high >>> 0).toNumber(true) : message.fileSize;
        if (message.hashVal != null && message.hasOwnProperty("hashVal"))
            object.hashVal = message.hashVal;
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        var keys2;
        if (message.ext && (keys2 = Object.keys(message.ext)).length) {
            object.ext = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ext[keys2[j]] = message.ext[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgFileDownloadSimpleRsp to JSON.
     * @function toJSON
     * @memberof XmsgFileDownloadSimpleRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgFileDownloadSimpleRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgFileDownloadSimpleRsp;
})();

$root.XmsgFileUsrFileInfoQueryReq = (function() {

    /**
     * Properties of a XmsgFileUsrFileInfoQueryReq.
     * @exports IXmsgFileUsrFileInfoQueryReq
     * @interface IXmsgFileUsrFileInfoQueryReq
     * @property {number|Long|null} [sts] XmsgFileUsrFileInfoQueryReq sts
     * @property {number|Long|null} [ets] XmsgFileUsrFileInfoQueryReq ets
     * @property {number|null} [page] XmsgFileUsrFileInfoQueryReq page
     * @property {number|null} [pageSize] XmsgFileUsrFileInfoQueryReq pageSize
     */

    /**
     * Constructs a new XmsgFileUsrFileInfoQueryReq.
     * @exports XmsgFileUsrFileInfoQueryReq
     * @classdesc Represents a XmsgFileUsrFileInfoQueryReq.
     * @implements IXmsgFileUsrFileInfoQueryReq
     * @constructor
     * @param {IXmsgFileUsrFileInfoQueryReq=} [properties] Properties to set
     */
    function XmsgFileUsrFileInfoQueryReq(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgFileUsrFileInfoQueryReq sts.
     * @member {number|Long} sts
     * @memberof XmsgFileUsrFileInfoQueryReq
     * @instance
     */
    XmsgFileUsrFileInfoQueryReq.prototype.sts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgFileUsrFileInfoQueryReq ets.
     * @member {number|Long} ets
     * @memberof XmsgFileUsrFileInfoQueryReq
     * @instance
     */
    XmsgFileUsrFileInfoQueryReq.prototype.ets = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgFileUsrFileInfoQueryReq page.
     * @member {number} page
     * @memberof XmsgFileUsrFileInfoQueryReq
     * @instance
     */
    XmsgFileUsrFileInfoQueryReq.prototype.page = 0;

    /**
     * XmsgFileUsrFileInfoQueryReq pageSize.
     * @member {number} pageSize
     * @memberof XmsgFileUsrFileInfoQueryReq
     * @instance
     */
    XmsgFileUsrFileInfoQueryReq.prototype.pageSize = 0;

    /**
     * Creates a new XmsgFileUsrFileInfoQueryReq instance using the specified properties.
     * @function create
     * @memberof XmsgFileUsrFileInfoQueryReq
     * @static
     * @param {IXmsgFileUsrFileInfoQueryReq=} [properties] Properties to set
     * @returns {XmsgFileUsrFileInfoQueryReq} XmsgFileUsrFileInfoQueryReq instance
     */
    XmsgFileUsrFileInfoQueryReq.create = function create(properties) {
        return new XmsgFileUsrFileInfoQueryReq(properties);
    };

    /**
     * Encodes the specified XmsgFileUsrFileInfoQueryReq message. Does not implicitly {@link XmsgFileUsrFileInfoQueryReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgFileUsrFileInfoQueryReq
     * @static
     * @param {IXmsgFileUsrFileInfoQueryReq} message XmsgFileUsrFileInfoQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgFileUsrFileInfoQueryReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.sts != null && message.hasOwnProperty("sts"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sts);
        if (message.ets != null && message.hasOwnProperty("ets"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ets);
        if (message.page != null && message.hasOwnProperty("page"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.page);
        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.pageSize);
        return writer;
    };

    /**
     * Encodes the specified XmsgFileUsrFileInfoQueryReq message, length delimited. Does not implicitly {@link XmsgFileUsrFileInfoQueryReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgFileUsrFileInfoQueryReq
     * @static
     * @param {IXmsgFileUsrFileInfoQueryReq} message XmsgFileUsrFileInfoQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgFileUsrFileInfoQueryReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgFileUsrFileInfoQueryReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgFileUsrFileInfoQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgFileUsrFileInfoQueryReq} XmsgFileUsrFileInfoQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgFileUsrFileInfoQueryReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgFileUsrFileInfoQueryReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.sts = reader.uint64();
                break;
            case 2:
                message.ets = reader.uint64();
                break;
            case 3:
                message.page = reader.uint32();
                break;
            case 4:
                message.pageSize = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgFileUsrFileInfoQueryReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgFileUsrFileInfoQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgFileUsrFileInfoQueryReq} XmsgFileUsrFileInfoQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgFileUsrFileInfoQueryReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgFileUsrFileInfoQueryReq message.
     * @function verify
     * @memberof XmsgFileUsrFileInfoQueryReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgFileUsrFileInfoQueryReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.sts != null && message.hasOwnProperty("sts"))
            if (!$util.isInteger(message.sts) && !(message.sts && $util.isInteger(message.sts.low) && $util.isInteger(message.sts.high)))
                return "sts: integer|Long expected";
        if (message.ets != null && message.hasOwnProperty("ets"))
            if (!$util.isInteger(message.ets) && !(message.ets && $util.isInteger(message.ets.low) && $util.isInteger(message.ets.high)))
                return "ets: integer|Long expected";
        if (message.page != null && message.hasOwnProperty("page"))
            if (!$util.isInteger(message.page))
                return "page: integer expected";
        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
            if (!$util.isInteger(message.pageSize))
                return "pageSize: integer expected";
        return null;
    };

    /**
     * Creates a XmsgFileUsrFileInfoQueryReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgFileUsrFileInfoQueryReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgFileUsrFileInfoQueryReq} XmsgFileUsrFileInfoQueryReq
     */
    XmsgFileUsrFileInfoQueryReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgFileUsrFileInfoQueryReq)
            return object;
        var message = new $root.XmsgFileUsrFileInfoQueryReq();
        if (object.sts != null)
            if ($util.Long)
                (message.sts = $util.Long.fromValue(object.sts)).unsigned = true;
            else if (typeof object.sts === "string")
                message.sts = parseInt(object.sts, 10);
            else if (typeof object.sts === "number")
                message.sts = object.sts;
            else if (typeof object.sts === "object")
                message.sts = new $util.LongBits(object.sts.low >>> 0, object.sts.high >>> 0).toNumber(true);
        if (object.ets != null)
            if ($util.Long)
                (message.ets = $util.Long.fromValue(object.ets)).unsigned = true;
            else if (typeof object.ets === "string")
                message.ets = parseInt(object.ets, 10);
            else if (typeof object.ets === "number")
                message.ets = object.ets;
            else if (typeof object.ets === "object")
                message.ets = new $util.LongBits(object.ets.low >>> 0, object.ets.high >>> 0).toNumber(true);
        if (object.page != null)
            message.page = object.page >>> 0;
        if (object.pageSize != null)
            message.pageSize = object.pageSize >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a XmsgFileUsrFileInfoQueryReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgFileUsrFileInfoQueryReq
     * @static
     * @param {XmsgFileUsrFileInfoQueryReq} message XmsgFileUsrFileInfoQueryReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgFileUsrFileInfoQueryReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.sts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.sts = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ets = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ets = options.longs === String ? "0" : 0;
            object.page = 0;
            object.pageSize = 0;
        }
        if (message.sts != null && message.hasOwnProperty("sts"))
            if (typeof message.sts === "number")
                object.sts = options.longs === String ? String(message.sts) : message.sts;
            else
                object.sts = options.longs === String ? $util.Long.prototype.toString.call(message.sts) : options.longs === Number ? new $util.LongBits(message.sts.low >>> 0, message.sts.high >>> 0).toNumber(true) : message.sts;
        if (message.ets != null && message.hasOwnProperty("ets"))
            if (typeof message.ets === "number")
                object.ets = options.longs === String ? String(message.ets) : message.ets;
            else
                object.ets = options.longs === String ? $util.Long.prototype.toString.call(message.ets) : options.longs === Number ? new $util.LongBits(message.ets.low >>> 0, message.ets.high >>> 0).toNumber(true) : message.ets;
        if (message.page != null && message.hasOwnProperty("page"))
            object.page = message.page;
        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
            object.pageSize = message.pageSize;
        return object;
    };

    /**
     * Converts this XmsgFileUsrFileInfoQueryReq to JSON.
     * @function toJSON
     * @memberof XmsgFileUsrFileInfoQueryReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgFileUsrFileInfoQueryReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgFileUsrFileInfoQueryReq;
})();

$root.XmsgFileUsrFileInfoQueryRsp = (function() {

    /**
     * Properties of a XmsgFileUsrFileInfoQueryRsp.
     * @exports IXmsgFileUsrFileInfoQueryRsp
     * @interface IXmsgFileUsrFileInfoQueryRsp
     * @property {Array.<IXmsgFileUsrFileInfo>|null} [fileInfo] XmsgFileUsrFileInfoQueryRsp fileInfo
     */

    /**
     * Constructs a new XmsgFileUsrFileInfoQueryRsp.
     * @exports XmsgFileUsrFileInfoQueryRsp
     * @classdesc Represents a XmsgFileUsrFileInfoQueryRsp.
     * @implements IXmsgFileUsrFileInfoQueryRsp
     * @constructor
     * @param {IXmsgFileUsrFileInfoQueryRsp=} [properties] Properties to set
     */
    function XmsgFileUsrFileInfoQueryRsp(properties) {
        this.fileInfo = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgFileUsrFileInfoQueryRsp fileInfo.
     * @member {Array.<IXmsgFileUsrFileInfo>} fileInfo
     * @memberof XmsgFileUsrFileInfoQueryRsp
     * @instance
     */
    XmsgFileUsrFileInfoQueryRsp.prototype.fileInfo = $util.emptyArray;

    /**
     * Creates a new XmsgFileUsrFileInfoQueryRsp instance using the specified properties.
     * @function create
     * @memberof XmsgFileUsrFileInfoQueryRsp
     * @static
     * @param {IXmsgFileUsrFileInfoQueryRsp=} [properties] Properties to set
     * @returns {XmsgFileUsrFileInfoQueryRsp} XmsgFileUsrFileInfoQueryRsp instance
     */
    XmsgFileUsrFileInfoQueryRsp.create = function create(properties) {
        return new XmsgFileUsrFileInfoQueryRsp(properties);
    };

    /**
     * Encodes the specified XmsgFileUsrFileInfoQueryRsp message. Does not implicitly {@link XmsgFileUsrFileInfoQueryRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgFileUsrFileInfoQueryRsp
     * @static
     * @param {IXmsgFileUsrFileInfoQueryRsp} message XmsgFileUsrFileInfoQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgFileUsrFileInfoQueryRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.fileInfo != null && message.fileInfo.length)
            for (var i = 0; i < message.fileInfo.length; ++i)
                $root.XmsgFileUsrFileInfo.encode(message.fileInfo[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgFileUsrFileInfoQueryRsp message, length delimited. Does not implicitly {@link XmsgFileUsrFileInfoQueryRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgFileUsrFileInfoQueryRsp
     * @static
     * @param {IXmsgFileUsrFileInfoQueryRsp} message XmsgFileUsrFileInfoQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgFileUsrFileInfoQueryRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgFileUsrFileInfoQueryRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgFileUsrFileInfoQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgFileUsrFileInfoQueryRsp} XmsgFileUsrFileInfoQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgFileUsrFileInfoQueryRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgFileUsrFileInfoQueryRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.fileInfo && message.fileInfo.length))
                    message.fileInfo = [];
                message.fileInfo.push($root.XmsgFileUsrFileInfo.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgFileUsrFileInfoQueryRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgFileUsrFileInfoQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgFileUsrFileInfoQueryRsp} XmsgFileUsrFileInfoQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgFileUsrFileInfoQueryRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgFileUsrFileInfoQueryRsp message.
     * @function verify
     * @memberof XmsgFileUsrFileInfoQueryRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgFileUsrFileInfoQueryRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.fileInfo != null && message.hasOwnProperty("fileInfo")) {
            if (!Array.isArray(message.fileInfo))
                return "fileInfo: array expected";
            for (var i = 0; i < message.fileInfo.length; ++i) {
                var error = $root.XmsgFileUsrFileInfo.verify(message.fileInfo[i]);
                if (error)
                    return "fileInfo." + error;
            }
        }
        return null;
    };

    /**
     * Creates a XmsgFileUsrFileInfoQueryRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgFileUsrFileInfoQueryRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgFileUsrFileInfoQueryRsp} XmsgFileUsrFileInfoQueryRsp
     */
    XmsgFileUsrFileInfoQueryRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgFileUsrFileInfoQueryRsp)
            return object;
        var message = new $root.XmsgFileUsrFileInfoQueryRsp();
        if (object.fileInfo) {
            if (!Array.isArray(object.fileInfo))
                throw TypeError(".XmsgFileUsrFileInfoQueryRsp.fileInfo: array expected");
            message.fileInfo = [];
            for (var i = 0; i < object.fileInfo.length; ++i) {
                if (typeof object.fileInfo[i] !== "object")
                    throw TypeError(".XmsgFileUsrFileInfoQueryRsp.fileInfo: object expected");
                message.fileInfo[i] = $root.XmsgFileUsrFileInfo.fromObject(object.fileInfo[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgFileUsrFileInfoQueryRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgFileUsrFileInfoQueryRsp
     * @static
     * @param {XmsgFileUsrFileInfoQueryRsp} message XmsgFileUsrFileInfoQueryRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgFileUsrFileInfoQueryRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.fileInfo = [];
        if (message.fileInfo && message.fileInfo.length) {
            object.fileInfo = [];
            for (var j = 0; j < message.fileInfo.length; ++j)
                object.fileInfo[j] = $root.XmsgFileUsrFileInfo.toObject(message.fileInfo[j], options);
        }
        return object;
    };

    /**
     * Converts this XmsgFileUsrFileInfoQueryRsp to JSON.
     * @function toJSON
     * @memberof XmsgFileUsrFileInfoQueryRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgFileUsrFileInfoQueryRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgFileUsrFileInfoQueryRsp;
})();

$root.XmsgFileUsrFileInfo = (function() {

    /**
     * Properties of a XmsgFileUsrFileInfo.
     * @exports IXmsgFileUsrFileInfo
     * @interface IXmsgFileUsrFileInfo
     * @property {string|null} [fid] XmsgFileUsrFileInfo fid
     * @property {string|null} [fileName] XmsgFileUsrFileInfo fileName
     * @property {number|Long|null} [fileSize] XmsgFileUsrFileInfo fileSize
     * @property {string|null} [hashVal] XmsgFileUsrFileInfo hashVal
     * @property {number|Long|null} [gts] XmsgFileUsrFileInfo gts
     */

    /**
     * Constructs a new XmsgFileUsrFileInfo.
     * @exports XmsgFileUsrFileInfo
     * @classdesc Represents a XmsgFileUsrFileInfo.
     * @implements IXmsgFileUsrFileInfo
     * @constructor
     * @param {IXmsgFileUsrFileInfo=} [properties] Properties to set
     */
    function XmsgFileUsrFileInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgFileUsrFileInfo fid.
     * @member {string} fid
     * @memberof XmsgFileUsrFileInfo
     * @instance
     */
    XmsgFileUsrFileInfo.prototype.fid = "";

    /**
     * XmsgFileUsrFileInfo fileName.
     * @member {string} fileName
     * @memberof XmsgFileUsrFileInfo
     * @instance
     */
    XmsgFileUsrFileInfo.prototype.fileName = "";

    /**
     * XmsgFileUsrFileInfo fileSize.
     * @member {number|Long} fileSize
     * @memberof XmsgFileUsrFileInfo
     * @instance
     */
    XmsgFileUsrFileInfo.prototype.fileSize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgFileUsrFileInfo hashVal.
     * @member {string} hashVal
     * @memberof XmsgFileUsrFileInfo
     * @instance
     */
    XmsgFileUsrFileInfo.prototype.hashVal = "";

    /**
     * XmsgFileUsrFileInfo gts.
     * @member {number|Long} gts
     * @memberof XmsgFileUsrFileInfo
     * @instance
     */
    XmsgFileUsrFileInfo.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgFileUsrFileInfo instance using the specified properties.
     * @function create
     * @memberof XmsgFileUsrFileInfo
     * @static
     * @param {IXmsgFileUsrFileInfo=} [properties] Properties to set
     * @returns {XmsgFileUsrFileInfo} XmsgFileUsrFileInfo instance
     */
    XmsgFileUsrFileInfo.create = function create(properties) {
        return new XmsgFileUsrFileInfo(properties);
    };

    /**
     * Encodes the specified XmsgFileUsrFileInfo message. Does not implicitly {@link XmsgFileUsrFileInfo.verify|verify} messages.
     * @function encode
     * @memberof XmsgFileUsrFileInfo
     * @static
     * @param {IXmsgFileUsrFileInfo} message XmsgFileUsrFileInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgFileUsrFileInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.fid != null && message.hasOwnProperty("fid"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.fid);
        if (message.fileName != null && message.hasOwnProperty("fileName"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.fileName);
        if (message.fileSize != null && message.hasOwnProperty("fileSize"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.fileSize);
        if (message.hashVal != null && message.hasOwnProperty("hashVal"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.hashVal);
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.gts);
        return writer;
    };

    /**
     * Encodes the specified XmsgFileUsrFileInfo message, length delimited. Does not implicitly {@link XmsgFileUsrFileInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgFileUsrFileInfo
     * @static
     * @param {IXmsgFileUsrFileInfo} message XmsgFileUsrFileInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgFileUsrFileInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgFileUsrFileInfo message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgFileUsrFileInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgFileUsrFileInfo} XmsgFileUsrFileInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgFileUsrFileInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgFileUsrFileInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.fid = reader.string();
                break;
            case 2:
                message.fileName = reader.string();
                break;
            case 3:
                message.fileSize = reader.uint64();
                break;
            case 4:
                message.hashVal = reader.string();
                break;
            case 5:
                message.gts = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgFileUsrFileInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgFileUsrFileInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgFileUsrFileInfo} XmsgFileUsrFileInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgFileUsrFileInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgFileUsrFileInfo message.
     * @function verify
     * @memberof XmsgFileUsrFileInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgFileUsrFileInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.fid != null && message.hasOwnProperty("fid"))
            if (!$util.isString(message.fid))
                return "fid: string expected";
        if (message.fileName != null && message.hasOwnProperty("fileName"))
            if (!$util.isString(message.fileName))
                return "fileName: string expected";
        if (message.fileSize != null && message.hasOwnProperty("fileSize"))
            if (!$util.isInteger(message.fileSize) && !(message.fileSize && $util.isInteger(message.fileSize.low) && $util.isInteger(message.fileSize.high)))
                return "fileSize: integer|Long expected";
        if (message.hashVal != null && message.hasOwnProperty("hashVal"))
            if (!$util.isString(message.hashVal))
                return "hashVal: string expected";
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgFileUsrFileInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgFileUsrFileInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgFileUsrFileInfo} XmsgFileUsrFileInfo
     */
    XmsgFileUsrFileInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgFileUsrFileInfo)
            return object;
        var message = new $root.XmsgFileUsrFileInfo();
        if (object.fid != null)
            message.fid = String(object.fid);
        if (object.fileName != null)
            message.fileName = String(object.fileName);
        if (object.fileSize != null)
            if ($util.Long)
                (message.fileSize = $util.Long.fromValue(object.fileSize)).unsigned = true;
            else if (typeof object.fileSize === "string")
                message.fileSize = parseInt(object.fileSize, 10);
            else if (typeof object.fileSize === "number")
                message.fileSize = object.fileSize;
            else if (typeof object.fileSize === "object")
                message.fileSize = new $util.LongBits(object.fileSize.low >>> 0, object.fileSize.high >>> 0).toNumber(true);
        if (object.hashVal != null)
            message.hashVal = String(object.hashVal);
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgFileUsrFileInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgFileUsrFileInfo
     * @static
     * @param {XmsgFileUsrFileInfo} message XmsgFileUsrFileInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgFileUsrFileInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.fid = "";
            object.fileName = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.fileSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.fileSize = options.longs === String ? "0" : 0;
            object.hashVal = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
        }
        if (message.fid != null && message.hasOwnProperty("fid"))
            object.fid = message.fid;
        if (message.fileName != null && message.hasOwnProperty("fileName"))
            object.fileName = message.fileName;
        if (message.fileSize != null && message.hasOwnProperty("fileSize"))
            if (typeof message.fileSize === "number")
                object.fileSize = options.longs === String ? String(message.fileSize) : message.fileSize;
            else
                object.fileSize = options.longs === String ? $util.Long.prototype.toString.call(message.fileSize) : options.longs === Number ? new $util.LongBits(message.fileSize.low >>> 0, message.fileSize.high >>> 0).toNumber(true) : message.fileSize;
        if (message.hashVal != null && message.hasOwnProperty("hashVal"))
            object.hashVal = message.hashVal;
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        return object;
    };

    /**
     * Converts this XmsgFileUsrFileInfo to JSON.
     * @function toJSON
     * @memberof XmsgFileUsrFileInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgFileUsrFileInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgFileUsrFileInfo;
})();

$root.XmsgImHlrUsrDat = (function() {

    /**
     * Properties of a XmsgImHlrUsrDat.
     * @exports IXmsgImHlrUsrDat
     * @interface IXmsgImHlrUsrDat
     * @property {string|null} [uid] XmsgImHlrUsrDat uid
     * @property {number|Long|null} [ver] XmsgImHlrUsrDat ver
     * @property {IXmsgImHlrUsrDatPri|null} [pri] XmsgImHlrUsrDat pri
     * @property {IXmsgImHlrUsrDatPub|null} [pub] XmsgImHlrUsrDat pub
     * @property {number|Long|null} [gts] XmsgImHlrUsrDat gts
     * @property {number|Long|null} [uts] XmsgImHlrUsrDat uts
     */

    /**
     * Constructs a new XmsgImHlrUsrDat.
     * @exports XmsgImHlrUsrDat
     * @classdesc Represents a XmsgImHlrUsrDat.
     * @implements IXmsgImHlrUsrDat
     * @constructor
     * @param {IXmsgImHlrUsrDat=} [properties] Properties to set
     */
    function XmsgImHlrUsrDat(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrUsrDat uid.
     * @member {string} uid
     * @memberof XmsgImHlrUsrDat
     * @instance
     */
    XmsgImHlrUsrDat.prototype.uid = "";

    /**
     * XmsgImHlrUsrDat ver.
     * @member {number|Long} ver
     * @memberof XmsgImHlrUsrDat
     * @instance
     */
    XmsgImHlrUsrDat.prototype.ver = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImHlrUsrDat pri.
     * @member {IXmsgImHlrUsrDatPri|null|undefined} pri
     * @memberof XmsgImHlrUsrDat
     * @instance
     */
    XmsgImHlrUsrDat.prototype.pri = null;

    /**
     * XmsgImHlrUsrDat pub.
     * @member {IXmsgImHlrUsrDatPub|null|undefined} pub
     * @memberof XmsgImHlrUsrDat
     * @instance
     */
    XmsgImHlrUsrDat.prototype.pub = null;

    /**
     * XmsgImHlrUsrDat gts.
     * @member {number|Long} gts
     * @memberof XmsgImHlrUsrDat
     * @instance
     */
    XmsgImHlrUsrDat.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImHlrUsrDat uts.
     * @member {number|Long} uts
     * @memberof XmsgImHlrUsrDat
     * @instance
     */
    XmsgImHlrUsrDat.prototype.uts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgImHlrUsrDat instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrUsrDat
     * @static
     * @param {IXmsgImHlrUsrDat=} [properties] Properties to set
     * @returns {XmsgImHlrUsrDat} XmsgImHlrUsrDat instance
     */
    XmsgImHlrUsrDat.create = function create(properties) {
        return new XmsgImHlrUsrDat(properties);
    };

    /**
     * Encodes the specified XmsgImHlrUsrDat message. Does not implicitly {@link XmsgImHlrUsrDat.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrUsrDat
     * @static
     * @param {IXmsgImHlrUsrDat} message XmsgImHlrUsrDat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrUsrDat.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uid);
        if (message.ver != null && message.hasOwnProperty("ver"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ver);
        if (message.pri != null && message.hasOwnProperty("pri"))
            $root.XmsgImHlrUsrDatPri.encode(message.pri, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.pub != null && message.hasOwnProperty("pub"))
            $root.XmsgImHlrUsrDatPub.encode(message.pub, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.gts);
        if (message.uts != null && message.hasOwnProperty("uts"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.uts);
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrUsrDat message, length delimited. Does not implicitly {@link XmsgImHlrUsrDat.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrUsrDat
     * @static
     * @param {IXmsgImHlrUsrDat} message XmsgImHlrUsrDat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrUsrDat.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrUsrDat message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrUsrDat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrUsrDat} XmsgImHlrUsrDat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrUsrDat.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrUsrDat();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uid = reader.string();
                break;
            case 2:
                message.ver = reader.uint64();
                break;
            case 3:
                message.pri = $root.XmsgImHlrUsrDatPri.decode(reader, reader.uint32());
                break;
            case 4:
                message.pub = $root.XmsgImHlrUsrDatPub.decode(reader, reader.uint32());
                break;
            case 5:
                message.gts = reader.uint64();
                break;
            case 6:
                message.uts = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrUsrDat message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrUsrDat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrUsrDat} XmsgImHlrUsrDat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrUsrDat.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrUsrDat message.
     * @function verify
     * @memberof XmsgImHlrUsrDat
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrUsrDat.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isString(message.uid))
                return "uid: string expected";
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (!$util.isInteger(message.ver) && !(message.ver && $util.isInteger(message.ver.low) && $util.isInteger(message.ver.high)))
                return "ver: integer|Long expected";
        if (message.pri != null && message.hasOwnProperty("pri")) {
            var error = $root.XmsgImHlrUsrDatPri.verify(message.pri);
            if (error)
                return "pri." + error;
        }
        if (message.pub != null && message.hasOwnProperty("pub")) {
            var error = $root.XmsgImHlrUsrDatPub.verify(message.pub);
            if (error)
                return "pub." + error;
        }
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (!$util.isInteger(message.uts) && !(message.uts && $util.isInteger(message.uts.low) && $util.isInteger(message.uts.high)))
                return "uts: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgImHlrUsrDat message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrUsrDat
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrUsrDat} XmsgImHlrUsrDat
     */
    XmsgImHlrUsrDat.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrUsrDat)
            return object;
        var message = new $root.XmsgImHlrUsrDat();
        if (object.uid != null)
            message.uid = String(object.uid);
        if (object.ver != null)
            if ($util.Long)
                (message.ver = $util.Long.fromValue(object.ver)).unsigned = true;
            else if (typeof object.ver === "string")
                message.ver = parseInt(object.ver, 10);
            else if (typeof object.ver === "number")
                message.ver = object.ver;
            else if (typeof object.ver === "object")
                message.ver = new $util.LongBits(object.ver.low >>> 0, object.ver.high >>> 0).toNumber(true);
        if (object.pri != null) {
            if (typeof object.pri !== "object")
                throw TypeError(".XmsgImHlrUsrDat.pri: object expected");
            message.pri = $root.XmsgImHlrUsrDatPri.fromObject(object.pri);
        }
        if (object.pub != null) {
            if (typeof object.pub !== "object")
                throw TypeError(".XmsgImHlrUsrDat.pub: object expected");
            message.pub = $root.XmsgImHlrUsrDatPub.fromObject(object.pub);
        }
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        if (object.uts != null)
            if ($util.Long)
                (message.uts = $util.Long.fromValue(object.uts)).unsigned = true;
            else if (typeof object.uts === "string")
                message.uts = parseInt(object.uts, 10);
            else if (typeof object.uts === "number")
                message.uts = object.uts;
            else if (typeof object.uts === "object")
                message.uts = new $util.LongBits(object.uts.low >>> 0, object.uts.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrUsrDat message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrUsrDat
     * @static
     * @param {XmsgImHlrUsrDat} message XmsgImHlrUsrDat
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrUsrDat.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.uid = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver = options.longs === String ? "0" : 0;
            object.pri = null;
            object.pub = null;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uts = options.longs === String ? "0" : 0;
        }
        if (message.uid != null && message.hasOwnProperty("uid"))
            object.uid = message.uid;
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (typeof message.ver === "number")
                object.ver = options.longs === String ? String(message.ver) : message.ver;
            else
                object.ver = options.longs === String ? $util.Long.prototype.toString.call(message.ver) : options.longs === Number ? new $util.LongBits(message.ver.low >>> 0, message.ver.high >>> 0).toNumber(true) : message.ver;
        if (message.pri != null && message.hasOwnProperty("pri"))
            object.pri = $root.XmsgImHlrUsrDatPri.toObject(message.pri, options);
        if (message.pub != null && message.hasOwnProperty("pub"))
            object.pub = $root.XmsgImHlrUsrDatPub.toObject(message.pub, options);
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (typeof message.uts === "number")
                object.uts = options.longs === String ? String(message.uts) : message.uts;
            else
                object.uts = options.longs === String ? $util.Long.prototype.toString.call(message.uts) : options.longs === Number ? new $util.LongBits(message.uts.low >>> 0, message.uts.high >>> 0).toNumber(true) : message.uts;
        return object;
    };

    /**
     * Converts this XmsgImHlrUsrDat to JSON.
     * @function toJSON
     * @memberof XmsgImHlrUsrDat
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrUsrDat.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrUsrDat;
})();

$root.XmsgImHlrUsrDatPri = (function() {

    /**
     * Properties of a XmsgImHlrUsrDatPri.
     * @exports IXmsgImHlrUsrDatPri
     * @interface IXmsgImHlrUsrDatPri
     * @property {boolean|null} [enable] XmsgImHlrUsrDatPri enable
     * @property {Uint8Array|null} [ext] XmsgImHlrUsrDatPri ext
     */

    /**
     * Constructs a new XmsgImHlrUsrDatPri.
     * @exports XmsgImHlrUsrDatPri
     * @classdesc Represents a XmsgImHlrUsrDatPri.
     * @implements IXmsgImHlrUsrDatPri
     * @constructor
     * @param {IXmsgImHlrUsrDatPri=} [properties] Properties to set
     */
    function XmsgImHlrUsrDatPri(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrUsrDatPri enable.
     * @member {boolean} enable
     * @memberof XmsgImHlrUsrDatPri
     * @instance
     */
    XmsgImHlrUsrDatPri.prototype.enable = false;

    /**
     * XmsgImHlrUsrDatPri ext.
     * @member {Uint8Array} ext
     * @memberof XmsgImHlrUsrDatPri
     * @instance
     */
    XmsgImHlrUsrDatPri.prototype.ext = $util.newBuffer([]);

    /**
     * Creates a new XmsgImHlrUsrDatPri instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrUsrDatPri
     * @static
     * @param {IXmsgImHlrUsrDatPri=} [properties] Properties to set
     * @returns {XmsgImHlrUsrDatPri} XmsgImHlrUsrDatPri instance
     */
    XmsgImHlrUsrDatPri.create = function create(properties) {
        return new XmsgImHlrUsrDatPri(properties);
    };

    /**
     * Encodes the specified XmsgImHlrUsrDatPri message. Does not implicitly {@link XmsgImHlrUsrDatPri.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrUsrDatPri
     * @static
     * @param {IXmsgImHlrUsrDatPri} message XmsgImHlrUsrDatPri message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrUsrDatPri.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.enable != null && message.hasOwnProperty("enable"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.enable);
        if (message.ext != null && message.hasOwnProperty("ext"))
            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.ext);
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrUsrDatPri message, length delimited. Does not implicitly {@link XmsgImHlrUsrDatPri.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrUsrDatPri
     * @static
     * @param {IXmsgImHlrUsrDatPri} message XmsgImHlrUsrDatPri message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrUsrDatPri.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrUsrDatPri message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrUsrDatPri
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrUsrDatPri} XmsgImHlrUsrDatPri
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrUsrDatPri.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrUsrDatPri();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.enable = reader.bool();
                break;
            case 5:
                message.ext = reader.bytes();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrUsrDatPri message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrUsrDatPri
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrUsrDatPri} XmsgImHlrUsrDatPri
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrUsrDatPri.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrUsrDatPri message.
     * @function verify
     * @memberof XmsgImHlrUsrDatPri
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrUsrDatPri.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.enable != null && message.hasOwnProperty("enable"))
            if (typeof message.enable !== "boolean")
                return "enable: boolean expected";
        if (message.ext != null && message.hasOwnProperty("ext"))
            if (!(message.ext && typeof message.ext.length === "number" || $util.isString(message.ext)))
                return "ext: buffer expected";
        return null;
    };

    /**
     * Creates a XmsgImHlrUsrDatPri message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrUsrDatPri
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrUsrDatPri} XmsgImHlrUsrDatPri
     */
    XmsgImHlrUsrDatPri.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrUsrDatPri)
            return object;
        var message = new $root.XmsgImHlrUsrDatPri();
        if (object.enable != null)
            message.enable = Boolean(object.enable);
        if (object.ext != null)
            if (typeof object.ext === "string")
                $util.base64.decode(object.ext, message.ext = $util.newBuffer($util.base64.length(object.ext)), 0);
            else if (object.ext.length)
                message.ext = object.ext;
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrUsrDatPri message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrUsrDatPri
     * @static
     * @param {XmsgImHlrUsrDatPri} message XmsgImHlrUsrDatPri
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrUsrDatPri.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.enable = false;
            if (options.bytes === String)
                object.ext = "";
            else {
                object.ext = [];
                if (options.bytes !== Array)
                    object.ext = $util.newBuffer(object.ext);
            }
        }
        if (message.enable != null && message.hasOwnProperty("enable"))
            object.enable = message.enable;
        if (message.ext != null && message.hasOwnProperty("ext"))
            object.ext = options.bytes === String ? $util.base64.encode(message.ext, 0, message.ext.length) : options.bytes === Array ? Array.prototype.slice.call(message.ext) : message.ext;
        return object;
    };

    /**
     * Converts this XmsgImHlrUsrDatPri to JSON.
     * @function toJSON
     * @memberof XmsgImHlrUsrDatPri
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrUsrDatPri.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrUsrDatPri;
})();

$root.XmsgImHlrUsrDatPub = (function() {

    /**
     * Properties of a XmsgImHlrUsrDatPub.
     * @exports IXmsgImHlrUsrDatPub
     * @interface IXmsgImHlrUsrDatPub
     * @property {Object.<string,string>|null} [info] XmsgImHlrUsrDatPub info
     */

    /**
     * Constructs a new XmsgImHlrUsrDatPub.
     * @exports XmsgImHlrUsrDatPub
     * @classdesc Represents a XmsgImHlrUsrDatPub.
     * @implements IXmsgImHlrUsrDatPub
     * @constructor
     * @param {IXmsgImHlrUsrDatPub=} [properties] Properties to set
     */
    function XmsgImHlrUsrDatPub(properties) {
        this.info = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrUsrDatPub info.
     * @member {Object.<string,string>} info
     * @memberof XmsgImHlrUsrDatPub
     * @instance
     */
    XmsgImHlrUsrDatPub.prototype.info = $util.emptyObject;

    /**
     * Creates a new XmsgImHlrUsrDatPub instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrUsrDatPub
     * @static
     * @param {IXmsgImHlrUsrDatPub=} [properties] Properties to set
     * @returns {XmsgImHlrUsrDatPub} XmsgImHlrUsrDatPub instance
     */
    XmsgImHlrUsrDatPub.create = function create(properties) {
        return new XmsgImHlrUsrDatPub(properties);
    };

    /**
     * Encodes the specified XmsgImHlrUsrDatPub message. Does not implicitly {@link XmsgImHlrUsrDatPub.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrUsrDatPub
     * @static
     * @param {IXmsgImHlrUsrDatPub} message XmsgImHlrUsrDatPub message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrUsrDatPub.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.info != null && message.hasOwnProperty("info"))
            for (var keys = Object.keys(message.info), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.info[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrUsrDatPub message, length delimited. Does not implicitly {@link XmsgImHlrUsrDatPub.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrUsrDatPub
     * @static
     * @param {IXmsgImHlrUsrDatPub} message XmsgImHlrUsrDatPub message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrUsrDatPub.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrUsrDatPub message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrUsrDatPub
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrUsrDatPub} XmsgImHlrUsrDatPub
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrUsrDatPub.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrUsrDatPub(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                reader.skip().pos++;
                if (message.info === $util.emptyObject)
                    message.info = {};
                key = reader.string();
                reader.pos++;
                message.info[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrUsrDatPub message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrUsrDatPub
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrUsrDatPub} XmsgImHlrUsrDatPub
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrUsrDatPub.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrUsrDatPub message.
     * @function verify
     * @memberof XmsgImHlrUsrDatPub
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrUsrDatPub.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            if (!$util.isObject(message.info))
                return "info: object expected";
            var key = Object.keys(message.info);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.info[key[i]]))
                    return "info: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImHlrUsrDatPub message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrUsrDatPub
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrUsrDatPub} XmsgImHlrUsrDatPub
     */
    XmsgImHlrUsrDatPub.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrUsrDatPub)
            return object;
        var message = new $root.XmsgImHlrUsrDatPub();
        if (object.info) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImHlrUsrDatPub.info: object expected");
            message.info = {};
            for (var keys = Object.keys(object.info), i = 0; i < keys.length; ++i)
                message.info[keys[i]] = String(object.info[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrUsrDatPub message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrUsrDatPub
     * @static
     * @param {XmsgImHlrUsrDatPub} message XmsgImHlrUsrDatPub
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrUsrDatPub.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.info = {};
        var keys2;
        if (message.info && (keys2 = Object.keys(message.info)).length) {
            object.info = {};
            for (var j = 0; j < keys2.length; ++j)
                object.info[keys2[j]] = message.info[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImHlrUsrDatPub to JSON.
     * @function toJSON
     * @memberof XmsgImHlrUsrDatPub
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrUsrDatPub.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrUsrDatPub;
})();

$root.XmsgImHlrUsrInfoQueryReq = (function() {

    /**
     * Properties of a XmsgImHlrUsrInfoQueryReq.
     * @exports IXmsgImHlrUsrInfoQueryReq
     * @interface IXmsgImHlrUsrInfoQueryReq
     * @property {string|null} [ext] XmsgImHlrUsrInfoQueryReq ext
     */

    /**
     * Constructs a new XmsgImHlrUsrInfoQueryReq.
     * @exports XmsgImHlrUsrInfoQueryReq
     * @classdesc Represents a XmsgImHlrUsrInfoQueryReq.
     * @implements IXmsgImHlrUsrInfoQueryReq
     * @constructor
     * @param {IXmsgImHlrUsrInfoQueryReq=} [properties] Properties to set
     */
    function XmsgImHlrUsrInfoQueryReq(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrUsrInfoQueryReq ext.
     * @member {string} ext
     * @memberof XmsgImHlrUsrInfoQueryReq
     * @instance
     */
    XmsgImHlrUsrInfoQueryReq.prototype.ext = "";

    /**
     * Creates a new XmsgImHlrUsrInfoQueryReq instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrUsrInfoQueryReq
     * @static
     * @param {IXmsgImHlrUsrInfoQueryReq=} [properties] Properties to set
     * @returns {XmsgImHlrUsrInfoQueryReq} XmsgImHlrUsrInfoQueryReq instance
     */
    XmsgImHlrUsrInfoQueryReq.create = function create(properties) {
        return new XmsgImHlrUsrInfoQueryReq(properties);
    };

    /**
     * Encodes the specified XmsgImHlrUsrInfoQueryReq message. Does not implicitly {@link XmsgImHlrUsrInfoQueryReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrUsrInfoQueryReq
     * @static
     * @param {IXmsgImHlrUsrInfoQueryReq} message XmsgImHlrUsrInfoQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrUsrInfoQueryReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ext != null && message.hasOwnProperty("ext"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.ext);
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrUsrInfoQueryReq message, length delimited. Does not implicitly {@link XmsgImHlrUsrInfoQueryReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrUsrInfoQueryReq
     * @static
     * @param {IXmsgImHlrUsrInfoQueryReq} message XmsgImHlrUsrInfoQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrUsrInfoQueryReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrUsrInfoQueryReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrUsrInfoQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrUsrInfoQueryReq} XmsgImHlrUsrInfoQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrUsrInfoQueryReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrUsrInfoQueryReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ext = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrUsrInfoQueryReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrUsrInfoQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrUsrInfoQueryReq} XmsgImHlrUsrInfoQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrUsrInfoQueryReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrUsrInfoQueryReq message.
     * @function verify
     * @memberof XmsgImHlrUsrInfoQueryReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrUsrInfoQueryReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ext != null && message.hasOwnProperty("ext"))
            if (!$util.isString(message.ext))
                return "ext: string expected";
        return null;
    };

    /**
     * Creates a XmsgImHlrUsrInfoQueryReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrUsrInfoQueryReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrUsrInfoQueryReq} XmsgImHlrUsrInfoQueryReq
     */
    XmsgImHlrUsrInfoQueryReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrUsrInfoQueryReq)
            return object;
        var message = new $root.XmsgImHlrUsrInfoQueryReq();
        if (object.ext != null)
            message.ext = String(object.ext);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrUsrInfoQueryReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrUsrInfoQueryReq
     * @static
     * @param {XmsgImHlrUsrInfoQueryReq} message XmsgImHlrUsrInfoQueryReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrUsrInfoQueryReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.ext = "";
        if (message.ext != null && message.hasOwnProperty("ext"))
            object.ext = message.ext;
        return object;
    };

    /**
     * Converts this XmsgImHlrUsrInfoQueryReq to JSON.
     * @function toJSON
     * @memberof XmsgImHlrUsrInfoQueryReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrUsrInfoQueryReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrUsrInfoQueryReq;
})();

$root.XmsgImHlrUsrInfoQueryRsp = (function() {

    /**
     * Properties of a XmsgImHlrUsrInfoQueryRsp.
     * @exports IXmsgImHlrUsrInfoQueryRsp
     * @interface IXmsgImHlrUsrInfoQueryRsp
     * @property {Object.<string,string>|null} [info] XmsgImHlrUsrInfoQueryRsp info
     */

    /**
     * Constructs a new XmsgImHlrUsrInfoQueryRsp.
     * @exports XmsgImHlrUsrInfoQueryRsp
     * @classdesc Represents a XmsgImHlrUsrInfoQueryRsp.
     * @implements IXmsgImHlrUsrInfoQueryRsp
     * @constructor
     * @param {IXmsgImHlrUsrInfoQueryRsp=} [properties] Properties to set
     */
    function XmsgImHlrUsrInfoQueryRsp(properties) {
        this.info = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrUsrInfoQueryRsp info.
     * @member {Object.<string,string>} info
     * @memberof XmsgImHlrUsrInfoQueryRsp
     * @instance
     */
    XmsgImHlrUsrInfoQueryRsp.prototype.info = $util.emptyObject;

    /**
     * Creates a new XmsgImHlrUsrInfoQueryRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrUsrInfoQueryRsp
     * @static
     * @param {IXmsgImHlrUsrInfoQueryRsp=} [properties] Properties to set
     * @returns {XmsgImHlrUsrInfoQueryRsp} XmsgImHlrUsrInfoQueryRsp instance
     */
    XmsgImHlrUsrInfoQueryRsp.create = function create(properties) {
        return new XmsgImHlrUsrInfoQueryRsp(properties);
    };

    /**
     * Encodes the specified XmsgImHlrUsrInfoQueryRsp message. Does not implicitly {@link XmsgImHlrUsrInfoQueryRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrUsrInfoQueryRsp
     * @static
     * @param {IXmsgImHlrUsrInfoQueryRsp} message XmsgImHlrUsrInfoQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrUsrInfoQueryRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.info != null && message.hasOwnProperty("info"))
            for (var keys = Object.keys(message.info), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.info[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrUsrInfoQueryRsp message, length delimited. Does not implicitly {@link XmsgImHlrUsrInfoQueryRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrUsrInfoQueryRsp
     * @static
     * @param {IXmsgImHlrUsrInfoQueryRsp} message XmsgImHlrUsrInfoQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrUsrInfoQueryRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrUsrInfoQueryRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrUsrInfoQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrUsrInfoQueryRsp} XmsgImHlrUsrInfoQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrUsrInfoQueryRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrUsrInfoQueryRsp(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                reader.skip().pos++;
                if (message.info === $util.emptyObject)
                    message.info = {};
                key = reader.string();
                reader.pos++;
                message.info[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrUsrInfoQueryRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrUsrInfoQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrUsrInfoQueryRsp} XmsgImHlrUsrInfoQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrUsrInfoQueryRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrUsrInfoQueryRsp message.
     * @function verify
     * @memberof XmsgImHlrUsrInfoQueryRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrUsrInfoQueryRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            if (!$util.isObject(message.info))
                return "info: object expected";
            var key = Object.keys(message.info);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.info[key[i]]))
                    return "info: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImHlrUsrInfoQueryRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrUsrInfoQueryRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrUsrInfoQueryRsp} XmsgImHlrUsrInfoQueryRsp
     */
    XmsgImHlrUsrInfoQueryRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrUsrInfoQueryRsp)
            return object;
        var message = new $root.XmsgImHlrUsrInfoQueryRsp();
        if (object.info) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImHlrUsrInfoQueryRsp.info: object expected");
            message.info = {};
            for (var keys = Object.keys(object.info), i = 0; i < keys.length; ++i)
                message.info[keys[i]] = String(object.info[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrUsrInfoQueryRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrUsrInfoQueryRsp
     * @static
     * @param {XmsgImHlrUsrInfoQueryRsp} message XmsgImHlrUsrInfoQueryRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrUsrInfoQueryRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.info = {};
        var keys2;
        if (message.info && (keys2 = Object.keys(message.info)).length) {
            object.info = {};
            for (var j = 0; j < keys2.length; ++j)
                object.info[keys2[j]] = message.info[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImHlrUsrInfoQueryRsp to JSON.
     * @function toJSON
     * @memberof XmsgImHlrUsrInfoQueryRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrUsrInfoQueryRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrUsrInfoQueryRsp;
})();

$root.XmsgImHlrUsrInfoUpdateReq = (function() {

    /**
     * Properties of a XmsgImHlrUsrInfoUpdateReq.
     * @exports IXmsgImHlrUsrInfoUpdateReq
     * @interface IXmsgImHlrUsrInfoUpdateReq
     * @property {Object.<string,string>|null} [info] XmsgImHlrUsrInfoUpdateReq info
     */

    /**
     * Constructs a new XmsgImHlrUsrInfoUpdateReq.
     * @exports XmsgImHlrUsrInfoUpdateReq
     * @classdesc Represents a XmsgImHlrUsrInfoUpdateReq.
     * @implements IXmsgImHlrUsrInfoUpdateReq
     * @constructor
     * @param {IXmsgImHlrUsrInfoUpdateReq=} [properties] Properties to set
     */
    function XmsgImHlrUsrInfoUpdateReq(properties) {
        this.info = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrUsrInfoUpdateReq info.
     * @member {Object.<string,string>} info
     * @memberof XmsgImHlrUsrInfoUpdateReq
     * @instance
     */
    XmsgImHlrUsrInfoUpdateReq.prototype.info = $util.emptyObject;

    /**
     * Creates a new XmsgImHlrUsrInfoUpdateReq instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrUsrInfoUpdateReq
     * @static
     * @param {IXmsgImHlrUsrInfoUpdateReq=} [properties] Properties to set
     * @returns {XmsgImHlrUsrInfoUpdateReq} XmsgImHlrUsrInfoUpdateReq instance
     */
    XmsgImHlrUsrInfoUpdateReq.create = function create(properties) {
        return new XmsgImHlrUsrInfoUpdateReq(properties);
    };

    /**
     * Encodes the specified XmsgImHlrUsrInfoUpdateReq message. Does not implicitly {@link XmsgImHlrUsrInfoUpdateReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrUsrInfoUpdateReq
     * @static
     * @param {IXmsgImHlrUsrInfoUpdateReq} message XmsgImHlrUsrInfoUpdateReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrUsrInfoUpdateReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.info != null && message.hasOwnProperty("info"))
            for (var keys = Object.keys(message.info), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.info[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrUsrInfoUpdateReq message, length delimited. Does not implicitly {@link XmsgImHlrUsrInfoUpdateReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrUsrInfoUpdateReq
     * @static
     * @param {IXmsgImHlrUsrInfoUpdateReq} message XmsgImHlrUsrInfoUpdateReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrUsrInfoUpdateReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrUsrInfoUpdateReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrUsrInfoUpdateReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrUsrInfoUpdateReq} XmsgImHlrUsrInfoUpdateReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrUsrInfoUpdateReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrUsrInfoUpdateReq(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                reader.skip().pos++;
                if (message.info === $util.emptyObject)
                    message.info = {};
                key = reader.string();
                reader.pos++;
                message.info[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrUsrInfoUpdateReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrUsrInfoUpdateReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrUsrInfoUpdateReq} XmsgImHlrUsrInfoUpdateReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrUsrInfoUpdateReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrUsrInfoUpdateReq message.
     * @function verify
     * @memberof XmsgImHlrUsrInfoUpdateReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrUsrInfoUpdateReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            if (!$util.isObject(message.info))
                return "info: object expected";
            var key = Object.keys(message.info);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.info[key[i]]))
                    return "info: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImHlrUsrInfoUpdateReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrUsrInfoUpdateReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrUsrInfoUpdateReq} XmsgImHlrUsrInfoUpdateReq
     */
    XmsgImHlrUsrInfoUpdateReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrUsrInfoUpdateReq)
            return object;
        var message = new $root.XmsgImHlrUsrInfoUpdateReq();
        if (object.info) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImHlrUsrInfoUpdateReq.info: object expected");
            message.info = {};
            for (var keys = Object.keys(object.info), i = 0; i < keys.length; ++i)
                message.info[keys[i]] = String(object.info[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrUsrInfoUpdateReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrUsrInfoUpdateReq
     * @static
     * @param {XmsgImHlrUsrInfoUpdateReq} message XmsgImHlrUsrInfoUpdateReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrUsrInfoUpdateReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.info = {};
        var keys2;
        if (message.info && (keys2 = Object.keys(message.info)).length) {
            object.info = {};
            for (var j = 0; j < keys2.length; ++j)
                object.info[keys2[j]] = message.info[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImHlrUsrInfoUpdateReq to JSON.
     * @function toJSON
     * @memberof XmsgImHlrUsrInfoUpdateReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrUsrInfoUpdateReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrUsrInfoUpdateReq;
})();

$root.XmsgImHlrUsrInfoUpdateRsp = (function() {

    /**
     * Properties of a XmsgImHlrUsrInfoUpdateRsp.
     * @exports IXmsgImHlrUsrInfoUpdateRsp
     * @interface IXmsgImHlrUsrInfoUpdateRsp
     * @property {string|null} [ext] XmsgImHlrUsrInfoUpdateRsp ext
     */

    /**
     * Constructs a new XmsgImHlrUsrInfoUpdateRsp.
     * @exports XmsgImHlrUsrInfoUpdateRsp
     * @classdesc Represents a XmsgImHlrUsrInfoUpdateRsp.
     * @implements IXmsgImHlrUsrInfoUpdateRsp
     * @constructor
     * @param {IXmsgImHlrUsrInfoUpdateRsp=} [properties] Properties to set
     */
    function XmsgImHlrUsrInfoUpdateRsp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImHlrUsrInfoUpdateRsp ext.
     * @member {string} ext
     * @memberof XmsgImHlrUsrInfoUpdateRsp
     * @instance
     */
    XmsgImHlrUsrInfoUpdateRsp.prototype.ext = "";

    /**
     * Creates a new XmsgImHlrUsrInfoUpdateRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImHlrUsrInfoUpdateRsp
     * @static
     * @param {IXmsgImHlrUsrInfoUpdateRsp=} [properties] Properties to set
     * @returns {XmsgImHlrUsrInfoUpdateRsp} XmsgImHlrUsrInfoUpdateRsp instance
     */
    XmsgImHlrUsrInfoUpdateRsp.create = function create(properties) {
        return new XmsgImHlrUsrInfoUpdateRsp(properties);
    };

    /**
     * Encodes the specified XmsgImHlrUsrInfoUpdateRsp message. Does not implicitly {@link XmsgImHlrUsrInfoUpdateRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImHlrUsrInfoUpdateRsp
     * @static
     * @param {IXmsgImHlrUsrInfoUpdateRsp} message XmsgImHlrUsrInfoUpdateRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrUsrInfoUpdateRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ext != null && message.hasOwnProperty("ext"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.ext);
        return writer;
    };

    /**
     * Encodes the specified XmsgImHlrUsrInfoUpdateRsp message, length delimited. Does not implicitly {@link XmsgImHlrUsrInfoUpdateRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImHlrUsrInfoUpdateRsp
     * @static
     * @param {IXmsgImHlrUsrInfoUpdateRsp} message XmsgImHlrUsrInfoUpdateRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImHlrUsrInfoUpdateRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImHlrUsrInfoUpdateRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImHlrUsrInfoUpdateRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImHlrUsrInfoUpdateRsp} XmsgImHlrUsrInfoUpdateRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrUsrInfoUpdateRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImHlrUsrInfoUpdateRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ext = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImHlrUsrInfoUpdateRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImHlrUsrInfoUpdateRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImHlrUsrInfoUpdateRsp} XmsgImHlrUsrInfoUpdateRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImHlrUsrInfoUpdateRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImHlrUsrInfoUpdateRsp message.
     * @function verify
     * @memberof XmsgImHlrUsrInfoUpdateRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImHlrUsrInfoUpdateRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ext != null && message.hasOwnProperty("ext"))
            if (!$util.isString(message.ext))
                return "ext: string expected";
        return null;
    };

    /**
     * Creates a XmsgImHlrUsrInfoUpdateRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImHlrUsrInfoUpdateRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImHlrUsrInfoUpdateRsp} XmsgImHlrUsrInfoUpdateRsp
     */
    XmsgImHlrUsrInfoUpdateRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImHlrUsrInfoUpdateRsp)
            return object;
        var message = new $root.XmsgImHlrUsrInfoUpdateRsp();
        if (object.ext != null)
            message.ext = String(object.ext);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImHlrUsrInfoUpdateRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImHlrUsrInfoUpdateRsp
     * @static
     * @param {XmsgImHlrUsrInfoUpdateRsp} message XmsgImHlrUsrInfoUpdateRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImHlrUsrInfoUpdateRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.ext = "";
        if (message.ext != null && message.hasOwnProperty("ext"))
            object.ext = message.ext;
        return object;
    };

    /**
     * Converts this XmsgImHlrUsrInfoUpdateRsp to JSON.
     * @function toJSON
     * @memberof XmsgImHlrUsrInfoUpdateRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImHlrUsrInfoUpdateRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImHlrUsrInfoUpdateRsp;
})();

$root.XmsgImClientDbCrudReq = (function() {

    /**
     * Properties of a XmsgImClientDbCrudReq.
     * @exports IXmsgImClientDbCrudReq
     * @interface IXmsgImClientDbCrudReq
     * @property {string|null} [sql] XmsgImClientDbCrudReq sql
     * @property {Array.<IXmsgImClientDbRow>|null} [row] XmsgImClientDbCrudReq row
     */

    /**
     * Constructs a new XmsgImClientDbCrudReq.
     * @exports XmsgImClientDbCrudReq
     * @classdesc Represents a XmsgImClientDbCrudReq.
     * @implements IXmsgImClientDbCrudReq
     * @constructor
     * @param {IXmsgImClientDbCrudReq=} [properties] Properties to set
     */
    function XmsgImClientDbCrudReq(properties) {
        this.row = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImClientDbCrudReq sql.
     * @member {string} sql
     * @memberof XmsgImClientDbCrudReq
     * @instance
     */
    XmsgImClientDbCrudReq.prototype.sql = "";

    /**
     * XmsgImClientDbCrudReq row.
     * @member {Array.<IXmsgImClientDbRow>} row
     * @memberof XmsgImClientDbCrudReq
     * @instance
     */
    XmsgImClientDbCrudReq.prototype.row = $util.emptyArray;

    /**
     * Creates a new XmsgImClientDbCrudReq instance using the specified properties.
     * @function create
     * @memberof XmsgImClientDbCrudReq
     * @static
     * @param {IXmsgImClientDbCrudReq=} [properties] Properties to set
     * @returns {XmsgImClientDbCrudReq} XmsgImClientDbCrudReq instance
     */
    XmsgImClientDbCrudReq.create = function create(properties) {
        return new XmsgImClientDbCrudReq(properties);
    };

    /**
     * Encodes the specified XmsgImClientDbCrudReq message. Does not implicitly {@link XmsgImClientDbCrudReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImClientDbCrudReq
     * @static
     * @param {IXmsgImClientDbCrudReq} message XmsgImClientDbCrudReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImClientDbCrudReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.sql != null && message.hasOwnProperty("sql"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.sql);
        if (message.row != null && message.row.length)
            for (var i = 0; i < message.row.length; ++i)
                $root.XmsgImClientDbRow.encode(message.row[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImClientDbCrudReq message, length delimited. Does not implicitly {@link XmsgImClientDbCrudReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImClientDbCrudReq
     * @static
     * @param {IXmsgImClientDbCrudReq} message XmsgImClientDbCrudReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImClientDbCrudReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImClientDbCrudReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImClientDbCrudReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImClientDbCrudReq} XmsgImClientDbCrudReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImClientDbCrudReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImClientDbCrudReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.sql = reader.string();
                break;
            case 2:
                if (!(message.row && message.row.length))
                    message.row = [];
                message.row.push($root.XmsgImClientDbRow.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImClientDbCrudReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImClientDbCrudReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImClientDbCrudReq} XmsgImClientDbCrudReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImClientDbCrudReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImClientDbCrudReq message.
     * @function verify
     * @memberof XmsgImClientDbCrudReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImClientDbCrudReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.sql != null && message.hasOwnProperty("sql"))
            if (!$util.isString(message.sql))
                return "sql: string expected";
        if (message.row != null && message.hasOwnProperty("row")) {
            if (!Array.isArray(message.row))
                return "row: array expected";
            for (var i = 0; i < message.row.length; ++i) {
                var error = $root.XmsgImClientDbRow.verify(message.row[i]);
                if (error)
                    return "row." + error;
            }
        }
        return null;
    };

    /**
     * Creates a XmsgImClientDbCrudReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImClientDbCrudReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImClientDbCrudReq} XmsgImClientDbCrudReq
     */
    XmsgImClientDbCrudReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImClientDbCrudReq)
            return object;
        var message = new $root.XmsgImClientDbCrudReq();
        if (object.sql != null)
            message.sql = String(object.sql);
        if (object.row) {
            if (!Array.isArray(object.row))
                throw TypeError(".XmsgImClientDbCrudReq.row: array expected");
            message.row = [];
            for (var i = 0; i < object.row.length; ++i) {
                if (typeof object.row[i] !== "object")
                    throw TypeError(".XmsgImClientDbCrudReq.row: object expected");
                message.row[i] = $root.XmsgImClientDbRow.fromObject(object.row[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImClientDbCrudReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImClientDbCrudReq
     * @static
     * @param {XmsgImClientDbCrudReq} message XmsgImClientDbCrudReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImClientDbCrudReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.row = [];
        if (options.defaults)
            object.sql = "";
        if (message.sql != null && message.hasOwnProperty("sql"))
            object.sql = message.sql;
        if (message.row && message.row.length) {
            object.row = [];
            for (var j = 0; j < message.row.length; ++j)
                object.row[j] = $root.XmsgImClientDbRow.toObject(message.row[j], options);
        }
        return object;
    };

    /**
     * Converts this XmsgImClientDbCrudReq to JSON.
     * @function toJSON
     * @memberof XmsgImClientDbCrudReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImClientDbCrudReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImClientDbCrudReq;
})();

$root.XmsgImClientDbCrudRsp = (function() {

    /**
     * Properties of a XmsgImClientDbCrudRsp.
     * @exports IXmsgImClientDbCrudRsp
     * @interface IXmsgImClientDbCrudRsp
     * @property {number|null} [change] XmsgImClientDbCrudRsp change
     * @property {Object.<string,number>|null} [column] XmsgImClientDbCrudRsp column
     * @property {Array.<IXmsgImClientDbRow>|null} [row] XmsgImClientDbCrudRsp row
     */

    /**
     * Constructs a new XmsgImClientDbCrudRsp.
     * @exports XmsgImClientDbCrudRsp
     * @classdesc Represents a XmsgImClientDbCrudRsp.
     * @implements IXmsgImClientDbCrudRsp
     * @constructor
     * @param {IXmsgImClientDbCrudRsp=} [properties] Properties to set
     */
    function XmsgImClientDbCrudRsp(properties) {
        this.column = {};
        this.row = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImClientDbCrudRsp change.
     * @member {number} change
     * @memberof XmsgImClientDbCrudRsp
     * @instance
     */
    XmsgImClientDbCrudRsp.prototype.change = 0;

    /**
     * XmsgImClientDbCrudRsp column.
     * @member {Object.<string,number>} column
     * @memberof XmsgImClientDbCrudRsp
     * @instance
     */
    XmsgImClientDbCrudRsp.prototype.column = $util.emptyObject;

    /**
     * XmsgImClientDbCrudRsp row.
     * @member {Array.<IXmsgImClientDbRow>} row
     * @memberof XmsgImClientDbCrudRsp
     * @instance
     */
    XmsgImClientDbCrudRsp.prototype.row = $util.emptyArray;

    /**
     * Creates a new XmsgImClientDbCrudRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImClientDbCrudRsp
     * @static
     * @param {IXmsgImClientDbCrudRsp=} [properties] Properties to set
     * @returns {XmsgImClientDbCrudRsp} XmsgImClientDbCrudRsp instance
     */
    XmsgImClientDbCrudRsp.create = function create(properties) {
        return new XmsgImClientDbCrudRsp(properties);
    };

    /**
     * Encodes the specified XmsgImClientDbCrudRsp message. Does not implicitly {@link XmsgImClientDbCrudRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImClientDbCrudRsp
     * @static
     * @param {IXmsgImClientDbCrudRsp} message XmsgImClientDbCrudRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImClientDbCrudRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.change != null && message.hasOwnProperty("change"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.change);
        if (message.column != null && message.hasOwnProperty("column"))
            for (var keys = Object.keys(message.column), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).uint32(message.column[keys[i]]).ldelim();
        if (message.row != null && message.row.length)
            for (var i = 0; i < message.row.length; ++i)
                $root.XmsgImClientDbRow.encode(message.row[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImClientDbCrudRsp message, length delimited. Does not implicitly {@link XmsgImClientDbCrudRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImClientDbCrudRsp
     * @static
     * @param {IXmsgImClientDbCrudRsp} message XmsgImClientDbCrudRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImClientDbCrudRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImClientDbCrudRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImClientDbCrudRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImClientDbCrudRsp} XmsgImClientDbCrudRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImClientDbCrudRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImClientDbCrudRsp(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.change = reader.uint32();
                break;
            case 2:
                reader.skip().pos++;
                if (message.column === $util.emptyObject)
                    message.column = {};
                key = reader.string();
                reader.pos++;
                message.column[key] = reader.uint32();
                break;
            case 4:
                if (!(message.row && message.row.length))
                    message.row = [];
                message.row.push($root.XmsgImClientDbRow.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImClientDbCrudRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImClientDbCrudRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImClientDbCrudRsp} XmsgImClientDbCrudRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImClientDbCrudRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImClientDbCrudRsp message.
     * @function verify
     * @memberof XmsgImClientDbCrudRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImClientDbCrudRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.change != null && message.hasOwnProperty("change"))
            if (!$util.isInteger(message.change))
                return "change: integer expected";
        if (message.column != null && message.hasOwnProperty("column")) {
            if (!$util.isObject(message.column))
                return "column: object expected";
            var key = Object.keys(message.column);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isInteger(message.column[key[i]]))
                    return "column: integer{k:string} expected";
        }
        if (message.row != null && message.hasOwnProperty("row")) {
            if (!Array.isArray(message.row))
                return "row: array expected";
            for (var i = 0; i < message.row.length; ++i) {
                var error = $root.XmsgImClientDbRow.verify(message.row[i]);
                if (error)
                    return "row." + error;
            }
        }
        return null;
    };

    /**
     * Creates a XmsgImClientDbCrudRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImClientDbCrudRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImClientDbCrudRsp} XmsgImClientDbCrudRsp
     */
    XmsgImClientDbCrudRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImClientDbCrudRsp)
            return object;
        var message = new $root.XmsgImClientDbCrudRsp();
        if (object.change != null)
            message.change = object.change >>> 0;
        if (object.column) {
            if (typeof object.column !== "object")
                throw TypeError(".XmsgImClientDbCrudRsp.column: object expected");
            message.column = {};
            for (var keys = Object.keys(object.column), i = 0; i < keys.length; ++i)
                message.column[keys[i]] = object.column[keys[i]] >>> 0;
        }
        if (object.row) {
            if (!Array.isArray(object.row))
                throw TypeError(".XmsgImClientDbCrudRsp.row: array expected");
            message.row = [];
            for (var i = 0; i < object.row.length; ++i) {
                if (typeof object.row[i] !== "object")
                    throw TypeError(".XmsgImClientDbCrudRsp.row: object expected");
                message.row[i] = $root.XmsgImClientDbRow.fromObject(object.row[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImClientDbCrudRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImClientDbCrudRsp
     * @static
     * @param {XmsgImClientDbCrudRsp} message XmsgImClientDbCrudRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImClientDbCrudRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.row = [];
        if (options.objects || options.defaults)
            object.column = {};
        if (options.defaults)
            object.change = 0;
        if (message.change != null && message.hasOwnProperty("change"))
            object.change = message.change;
        var keys2;
        if (message.column && (keys2 = Object.keys(message.column)).length) {
            object.column = {};
            for (var j = 0; j < keys2.length; ++j)
                object.column[keys2[j]] = message.column[keys2[j]];
        }
        if (message.row && message.row.length) {
            object.row = [];
            for (var j = 0; j < message.row.length; ++j)
                object.row[j] = $root.XmsgImClientDbRow.toObject(message.row[j], options);
        }
        return object;
    };

    /**
     * Converts this XmsgImClientDbCrudRsp to JSON.
     * @function toJSON
     * @memberof XmsgImClientDbCrudRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImClientDbCrudRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImClientDbCrudRsp;
})();

$root.XmsgImClientDbRow = (function() {

    /**
     * Properties of a XmsgImClientDbRow.
     * @exports IXmsgImClientDbRow
     * @interface IXmsgImClientDbRow
     * @property {Array.<IXmsgImClientDbFiled>|null} [col] XmsgImClientDbRow col
     */

    /**
     * Constructs a new XmsgImClientDbRow.
     * @exports XmsgImClientDbRow
     * @classdesc Represents a XmsgImClientDbRow.
     * @implements IXmsgImClientDbRow
     * @constructor
     * @param {IXmsgImClientDbRow=} [properties] Properties to set
     */
    function XmsgImClientDbRow(properties) {
        this.col = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImClientDbRow col.
     * @member {Array.<IXmsgImClientDbFiled>} col
     * @memberof XmsgImClientDbRow
     * @instance
     */
    XmsgImClientDbRow.prototype.col = $util.emptyArray;

    /**
     * Creates a new XmsgImClientDbRow instance using the specified properties.
     * @function create
     * @memberof XmsgImClientDbRow
     * @static
     * @param {IXmsgImClientDbRow=} [properties] Properties to set
     * @returns {XmsgImClientDbRow} XmsgImClientDbRow instance
     */
    XmsgImClientDbRow.create = function create(properties) {
        return new XmsgImClientDbRow(properties);
    };

    /**
     * Encodes the specified XmsgImClientDbRow message. Does not implicitly {@link XmsgImClientDbRow.verify|verify} messages.
     * @function encode
     * @memberof XmsgImClientDbRow
     * @static
     * @param {IXmsgImClientDbRow} message XmsgImClientDbRow message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImClientDbRow.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.col != null && message.col.length)
            for (var i = 0; i < message.col.length; ++i)
                $root.XmsgImClientDbFiled.encode(message.col[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImClientDbRow message, length delimited. Does not implicitly {@link XmsgImClientDbRow.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImClientDbRow
     * @static
     * @param {IXmsgImClientDbRow} message XmsgImClientDbRow message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImClientDbRow.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImClientDbRow message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImClientDbRow
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImClientDbRow} XmsgImClientDbRow
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImClientDbRow.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImClientDbRow();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.col && message.col.length))
                    message.col = [];
                message.col.push($root.XmsgImClientDbFiled.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImClientDbRow message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImClientDbRow
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImClientDbRow} XmsgImClientDbRow
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImClientDbRow.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImClientDbRow message.
     * @function verify
     * @memberof XmsgImClientDbRow
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImClientDbRow.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.col != null && message.hasOwnProperty("col")) {
            if (!Array.isArray(message.col))
                return "col: array expected";
            for (var i = 0; i < message.col.length; ++i) {
                var error = $root.XmsgImClientDbFiled.verify(message.col[i]);
                if (error)
                    return "col." + error;
            }
        }
        return null;
    };

    /**
     * Creates a XmsgImClientDbRow message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImClientDbRow
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImClientDbRow} XmsgImClientDbRow
     */
    XmsgImClientDbRow.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImClientDbRow)
            return object;
        var message = new $root.XmsgImClientDbRow();
        if (object.col) {
            if (!Array.isArray(object.col))
                throw TypeError(".XmsgImClientDbRow.col: array expected");
            message.col = [];
            for (var i = 0; i < object.col.length; ++i) {
                if (typeof object.col[i] !== "object")
                    throw TypeError(".XmsgImClientDbRow.col: object expected");
                message.col[i] = $root.XmsgImClientDbFiled.fromObject(object.col[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImClientDbRow message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImClientDbRow
     * @static
     * @param {XmsgImClientDbRow} message XmsgImClientDbRow
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImClientDbRow.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.col = [];
        if (message.col && message.col.length) {
            object.col = [];
            for (var j = 0; j < message.col.length; ++j)
                object.col[j] = $root.XmsgImClientDbFiled.toObject(message.col[j], options);
        }
        return object;
    };

    /**
     * Converts this XmsgImClientDbRow to JSON.
     * @function toJSON
     * @memberof XmsgImClientDbRow
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImClientDbRow.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImClientDbRow;
})();

$root.XmsgImClientDbFiled = (function() {

    /**
     * Properties of a XmsgImClientDbFiled.
     * @exports IXmsgImClientDbFiled
     * @interface IXmsgImClientDbFiled
     * @property {XmsgImClientDbFiledType|null} [type] XmsgImClientDbFiled type
     * @property {number|Long|null} [valInt] XmsgImClientDbFiled valInt
     * @property {string|null} [valText] XmsgImClientDbFiled valText
     * @property {Uint8Array|null} [valBlob] XmsgImClientDbFiled valBlob
     */

    /**
     * Constructs a new XmsgImClientDbFiled.
     * @exports XmsgImClientDbFiled
     * @classdesc Represents a XmsgImClientDbFiled.
     * @implements IXmsgImClientDbFiled
     * @constructor
     * @param {IXmsgImClientDbFiled=} [properties] Properties to set
     */
    function XmsgImClientDbFiled(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImClientDbFiled type.
     * @member {XmsgImClientDbFiledType} type
     * @memberof XmsgImClientDbFiled
     * @instance
     */
    XmsgImClientDbFiled.prototype.type = 0;

    /**
     * XmsgImClientDbFiled valInt.
     * @member {number|Long} valInt
     * @memberof XmsgImClientDbFiled
     * @instance
     */
    XmsgImClientDbFiled.prototype.valInt = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImClientDbFiled valText.
     * @member {string} valText
     * @memberof XmsgImClientDbFiled
     * @instance
     */
    XmsgImClientDbFiled.prototype.valText = "";

    /**
     * XmsgImClientDbFiled valBlob.
     * @member {Uint8Array} valBlob
     * @memberof XmsgImClientDbFiled
     * @instance
     */
    XmsgImClientDbFiled.prototype.valBlob = $util.newBuffer([]);

    /**
     * Creates a new XmsgImClientDbFiled instance using the specified properties.
     * @function create
     * @memberof XmsgImClientDbFiled
     * @static
     * @param {IXmsgImClientDbFiled=} [properties] Properties to set
     * @returns {XmsgImClientDbFiled} XmsgImClientDbFiled instance
     */
    XmsgImClientDbFiled.create = function create(properties) {
        return new XmsgImClientDbFiled(properties);
    };

    /**
     * Encodes the specified XmsgImClientDbFiled message. Does not implicitly {@link XmsgImClientDbFiled.verify|verify} messages.
     * @function encode
     * @memberof XmsgImClientDbFiled
     * @static
     * @param {IXmsgImClientDbFiled} message XmsgImClientDbFiled message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImClientDbFiled.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
        if (message.valInt != null && message.hasOwnProperty("valInt"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.valInt);
        if (message.valText != null && message.hasOwnProperty("valText"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.valText);
        if (message.valBlob != null && message.hasOwnProperty("valBlob"))
            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.valBlob);
        return writer;
    };

    /**
     * Encodes the specified XmsgImClientDbFiled message, length delimited. Does not implicitly {@link XmsgImClientDbFiled.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImClientDbFiled
     * @static
     * @param {IXmsgImClientDbFiled} message XmsgImClientDbFiled message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImClientDbFiled.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImClientDbFiled message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImClientDbFiled
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImClientDbFiled} XmsgImClientDbFiled
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImClientDbFiled.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImClientDbFiled();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.type = reader.int32();
                break;
            case 2:
                message.valInt = reader.uint64();
                break;
            case 3:
                message.valText = reader.string();
                break;
            case 4:
                message.valBlob = reader.bytes();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImClientDbFiled message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImClientDbFiled
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImClientDbFiled} XmsgImClientDbFiled
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImClientDbFiled.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImClientDbFiled message.
     * @function verify
     * @memberof XmsgImClientDbFiled
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImClientDbFiled.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.valInt != null && message.hasOwnProperty("valInt"))
            if (!$util.isInteger(message.valInt) && !(message.valInt && $util.isInteger(message.valInt.low) && $util.isInteger(message.valInt.high)))
                return "valInt: integer|Long expected";
        if (message.valText != null && message.hasOwnProperty("valText"))
            if (!$util.isString(message.valText))
                return "valText: string expected";
        if (message.valBlob != null && message.hasOwnProperty("valBlob"))
            if (!(message.valBlob && typeof message.valBlob.length === "number" || $util.isString(message.valBlob)))
                return "valBlob: buffer expected";
        return null;
    };

    /**
     * Creates a XmsgImClientDbFiled message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImClientDbFiled
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImClientDbFiled} XmsgImClientDbFiled
     */
    XmsgImClientDbFiled.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImClientDbFiled)
            return object;
        var message = new $root.XmsgImClientDbFiled();
        switch (object.type) {
        case "X_MSG_IM_CLIENT_DB_FILED_TYPE_BIGINT":
        case 0:
            message.type = 0;
            break;
        case "X_MSG_IM_CLIENT_DB_FILED_TYPE_TEXT":
        case 1:
            message.type = 1;
            break;
        case "X_MSG_IM_CLIENT_DB_FILED_TYPE_BLOB":
        case 2:
            message.type = 2;
            break;
        case "X_MSG_IM_CLIENT_DB_FILED_TYPE_NULL":
        case 3:
            message.type = 3;
            break;
        }
        if (object.valInt != null)
            if ($util.Long)
                (message.valInt = $util.Long.fromValue(object.valInt)).unsigned = true;
            else if (typeof object.valInt === "string")
                message.valInt = parseInt(object.valInt, 10);
            else if (typeof object.valInt === "number")
                message.valInt = object.valInt;
            else if (typeof object.valInt === "object")
                message.valInt = new $util.LongBits(object.valInt.low >>> 0, object.valInt.high >>> 0).toNumber(true);
        if (object.valText != null)
            message.valText = String(object.valText);
        if (object.valBlob != null)
            if (typeof object.valBlob === "string")
                $util.base64.decode(object.valBlob, message.valBlob = $util.newBuffer($util.base64.length(object.valBlob)), 0);
            else if (object.valBlob.length)
                message.valBlob = object.valBlob;
        return message;
    };

    /**
     * Creates a plain object from a XmsgImClientDbFiled message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImClientDbFiled
     * @static
     * @param {XmsgImClientDbFiled} message XmsgImClientDbFiled
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImClientDbFiled.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.type = options.enums === String ? "X_MSG_IM_CLIENT_DB_FILED_TYPE_BIGINT" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.valInt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.valInt = options.longs === String ? "0" : 0;
            object.valText = "";
            if (options.bytes === String)
                object.valBlob = "";
            else {
                object.valBlob = [];
                if (options.bytes !== Array)
                    object.valBlob = $util.newBuffer(object.valBlob);
            }
        }
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.XmsgImClientDbFiledType[message.type] : message.type;
        if (message.valInt != null && message.hasOwnProperty("valInt"))
            if (typeof message.valInt === "number")
                object.valInt = options.longs === String ? String(message.valInt) : message.valInt;
            else
                object.valInt = options.longs === String ? $util.Long.prototype.toString.call(message.valInt) : options.longs === Number ? new $util.LongBits(message.valInt.low >>> 0, message.valInt.high >>> 0).toNumber(true) : message.valInt;
        if (message.valText != null && message.hasOwnProperty("valText"))
            object.valText = message.valText;
        if (message.valBlob != null && message.hasOwnProperty("valBlob"))
            object.valBlob = options.bytes === String ? $util.base64.encode(message.valBlob, 0, message.valBlob.length) : options.bytes === Array ? Array.prototype.slice.call(message.valBlob) : message.valBlob;
        return object;
    };

    /**
     * Converts this XmsgImClientDbFiled to JSON.
     * @function toJSON
     * @memberof XmsgImClientDbFiled
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImClientDbFiled.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImClientDbFiled;
})();

/**
 * XmsgImClientDbFiledType enum.
 * @exports XmsgImClientDbFiledType
 * @enum {string}
 * @property {number} X_MSG_IM_CLIENT_DB_FILED_TYPE_BIGINT=0 X_MSG_IM_CLIENT_DB_FILED_TYPE_BIGINT value
 * @property {number} X_MSG_IM_CLIENT_DB_FILED_TYPE_TEXT=1 X_MSG_IM_CLIENT_DB_FILED_TYPE_TEXT value
 * @property {number} X_MSG_IM_CLIENT_DB_FILED_TYPE_BLOB=2 X_MSG_IM_CLIENT_DB_FILED_TYPE_BLOB value
 * @property {number} X_MSG_IM_CLIENT_DB_FILED_TYPE_NULL=3 X_MSG_IM_CLIENT_DB_FILED_TYPE_NULL value
 */
$root.XmsgImClientDbFiledType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "X_MSG_IM_CLIENT_DB_FILED_TYPE_BIGINT"] = 0;
    values[valuesById[1] = "X_MSG_IM_CLIENT_DB_FILED_TYPE_TEXT"] = 1;
    values[valuesById[2] = "X_MSG_IM_CLIENT_DB_FILED_TYPE_BLOB"] = 2;
    values[valuesById[3] = "X_MSG_IM_CLIENT_DB_FILED_TYPE_NULL"] = 3;
    return values;
})();

$root.XmsgImClientKv = (function() {

    /**
     * Properties of a XmsgImClientKv.
     * @exports IXmsgImClientKv
     * @interface IXmsgImClientKv
     * @property {Object.<string,string>|null} [kv] XmsgImClientKv kv
     */

    /**
     * Constructs a new XmsgImClientKv.
     * @exports XmsgImClientKv
     * @classdesc Represents a XmsgImClientKv.
     * @implements IXmsgImClientKv
     * @constructor
     * @param {IXmsgImClientKv=} [properties] Properties to set
     */
    function XmsgImClientKv(properties) {
        this.kv = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImClientKv kv.
     * @member {Object.<string,string>} kv
     * @memberof XmsgImClientKv
     * @instance
     */
    XmsgImClientKv.prototype.kv = $util.emptyObject;

    /**
     * Creates a new XmsgImClientKv instance using the specified properties.
     * @function create
     * @memberof XmsgImClientKv
     * @static
     * @param {IXmsgImClientKv=} [properties] Properties to set
     * @returns {XmsgImClientKv} XmsgImClientKv instance
     */
    XmsgImClientKv.create = function create(properties) {
        return new XmsgImClientKv(properties);
    };

    /**
     * Encodes the specified XmsgImClientKv message. Does not implicitly {@link XmsgImClientKv.verify|verify} messages.
     * @function encode
     * @memberof XmsgImClientKv
     * @static
     * @param {IXmsgImClientKv} message XmsgImClientKv message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImClientKv.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.kv != null && message.hasOwnProperty("kv"))
            for (var keys = Object.keys(message.kv), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.kv[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImClientKv message, length delimited. Does not implicitly {@link XmsgImClientKv.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImClientKv
     * @static
     * @param {IXmsgImClientKv} message XmsgImClientKv message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImClientKv.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImClientKv message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImClientKv
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImClientKv} XmsgImClientKv
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImClientKv.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImClientKv(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                reader.skip().pos++;
                if (message.kv === $util.emptyObject)
                    message.kv = {};
                key = reader.string();
                reader.pos++;
                message.kv[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImClientKv message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImClientKv
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImClientKv} XmsgImClientKv
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImClientKv.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImClientKv message.
     * @function verify
     * @memberof XmsgImClientKv
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImClientKv.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.kv != null && message.hasOwnProperty("kv")) {
            if (!$util.isObject(message.kv))
                return "kv: object expected";
            var key = Object.keys(message.kv);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.kv[key[i]]))
                    return "kv: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImClientKv message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImClientKv
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImClientKv} XmsgImClientKv
     */
    XmsgImClientKv.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImClientKv)
            return object;
        var message = new $root.XmsgImClientKv();
        if (object.kv) {
            if (typeof object.kv !== "object")
                throw TypeError(".XmsgImClientKv.kv: object expected");
            message.kv = {};
            for (var keys = Object.keys(object.kv), i = 0; i < keys.length; ++i)
                message.kv[keys[i]] = String(object.kv[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImClientKv message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImClientKv
     * @static
     * @param {XmsgImClientKv} message XmsgImClientKv
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImClientKv.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.kv = {};
        var keys2;
        if (message.kv && (keys2 = Object.keys(message.kv)).length) {
            object.kv = {};
            for (var j = 0; j < keys2.length; ++j)
                object.kv[keys2[j]] = message.kv[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImClientKv to JSON.
     * @function toJSON
     * @memberof XmsgImClientKv
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImClientKv.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImClientKv;
})();

$root.XmsgImOrgSyncSubReq = (function() {

    /**
     * Properties of a XmsgImOrgSyncSubReq.
     * @exports IXmsgImOrgSyncSubReq
     * @interface IXmsgImOrgSyncSubReq
     * @property {number|Long|null} [ver4dept] XmsgImOrgSyncSubReq ver4dept
     * @property {number|Long|null} [ver4deptUsr] XmsgImOrgSyncSubReq ver4deptUsr
     * @property {number|Long|null} [ver4usr] XmsgImOrgSyncSubReq ver4usr
     */

    /**
     * Constructs a new XmsgImOrgSyncSubReq.
     * @exports XmsgImOrgSyncSubReq
     * @classdesc Represents a XmsgImOrgSyncSubReq.
     * @implements IXmsgImOrgSyncSubReq
     * @constructor
     * @param {IXmsgImOrgSyncSubReq=} [properties] Properties to set
     */
    function XmsgImOrgSyncSubReq(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImOrgSyncSubReq ver4dept.
     * @member {number|Long} ver4dept
     * @memberof XmsgImOrgSyncSubReq
     * @instance
     */
    XmsgImOrgSyncSubReq.prototype.ver4dept = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImOrgSyncSubReq ver4deptUsr.
     * @member {number|Long} ver4deptUsr
     * @memberof XmsgImOrgSyncSubReq
     * @instance
     */
    XmsgImOrgSyncSubReq.prototype.ver4deptUsr = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImOrgSyncSubReq ver4usr.
     * @member {number|Long} ver4usr
     * @memberof XmsgImOrgSyncSubReq
     * @instance
     */
    XmsgImOrgSyncSubReq.prototype.ver4usr = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgImOrgSyncSubReq instance using the specified properties.
     * @function create
     * @memberof XmsgImOrgSyncSubReq
     * @static
     * @param {IXmsgImOrgSyncSubReq=} [properties] Properties to set
     * @returns {XmsgImOrgSyncSubReq} XmsgImOrgSyncSubReq instance
     */
    XmsgImOrgSyncSubReq.create = function create(properties) {
        return new XmsgImOrgSyncSubReq(properties);
    };

    /**
     * Encodes the specified XmsgImOrgSyncSubReq message. Does not implicitly {@link XmsgImOrgSyncSubReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImOrgSyncSubReq
     * @static
     * @param {IXmsgImOrgSyncSubReq} message XmsgImOrgSyncSubReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgSyncSubReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ver4dept != null && message.hasOwnProperty("ver4dept"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.ver4dept);
        if (message.ver4deptUsr != null && message.hasOwnProperty("ver4deptUsr"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ver4deptUsr);
        if (message.ver4usr != null && message.hasOwnProperty("ver4usr"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.ver4usr);
        return writer;
    };

    /**
     * Encodes the specified XmsgImOrgSyncSubReq message, length delimited. Does not implicitly {@link XmsgImOrgSyncSubReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImOrgSyncSubReq
     * @static
     * @param {IXmsgImOrgSyncSubReq} message XmsgImOrgSyncSubReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgSyncSubReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImOrgSyncSubReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImOrgSyncSubReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImOrgSyncSubReq} XmsgImOrgSyncSubReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgSyncSubReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImOrgSyncSubReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ver4dept = reader.uint64();
                break;
            case 2:
                message.ver4deptUsr = reader.uint64();
                break;
            case 3:
                message.ver4usr = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImOrgSyncSubReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImOrgSyncSubReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImOrgSyncSubReq} XmsgImOrgSyncSubReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgSyncSubReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImOrgSyncSubReq message.
     * @function verify
     * @memberof XmsgImOrgSyncSubReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImOrgSyncSubReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ver4dept != null && message.hasOwnProperty("ver4dept"))
            if (!$util.isInteger(message.ver4dept) && !(message.ver4dept && $util.isInteger(message.ver4dept.low) && $util.isInteger(message.ver4dept.high)))
                return "ver4dept: integer|Long expected";
        if (message.ver4deptUsr != null && message.hasOwnProperty("ver4deptUsr"))
            if (!$util.isInteger(message.ver4deptUsr) && !(message.ver4deptUsr && $util.isInteger(message.ver4deptUsr.low) && $util.isInteger(message.ver4deptUsr.high)))
                return "ver4deptUsr: integer|Long expected";
        if (message.ver4usr != null && message.hasOwnProperty("ver4usr"))
            if (!$util.isInteger(message.ver4usr) && !(message.ver4usr && $util.isInteger(message.ver4usr.low) && $util.isInteger(message.ver4usr.high)))
                return "ver4usr: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgImOrgSyncSubReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImOrgSyncSubReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImOrgSyncSubReq} XmsgImOrgSyncSubReq
     */
    XmsgImOrgSyncSubReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImOrgSyncSubReq)
            return object;
        var message = new $root.XmsgImOrgSyncSubReq();
        if (object.ver4dept != null)
            if ($util.Long)
                (message.ver4dept = $util.Long.fromValue(object.ver4dept)).unsigned = true;
            else if (typeof object.ver4dept === "string")
                message.ver4dept = parseInt(object.ver4dept, 10);
            else if (typeof object.ver4dept === "number")
                message.ver4dept = object.ver4dept;
            else if (typeof object.ver4dept === "object")
                message.ver4dept = new $util.LongBits(object.ver4dept.low >>> 0, object.ver4dept.high >>> 0).toNumber(true);
        if (object.ver4deptUsr != null)
            if ($util.Long)
                (message.ver4deptUsr = $util.Long.fromValue(object.ver4deptUsr)).unsigned = true;
            else if (typeof object.ver4deptUsr === "string")
                message.ver4deptUsr = parseInt(object.ver4deptUsr, 10);
            else if (typeof object.ver4deptUsr === "number")
                message.ver4deptUsr = object.ver4deptUsr;
            else if (typeof object.ver4deptUsr === "object")
                message.ver4deptUsr = new $util.LongBits(object.ver4deptUsr.low >>> 0, object.ver4deptUsr.high >>> 0).toNumber(true);
        if (object.ver4usr != null)
            if ($util.Long)
                (message.ver4usr = $util.Long.fromValue(object.ver4usr)).unsigned = true;
            else if (typeof object.ver4usr === "string")
                message.ver4usr = parseInt(object.ver4usr, 10);
            else if (typeof object.ver4usr === "number")
                message.ver4usr = object.ver4usr;
            else if (typeof object.ver4usr === "object")
                message.ver4usr = new $util.LongBits(object.ver4usr.low >>> 0, object.ver4usr.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImOrgSyncSubReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImOrgSyncSubReq
     * @static
     * @param {XmsgImOrgSyncSubReq} message XmsgImOrgSyncSubReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImOrgSyncSubReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver4dept = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver4dept = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver4deptUsr = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver4deptUsr = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver4usr = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver4usr = options.longs === String ? "0" : 0;
        }
        if (message.ver4dept != null && message.hasOwnProperty("ver4dept"))
            if (typeof message.ver4dept === "number")
                object.ver4dept = options.longs === String ? String(message.ver4dept) : message.ver4dept;
            else
                object.ver4dept = options.longs === String ? $util.Long.prototype.toString.call(message.ver4dept) : options.longs === Number ? new $util.LongBits(message.ver4dept.low >>> 0, message.ver4dept.high >>> 0).toNumber(true) : message.ver4dept;
        if (message.ver4deptUsr != null && message.hasOwnProperty("ver4deptUsr"))
            if (typeof message.ver4deptUsr === "number")
                object.ver4deptUsr = options.longs === String ? String(message.ver4deptUsr) : message.ver4deptUsr;
            else
                object.ver4deptUsr = options.longs === String ? $util.Long.prototype.toString.call(message.ver4deptUsr) : options.longs === Number ? new $util.LongBits(message.ver4deptUsr.low >>> 0, message.ver4deptUsr.high >>> 0).toNumber(true) : message.ver4deptUsr;
        if (message.ver4usr != null && message.hasOwnProperty("ver4usr"))
            if (typeof message.ver4usr === "number")
                object.ver4usr = options.longs === String ? String(message.ver4usr) : message.ver4usr;
            else
                object.ver4usr = options.longs === String ? $util.Long.prototype.toString.call(message.ver4usr) : options.longs === Number ? new $util.LongBits(message.ver4usr.low >>> 0, message.ver4usr.high >>> 0).toNumber(true) : message.ver4usr;
        return object;
    };

    /**
     * Converts this XmsgImOrgSyncSubReq to JSON.
     * @function toJSON
     * @memberof XmsgImOrgSyncSubReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImOrgSyncSubReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImOrgSyncSubReq;
})();

$root.XmsgImOrgSyncSubRsp = (function() {

    /**
     * Properties of a XmsgImOrgSyncSubRsp.
     * @exports IXmsgImOrgSyncSubRsp
     * @interface IXmsgImOrgSyncSubRsp
     * @property {number|Long|null} [ver4deptLatest] XmsgImOrgSyncSubRsp ver4deptLatest
     * @property {number|Long|null} [ver4deptUsrLatest] XmsgImOrgSyncSubRsp ver4deptUsrLatest
     * @property {number|Long|null} [ver4usrLatest] XmsgImOrgSyncSubRsp ver4usrLatest
     */

    /**
     * Constructs a new XmsgImOrgSyncSubRsp.
     * @exports XmsgImOrgSyncSubRsp
     * @classdesc Represents a XmsgImOrgSyncSubRsp.
     * @implements IXmsgImOrgSyncSubRsp
     * @constructor
     * @param {IXmsgImOrgSyncSubRsp=} [properties] Properties to set
     */
    function XmsgImOrgSyncSubRsp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImOrgSyncSubRsp ver4deptLatest.
     * @member {number|Long} ver4deptLatest
     * @memberof XmsgImOrgSyncSubRsp
     * @instance
     */
    XmsgImOrgSyncSubRsp.prototype.ver4deptLatest = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImOrgSyncSubRsp ver4deptUsrLatest.
     * @member {number|Long} ver4deptUsrLatest
     * @memberof XmsgImOrgSyncSubRsp
     * @instance
     */
    XmsgImOrgSyncSubRsp.prototype.ver4deptUsrLatest = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImOrgSyncSubRsp ver4usrLatest.
     * @member {number|Long} ver4usrLatest
     * @memberof XmsgImOrgSyncSubRsp
     * @instance
     */
    XmsgImOrgSyncSubRsp.prototype.ver4usrLatest = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgImOrgSyncSubRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImOrgSyncSubRsp
     * @static
     * @param {IXmsgImOrgSyncSubRsp=} [properties] Properties to set
     * @returns {XmsgImOrgSyncSubRsp} XmsgImOrgSyncSubRsp instance
     */
    XmsgImOrgSyncSubRsp.create = function create(properties) {
        return new XmsgImOrgSyncSubRsp(properties);
    };

    /**
     * Encodes the specified XmsgImOrgSyncSubRsp message. Does not implicitly {@link XmsgImOrgSyncSubRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImOrgSyncSubRsp
     * @static
     * @param {IXmsgImOrgSyncSubRsp} message XmsgImOrgSyncSubRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgSyncSubRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ver4deptLatest != null && message.hasOwnProperty("ver4deptLatest"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.ver4deptLatest);
        if (message.ver4deptUsrLatest != null && message.hasOwnProperty("ver4deptUsrLatest"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ver4deptUsrLatest);
        if (message.ver4usrLatest != null && message.hasOwnProperty("ver4usrLatest"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.ver4usrLatest);
        return writer;
    };

    /**
     * Encodes the specified XmsgImOrgSyncSubRsp message, length delimited. Does not implicitly {@link XmsgImOrgSyncSubRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImOrgSyncSubRsp
     * @static
     * @param {IXmsgImOrgSyncSubRsp} message XmsgImOrgSyncSubRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgSyncSubRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImOrgSyncSubRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImOrgSyncSubRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImOrgSyncSubRsp} XmsgImOrgSyncSubRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgSyncSubRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImOrgSyncSubRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ver4deptLatest = reader.uint64();
                break;
            case 2:
                message.ver4deptUsrLatest = reader.uint64();
                break;
            case 3:
                message.ver4usrLatest = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImOrgSyncSubRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImOrgSyncSubRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImOrgSyncSubRsp} XmsgImOrgSyncSubRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgSyncSubRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImOrgSyncSubRsp message.
     * @function verify
     * @memberof XmsgImOrgSyncSubRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImOrgSyncSubRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ver4deptLatest != null && message.hasOwnProperty("ver4deptLatest"))
            if (!$util.isInteger(message.ver4deptLatest) && !(message.ver4deptLatest && $util.isInteger(message.ver4deptLatest.low) && $util.isInteger(message.ver4deptLatest.high)))
                return "ver4deptLatest: integer|Long expected";
        if (message.ver4deptUsrLatest != null && message.hasOwnProperty("ver4deptUsrLatest"))
            if (!$util.isInteger(message.ver4deptUsrLatest) && !(message.ver4deptUsrLatest && $util.isInteger(message.ver4deptUsrLatest.low) && $util.isInteger(message.ver4deptUsrLatest.high)))
                return "ver4deptUsrLatest: integer|Long expected";
        if (message.ver4usrLatest != null && message.hasOwnProperty("ver4usrLatest"))
            if (!$util.isInteger(message.ver4usrLatest) && !(message.ver4usrLatest && $util.isInteger(message.ver4usrLatest.low) && $util.isInteger(message.ver4usrLatest.high)))
                return "ver4usrLatest: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgImOrgSyncSubRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImOrgSyncSubRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImOrgSyncSubRsp} XmsgImOrgSyncSubRsp
     */
    XmsgImOrgSyncSubRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImOrgSyncSubRsp)
            return object;
        var message = new $root.XmsgImOrgSyncSubRsp();
        if (object.ver4deptLatest != null)
            if ($util.Long)
                (message.ver4deptLatest = $util.Long.fromValue(object.ver4deptLatest)).unsigned = true;
            else if (typeof object.ver4deptLatest === "string")
                message.ver4deptLatest = parseInt(object.ver4deptLatest, 10);
            else if (typeof object.ver4deptLatest === "number")
                message.ver4deptLatest = object.ver4deptLatest;
            else if (typeof object.ver4deptLatest === "object")
                message.ver4deptLatest = new $util.LongBits(object.ver4deptLatest.low >>> 0, object.ver4deptLatest.high >>> 0).toNumber(true);
        if (object.ver4deptUsrLatest != null)
            if ($util.Long)
                (message.ver4deptUsrLatest = $util.Long.fromValue(object.ver4deptUsrLatest)).unsigned = true;
            else if (typeof object.ver4deptUsrLatest === "string")
                message.ver4deptUsrLatest = parseInt(object.ver4deptUsrLatest, 10);
            else if (typeof object.ver4deptUsrLatest === "number")
                message.ver4deptUsrLatest = object.ver4deptUsrLatest;
            else if (typeof object.ver4deptUsrLatest === "object")
                message.ver4deptUsrLatest = new $util.LongBits(object.ver4deptUsrLatest.low >>> 0, object.ver4deptUsrLatest.high >>> 0).toNumber(true);
        if (object.ver4usrLatest != null)
            if ($util.Long)
                (message.ver4usrLatest = $util.Long.fromValue(object.ver4usrLatest)).unsigned = true;
            else if (typeof object.ver4usrLatest === "string")
                message.ver4usrLatest = parseInt(object.ver4usrLatest, 10);
            else if (typeof object.ver4usrLatest === "number")
                message.ver4usrLatest = object.ver4usrLatest;
            else if (typeof object.ver4usrLatest === "object")
                message.ver4usrLatest = new $util.LongBits(object.ver4usrLatest.low >>> 0, object.ver4usrLatest.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImOrgSyncSubRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImOrgSyncSubRsp
     * @static
     * @param {XmsgImOrgSyncSubRsp} message XmsgImOrgSyncSubRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImOrgSyncSubRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver4deptLatest = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver4deptLatest = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver4deptUsrLatest = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver4deptUsrLatest = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver4usrLatest = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver4usrLatest = options.longs === String ? "0" : 0;
        }
        if (message.ver4deptLatest != null && message.hasOwnProperty("ver4deptLatest"))
            if (typeof message.ver4deptLatest === "number")
                object.ver4deptLatest = options.longs === String ? String(message.ver4deptLatest) : message.ver4deptLatest;
            else
                object.ver4deptLatest = options.longs === String ? $util.Long.prototype.toString.call(message.ver4deptLatest) : options.longs === Number ? new $util.LongBits(message.ver4deptLatest.low >>> 0, message.ver4deptLatest.high >>> 0).toNumber(true) : message.ver4deptLatest;
        if (message.ver4deptUsrLatest != null && message.hasOwnProperty("ver4deptUsrLatest"))
            if (typeof message.ver4deptUsrLatest === "number")
                object.ver4deptUsrLatest = options.longs === String ? String(message.ver4deptUsrLatest) : message.ver4deptUsrLatest;
            else
                object.ver4deptUsrLatest = options.longs === String ? $util.Long.prototype.toString.call(message.ver4deptUsrLatest) : options.longs === Number ? new $util.LongBits(message.ver4deptUsrLatest.low >>> 0, message.ver4deptUsrLatest.high >>> 0).toNumber(true) : message.ver4deptUsrLatest;
        if (message.ver4usrLatest != null && message.hasOwnProperty("ver4usrLatest"))
            if (typeof message.ver4usrLatest === "number")
                object.ver4usrLatest = options.longs === String ? String(message.ver4usrLatest) : message.ver4usrLatest;
            else
                object.ver4usrLatest = options.longs === String ? $util.Long.prototype.toString.call(message.ver4usrLatest) : options.longs === Number ? new $util.LongBits(message.ver4usrLatest.low >>> 0, message.ver4usrLatest.high >>> 0).toNumber(true) : message.ver4usrLatest;
        return object;
    };

    /**
     * Converts this XmsgImOrgSyncSubRsp to JSON.
     * @function toJSON
     * @memberof XmsgImOrgSyncSubRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImOrgSyncSubRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImOrgSyncSubRsp;
})();

$root.XmsgImOrgSyncPubReq = (function() {

    /**
     * Properties of a XmsgImOrgSyncPubReq.
     * @exports IXmsgImOrgSyncPubReq
     * @interface IXmsgImOrgSyncPubReq
     * @property {Array.<IXmsgImOrgEvent>|null} [event] XmsgImOrgSyncPubReq event
     */

    /**
     * Constructs a new XmsgImOrgSyncPubReq.
     * @exports XmsgImOrgSyncPubReq
     * @classdesc Represents a XmsgImOrgSyncPubReq.
     * @implements IXmsgImOrgSyncPubReq
     * @constructor
     * @param {IXmsgImOrgSyncPubReq=} [properties] Properties to set
     */
    function XmsgImOrgSyncPubReq(properties) {
        this.event = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImOrgSyncPubReq event.
     * @member {Array.<IXmsgImOrgEvent>} event
     * @memberof XmsgImOrgSyncPubReq
     * @instance
     */
    XmsgImOrgSyncPubReq.prototype.event = $util.emptyArray;

    /**
     * Creates a new XmsgImOrgSyncPubReq instance using the specified properties.
     * @function create
     * @memberof XmsgImOrgSyncPubReq
     * @static
     * @param {IXmsgImOrgSyncPubReq=} [properties] Properties to set
     * @returns {XmsgImOrgSyncPubReq} XmsgImOrgSyncPubReq instance
     */
    XmsgImOrgSyncPubReq.create = function create(properties) {
        return new XmsgImOrgSyncPubReq(properties);
    };

    /**
     * Encodes the specified XmsgImOrgSyncPubReq message. Does not implicitly {@link XmsgImOrgSyncPubReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImOrgSyncPubReq
     * @static
     * @param {IXmsgImOrgSyncPubReq} message XmsgImOrgSyncPubReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgSyncPubReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.event != null && message.event.length)
            for (var i = 0; i < message.event.length; ++i)
                $root.XmsgImOrgEvent.encode(message.event[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImOrgSyncPubReq message, length delimited. Does not implicitly {@link XmsgImOrgSyncPubReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImOrgSyncPubReq
     * @static
     * @param {IXmsgImOrgSyncPubReq} message XmsgImOrgSyncPubReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgSyncPubReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImOrgSyncPubReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImOrgSyncPubReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImOrgSyncPubReq} XmsgImOrgSyncPubReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgSyncPubReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImOrgSyncPubReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.event && message.event.length))
                    message.event = [];
                message.event.push($root.XmsgImOrgEvent.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImOrgSyncPubReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImOrgSyncPubReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImOrgSyncPubReq} XmsgImOrgSyncPubReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgSyncPubReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImOrgSyncPubReq message.
     * @function verify
     * @memberof XmsgImOrgSyncPubReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImOrgSyncPubReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.event != null && message.hasOwnProperty("event")) {
            if (!Array.isArray(message.event))
                return "event: array expected";
            for (var i = 0; i < message.event.length; ++i) {
                var error = $root.XmsgImOrgEvent.verify(message.event[i]);
                if (error)
                    return "event." + error;
            }
        }
        return null;
    };

    /**
     * Creates a XmsgImOrgSyncPubReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImOrgSyncPubReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImOrgSyncPubReq} XmsgImOrgSyncPubReq
     */
    XmsgImOrgSyncPubReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImOrgSyncPubReq)
            return object;
        var message = new $root.XmsgImOrgSyncPubReq();
        if (object.event) {
            if (!Array.isArray(object.event))
                throw TypeError(".XmsgImOrgSyncPubReq.event: array expected");
            message.event = [];
            for (var i = 0; i < object.event.length; ++i) {
                if (typeof object.event[i] !== "object")
                    throw TypeError(".XmsgImOrgSyncPubReq.event: object expected");
                message.event[i] = $root.XmsgImOrgEvent.fromObject(object.event[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImOrgSyncPubReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImOrgSyncPubReq
     * @static
     * @param {XmsgImOrgSyncPubReq} message XmsgImOrgSyncPubReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImOrgSyncPubReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.event = [];
        if (message.event && message.event.length) {
            object.event = [];
            for (var j = 0; j < message.event.length; ++j)
                object.event[j] = $root.XmsgImOrgEvent.toObject(message.event[j], options);
        }
        return object;
    };

    /**
     * Converts this XmsgImOrgSyncPubReq to JSON.
     * @function toJSON
     * @memberof XmsgImOrgSyncPubReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImOrgSyncPubReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImOrgSyncPubReq;
})();

$root.XmsgImOrgSyncPubRsp = (function() {

    /**
     * Properties of a XmsgImOrgSyncPubRsp.
     * @exports IXmsgImOrgSyncPubRsp
     * @interface IXmsgImOrgSyncPubRsp
     * @property {string|null} [ext] XmsgImOrgSyncPubRsp ext
     */

    /**
     * Constructs a new XmsgImOrgSyncPubRsp.
     * @exports XmsgImOrgSyncPubRsp
     * @classdesc Represents a XmsgImOrgSyncPubRsp.
     * @implements IXmsgImOrgSyncPubRsp
     * @constructor
     * @param {IXmsgImOrgSyncPubRsp=} [properties] Properties to set
     */
    function XmsgImOrgSyncPubRsp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImOrgSyncPubRsp ext.
     * @member {string} ext
     * @memberof XmsgImOrgSyncPubRsp
     * @instance
     */
    XmsgImOrgSyncPubRsp.prototype.ext = "";

    /**
     * Creates a new XmsgImOrgSyncPubRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImOrgSyncPubRsp
     * @static
     * @param {IXmsgImOrgSyncPubRsp=} [properties] Properties to set
     * @returns {XmsgImOrgSyncPubRsp} XmsgImOrgSyncPubRsp instance
     */
    XmsgImOrgSyncPubRsp.create = function create(properties) {
        return new XmsgImOrgSyncPubRsp(properties);
    };

    /**
     * Encodes the specified XmsgImOrgSyncPubRsp message. Does not implicitly {@link XmsgImOrgSyncPubRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImOrgSyncPubRsp
     * @static
     * @param {IXmsgImOrgSyncPubRsp} message XmsgImOrgSyncPubRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgSyncPubRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ext != null && message.hasOwnProperty("ext"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.ext);
        return writer;
    };

    /**
     * Encodes the specified XmsgImOrgSyncPubRsp message, length delimited. Does not implicitly {@link XmsgImOrgSyncPubRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImOrgSyncPubRsp
     * @static
     * @param {IXmsgImOrgSyncPubRsp} message XmsgImOrgSyncPubRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgSyncPubRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImOrgSyncPubRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImOrgSyncPubRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImOrgSyncPubRsp} XmsgImOrgSyncPubRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgSyncPubRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImOrgSyncPubRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ext = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImOrgSyncPubRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImOrgSyncPubRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImOrgSyncPubRsp} XmsgImOrgSyncPubRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgSyncPubRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImOrgSyncPubRsp message.
     * @function verify
     * @memberof XmsgImOrgSyncPubRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImOrgSyncPubRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ext != null && message.hasOwnProperty("ext"))
            if (!$util.isString(message.ext))
                return "ext: string expected";
        return null;
    };

    /**
     * Creates a XmsgImOrgSyncPubRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImOrgSyncPubRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImOrgSyncPubRsp} XmsgImOrgSyncPubRsp
     */
    XmsgImOrgSyncPubRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImOrgSyncPubRsp)
            return object;
        var message = new $root.XmsgImOrgSyncPubRsp();
        if (object.ext != null)
            message.ext = String(object.ext);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImOrgSyncPubRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImOrgSyncPubRsp
     * @static
     * @param {XmsgImOrgSyncPubRsp} message XmsgImOrgSyncPubRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImOrgSyncPubRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.ext = "";
        if (message.ext != null && message.hasOwnProperty("ext"))
            object.ext = message.ext;
        return object;
    };

    /**
     * Converts this XmsgImOrgSyncPubRsp to JSON.
     * @function toJSON
     * @memberof XmsgImOrgSyncPubRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImOrgSyncPubRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImOrgSyncPubRsp;
})();

$root.XmsgImOrgChangedNotice = (function() {

    /**
     * Properties of a XmsgImOrgChangedNotice.
     * @exports IXmsgImOrgChangedNotice
     * @interface IXmsgImOrgChangedNotice
     * @property {IXmsgImOrgEvent|null} [event] XmsgImOrgChangedNotice event
     */

    /**
     * Constructs a new XmsgImOrgChangedNotice.
     * @exports XmsgImOrgChangedNotice
     * @classdesc Represents a XmsgImOrgChangedNotice.
     * @implements IXmsgImOrgChangedNotice
     * @constructor
     * @param {IXmsgImOrgChangedNotice=} [properties] Properties to set
     */
    function XmsgImOrgChangedNotice(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImOrgChangedNotice event.
     * @member {IXmsgImOrgEvent|null|undefined} event
     * @memberof XmsgImOrgChangedNotice
     * @instance
     */
    XmsgImOrgChangedNotice.prototype.event = null;

    /**
     * Creates a new XmsgImOrgChangedNotice instance using the specified properties.
     * @function create
     * @memberof XmsgImOrgChangedNotice
     * @static
     * @param {IXmsgImOrgChangedNotice=} [properties] Properties to set
     * @returns {XmsgImOrgChangedNotice} XmsgImOrgChangedNotice instance
     */
    XmsgImOrgChangedNotice.create = function create(properties) {
        return new XmsgImOrgChangedNotice(properties);
    };

    /**
     * Encodes the specified XmsgImOrgChangedNotice message. Does not implicitly {@link XmsgImOrgChangedNotice.verify|verify} messages.
     * @function encode
     * @memberof XmsgImOrgChangedNotice
     * @static
     * @param {IXmsgImOrgChangedNotice} message XmsgImOrgChangedNotice message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgChangedNotice.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.event != null && message.hasOwnProperty("event"))
            $root.XmsgImOrgEvent.encode(message.event, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImOrgChangedNotice message, length delimited. Does not implicitly {@link XmsgImOrgChangedNotice.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImOrgChangedNotice
     * @static
     * @param {IXmsgImOrgChangedNotice} message XmsgImOrgChangedNotice message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgChangedNotice.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImOrgChangedNotice message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImOrgChangedNotice
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImOrgChangedNotice} XmsgImOrgChangedNotice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgChangedNotice.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImOrgChangedNotice();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.event = $root.XmsgImOrgEvent.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImOrgChangedNotice message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImOrgChangedNotice
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImOrgChangedNotice} XmsgImOrgChangedNotice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgChangedNotice.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImOrgChangedNotice message.
     * @function verify
     * @memberof XmsgImOrgChangedNotice
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImOrgChangedNotice.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.event != null && message.hasOwnProperty("event")) {
            var error = $root.XmsgImOrgEvent.verify(message.event);
            if (error)
                return "event." + error;
        }
        return null;
    };

    /**
     * Creates a XmsgImOrgChangedNotice message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImOrgChangedNotice
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImOrgChangedNotice} XmsgImOrgChangedNotice
     */
    XmsgImOrgChangedNotice.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImOrgChangedNotice)
            return object;
        var message = new $root.XmsgImOrgChangedNotice();
        if (object.event != null) {
            if (typeof object.event !== "object")
                throw TypeError(".XmsgImOrgChangedNotice.event: object expected");
            message.event = $root.XmsgImOrgEvent.fromObject(object.event);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImOrgChangedNotice message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImOrgChangedNotice
     * @static
     * @param {XmsgImOrgChangedNotice} message XmsgImOrgChangedNotice
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImOrgChangedNotice.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.event = null;
        if (message.event != null && message.hasOwnProperty("event"))
            object.event = $root.XmsgImOrgEvent.toObject(message.event, options);
        return object;
    };

    /**
     * Converts this XmsgImOrgChangedNotice to JSON.
     * @function toJSON
     * @memberof XmsgImOrgChangedNotice
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImOrgChangedNotice.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImOrgChangedNotice;
})();

$root.XmsgImOrgNodeChildQueryReq = (function() {

    /**
     * Properties of a XmsgImOrgNodeChildQueryReq.
     * @exports IXmsgImOrgNodeChildQueryReq
     * @interface IXmsgImOrgNodeChildQueryReq
     * @property {string|null} [cgt] XmsgImOrgNodeChildQueryReq cgt
     */

    /**
     * Constructs a new XmsgImOrgNodeChildQueryReq.
     * @exports XmsgImOrgNodeChildQueryReq
     * @classdesc Represents a XmsgImOrgNodeChildQueryReq.
     * @implements IXmsgImOrgNodeChildQueryReq
     * @constructor
     * @param {IXmsgImOrgNodeChildQueryReq=} [properties] Properties to set
     */
    function XmsgImOrgNodeChildQueryReq(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImOrgNodeChildQueryReq cgt.
     * @member {string} cgt
     * @memberof XmsgImOrgNodeChildQueryReq
     * @instance
     */
    XmsgImOrgNodeChildQueryReq.prototype.cgt = "";

    /**
     * Creates a new XmsgImOrgNodeChildQueryReq instance using the specified properties.
     * @function create
     * @memberof XmsgImOrgNodeChildQueryReq
     * @static
     * @param {IXmsgImOrgNodeChildQueryReq=} [properties] Properties to set
     * @returns {XmsgImOrgNodeChildQueryReq} XmsgImOrgNodeChildQueryReq instance
     */
    XmsgImOrgNodeChildQueryReq.create = function create(properties) {
        return new XmsgImOrgNodeChildQueryReq(properties);
    };

    /**
     * Encodes the specified XmsgImOrgNodeChildQueryReq message. Does not implicitly {@link XmsgImOrgNodeChildQueryReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImOrgNodeChildQueryReq
     * @static
     * @param {IXmsgImOrgNodeChildQueryReq} message XmsgImOrgNodeChildQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgNodeChildQueryReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        return writer;
    };

    /**
     * Encodes the specified XmsgImOrgNodeChildQueryReq message, length delimited. Does not implicitly {@link XmsgImOrgNodeChildQueryReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImOrgNodeChildQueryReq
     * @static
     * @param {IXmsgImOrgNodeChildQueryReq} message XmsgImOrgNodeChildQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgNodeChildQueryReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImOrgNodeChildQueryReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImOrgNodeChildQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImOrgNodeChildQueryReq} XmsgImOrgNodeChildQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgNodeChildQueryReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImOrgNodeChildQueryReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImOrgNodeChildQueryReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImOrgNodeChildQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImOrgNodeChildQueryReq} XmsgImOrgNodeChildQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgNodeChildQueryReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImOrgNodeChildQueryReq message.
     * @function verify
     * @memberof XmsgImOrgNodeChildQueryReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImOrgNodeChildQueryReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        return null;
    };

    /**
     * Creates a XmsgImOrgNodeChildQueryReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImOrgNodeChildQueryReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImOrgNodeChildQueryReq} XmsgImOrgNodeChildQueryReq
     */
    XmsgImOrgNodeChildQueryReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImOrgNodeChildQueryReq)
            return object;
        var message = new $root.XmsgImOrgNodeChildQueryReq();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImOrgNodeChildQueryReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImOrgNodeChildQueryReq
     * @static
     * @param {XmsgImOrgNodeChildQueryReq} message XmsgImOrgNodeChildQueryReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImOrgNodeChildQueryReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.cgt = "";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        return object;
    };

    /**
     * Converts this XmsgImOrgNodeChildQueryReq to JSON.
     * @function toJSON
     * @memberof XmsgImOrgNodeChildQueryReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImOrgNodeChildQueryReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImOrgNodeChildQueryReq;
})();

$root.XmsgImOrgNodeChildQueryRsp = (function() {

    /**
     * Properties of a XmsgImOrgNodeChildQueryRsp.
     * @exports IXmsgImOrgNodeChildQueryRsp
     * @interface IXmsgImOrgNodeChildQueryRsp
     * @property {Array.<IXmsgImOrgNodeChild>|null} [child] XmsgImOrgNodeChildQueryRsp child
     */

    /**
     * Constructs a new XmsgImOrgNodeChildQueryRsp.
     * @exports XmsgImOrgNodeChildQueryRsp
     * @classdesc Represents a XmsgImOrgNodeChildQueryRsp.
     * @implements IXmsgImOrgNodeChildQueryRsp
     * @constructor
     * @param {IXmsgImOrgNodeChildQueryRsp=} [properties] Properties to set
     */
    function XmsgImOrgNodeChildQueryRsp(properties) {
        this.child = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImOrgNodeChildQueryRsp child.
     * @member {Array.<IXmsgImOrgNodeChild>} child
     * @memberof XmsgImOrgNodeChildQueryRsp
     * @instance
     */
    XmsgImOrgNodeChildQueryRsp.prototype.child = $util.emptyArray;

    /**
     * Creates a new XmsgImOrgNodeChildQueryRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImOrgNodeChildQueryRsp
     * @static
     * @param {IXmsgImOrgNodeChildQueryRsp=} [properties] Properties to set
     * @returns {XmsgImOrgNodeChildQueryRsp} XmsgImOrgNodeChildQueryRsp instance
     */
    XmsgImOrgNodeChildQueryRsp.create = function create(properties) {
        return new XmsgImOrgNodeChildQueryRsp(properties);
    };

    /**
     * Encodes the specified XmsgImOrgNodeChildQueryRsp message. Does not implicitly {@link XmsgImOrgNodeChildQueryRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImOrgNodeChildQueryRsp
     * @static
     * @param {IXmsgImOrgNodeChildQueryRsp} message XmsgImOrgNodeChildQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgNodeChildQueryRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.child != null && message.child.length)
            for (var i = 0; i < message.child.length; ++i)
                $root.XmsgImOrgNodeChild.encode(message.child[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImOrgNodeChildQueryRsp message, length delimited. Does not implicitly {@link XmsgImOrgNodeChildQueryRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImOrgNodeChildQueryRsp
     * @static
     * @param {IXmsgImOrgNodeChildQueryRsp} message XmsgImOrgNodeChildQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgNodeChildQueryRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImOrgNodeChildQueryRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImOrgNodeChildQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImOrgNodeChildQueryRsp} XmsgImOrgNodeChildQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgNodeChildQueryRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImOrgNodeChildQueryRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.child && message.child.length))
                    message.child = [];
                message.child.push($root.XmsgImOrgNodeChild.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImOrgNodeChildQueryRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImOrgNodeChildQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImOrgNodeChildQueryRsp} XmsgImOrgNodeChildQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgNodeChildQueryRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImOrgNodeChildQueryRsp message.
     * @function verify
     * @memberof XmsgImOrgNodeChildQueryRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImOrgNodeChildQueryRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.child != null && message.hasOwnProperty("child")) {
            if (!Array.isArray(message.child))
                return "child: array expected";
            for (var i = 0; i < message.child.length; ++i) {
                var error = $root.XmsgImOrgNodeChild.verify(message.child[i]);
                if (error)
                    return "child." + error;
            }
        }
        return null;
    };

    /**
     * Creates a XmsgImOrgNodeChildQueryRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImOrgNodeChildQueryRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImOrgNodeChildQueryRsp} XmsgImOrgNodeChildQueryRsp
     */
    XmsgImOrgNodeChildQueryRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImOrgNodeChildQueryRsp)
            return object;
        var message = new $root.XmsgImOrgNodeChildQueryRsp();
        if (object.child) {
            if (!Array.isArray(object.child))
                throw TypeError(".XmsgImOrgNodeChildQueryRsp.child: array expected");
            message.child = [];
            for (var i = 0; i < object.child.length; ++i) {
                if (typeof object.child[i] !== "object")
                    throw TypeError(".XmsgImOrgNodeChildQueryRsp.child: object expected");
                message.child[i] = $root.XmsgImOrgNodeChild.fromObject(object.child[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImOrgNodeChildQueryRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImOrgNodeChildQueryRsp
     * @static
     * @param {XmsgImOrgNodeChildQueryRsp} message XmsgImOrgNodeChildQueryRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImOrgNodeChildQueryRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.child = [];
        if (message.child && message.child.length) {
            object.child = [];
            for (var j = 0; j < message.child.length; ++j)
                object.child[j] = $root.XmsgImOrgNodeChild.toObject(message.child[j], options);
        }
        return object;
    };

    /**
     * Converts this XmsgImOrgNodeChildQueryRsp to JSON.
     * @function toJSON
     * @memberof XmsgImOrgNodeChildQueryRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImOrgNodeChildQueryRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImOrgNodeChildQueryRsp;
})();

$root.XmsgImOrgNodeDeptUsrQueryReq = (function() {

    /**
     * Properties of a XmsgImOrgNodeDeptUsrQueryReq.
     * @exports IXmsgImOrgNodeDeptUsrQueryReq
     * @interface IXmsgImOrgNodeDeptUsrQueryReq
     * @property {string|null} [dcgt] XmsgImOrgNodeDeptUsrQueryReq dcgt
     * @property {string|null} [ucgt] XmsgImOrgNodeDeptUsrQueryReq ucgt
     */

    /**
     * Constructs a new XmsgImOrgNodeDeptUsrQueryReq.
     * @exports XmsgImOrgNodeDeptUsrQueryReq
     * @classdesc Represents a XmsgImOrgNodeDeptUsrQueryReq.
     * @implements IXmsgImOrgNodeDeptUsrQueryReq
     * @constructor
     * @param {IXmsgImOrgNodeDeptUsrQueryReq=} [properties] Properties to set
     */
    function XmsgImOrgNodeDeptUsrQueryReq(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImOrgNodeDeptUsrQueryReq dcgt.
     * @member {string} dcgt
     * @memberof XmsgImOrgNodeDeptUsrQueryReq
     * @instance
     */
    XmsgImOrgNodeDeptUsrQueryReq.prototype.dcgt = "";

    /**
     * XmsgImOrgNodeDeptUsrQueryReq ucgt.
     * @member {string} ucgt
     * @memberof XmsgImOrgNodeDeptUsrQueryReq
     * @instance
     */
    XmsgImOrgNodeDeptUsrQueryReq.prototype.ucgt = "";

    /**
     * Creates a new XmsgImOrgNodeDeptUsrQueryReq instance using the specified properties.
     * @function create
     * @memberof XmsgImOrgNodeDeptUsrQueryReq
     * @static
     * @param {IXmsgImOrgNodeDeptUsrQueryReq=} [properties] Properties to set
     * @returns {XmsgImOrgNodeDeptUsrQueryReq} XmsgImOrgNodeDeptUsrQueryReq instance
     */
    XmsgImOrgNodeDeptUsrQueryReq.create = function create(properties) {
        return new XmsgImOrgNodeDeptUsrQueryReq(properties);
    };

    /**
     * Encodes the specified XmsgImOrgNodeDeptUsrQueryReq message. Does not implicitly {@link XmsgImOrgNodeDeptUsrQueryReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImOrgNodeDeptUsrQueryReq
     * @static
     * @param {IXmsgImOrgNodeDeptUsrQueryReq} message XmsgImOrgNodeDeptUsrQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgNodeDeptUsrQueryReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.dcgt != null && message.hasOwnProperty("dcgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.dcgt);
        if (message.ucgt != null && message.hasOwnProperty("ucgt"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.ucgt);
        return writer;
    };

    /**
     * Encodes the specified XmsgImOrgNodeDeptUsrQueryReq message, length delimited. Does not implicitly {@link XmsgImOrgNodeDeptUsrQueryReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImOrgNodeDeptUsrQueryReq
     * @static
     * @param {IXmsgImOrgNodeDeptUsrQueryReq} message XmsgImOrgNodeDeptUsrQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgNodeDeptUsrQueryReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImOrgNodeDeptUsrQueryReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImOrgNodeDeptUsrQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImOrgNodeDeptUsrQueryReq} XmsgImOrgNodeDeptUsrQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgNodeDeptUsrQueryReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImOrgNodeDeptUsrQueryReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.dcgt = reader.string();
                break;
            case 2:
                message.ucgt = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImOrgNodeDeptUsrQueryReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImOrgNodeDeptUsrQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImOrgNodeDeptUsrQueryReq} XmsgImOrgNodeDeptUsrQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgNodeDeptUsrQueryReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImOrgNodeDeptUsrQueryReq message.
     * @function verify
     * @memberof XmsgImOrgNodeDeptUsrQueryReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImOrgNodeDeptUsrQueryReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.dcgt != null && message.hasOwnProperty("dcgt"))
            if (!$util.isString(message.dcgt))
                return "dcgt: string expected";
        if (message.ucgt != null && message.hasOwnProperty("ucgt"))
            if (!$util.isString(message.ucgt))
                return "ucgt: string expected";
        return null;
    };

    /**
     * Creates a XmsgImOrgNodeDeptUsrQueryReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImOrgNodeDeptUsrQueryReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImOrgNodeDeptUsrQueryReq} XmsgImOrgNodeDeptUsrQueryReq
     */
    XmsgImOrgNodeDeptUsrQueryReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImOrgNodeDeptUsrQueryReq)
            return object;
        var message = new $root.XmsgImOrgNodeDeptUsrQueryReq();
        if (object.dcgt != null)
            message.dcgt = String(object.dcgt);
        if (object.ucgt != null)
            message.ucgt = String(object.ucgt);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImOrgNodeDeptUsrQueryReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImOrgNodeDeptUsrQueryReq
     * @static
     * @param {XmsgImOrgNodeDeptUsrQueryReq} message XmsgImOrgNodeDeptUsrQueryReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImOrgNodeDeptUsrQueryReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.dcgt = "";
            object.ucgt = "";
        }
        if (message.dcgt != null && message.hasOwnProperty("dcgt"))
            object.dcgt = message.dcgt;
        if (message.ucgt != null && message.hasOwnProperty("ucgt"))
            object.ucgt = message.ucgt;
        return object;
    };

    /**
     * Converts this XmsgImOrgNodeDeptUsrQueryReq to JSON.
     * @function toJSON
     * @memberof XmsgImOrgNodeDeptUsrQueryReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImOrgNodeDeptUsrQueryReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImOrgNodeDeptUsrQueryReq;
})();

$root.XmsgImOrgNodeDeptUsrQueryRsp = (function() {

    /**
     * Properties of a XmsgImOrgNodeDeptUsrQueryRsp.
     * @exports IXmsgImOrgNodeDeptUsrQueryRsp
     * @interface IXmsgImOrgNodeDeptUsrQueryRsp
     * @property {string|null} [name] XmsgImOrgNodeDeptUsrQueryRsp name
     * @property {boolean|null} [enable] XmsgImOrgNodeDeptUsrQueryRsp enable
     * @property {IXmsgImOrgNodeInfo|null} [info] XmsgImOrgNodeDeptUsrQueryRsp info
     * @property {number|Long|null} [ver] XmsgImOrgNodeDeptUsrQueryRsp ver
     * @property {number|Long|null} [gts] XmsgImOrgNodeDeptUsrQueryRsp gts
     * @property {number|Long|null} [uts] XmsgImOrgNodeDeptUsrQueryRsp uts
     */

    /**
     * Constructs a new XmsgImOrgNodeDeptUsrQueryRsp.
     * @exports XmsgImOrgNodeDeptUsrQueryRsp
     * @classdesc Represents a XmsgImOrgNodeDeptUsrQueryRsp.
     * @implements IXmsgImOrgNodeDeptUsrQueryRsp
     * @constructor
     * @param {IXmsgImOrgNodeDeptUsrQueryRsp=} [properties] Properties to set
     */
    function XmsgImOrgNodeDeptUsrQueryRsp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImOrgNodeDeptUsrQueryRsp name.
     * @member {string} name
     * @memberof XmsgImOrgNodeDeptUsrQueryRsp
     * @instance
     */
    XmsgImOrgNodeDeptUsrQueryRsp.prototype.name = "";

    /**
     * XmsgImOrgNodeDeptUsrQueryRsp enable.
     * @member {boolean} enable
     * @memberof XmsgImOrgNodeDeptUsrQueryRsp
     * @instance
     */
    XmsgImOrgNodeDeptUsrQueryRsp.prototype.enable = false;

    /**
     * XmsgImOrgNodeDeptUsrQueryRsp info.
     * @member {IXmsgImOrgNodeInfo|null|undefined} info
     * @memberof XmsgImOrgNodeDeptUsrQueryRsp
     * @instance
     */
    XmsgImOrgNodeDeptUsrQueryRsp.prototype.info = null;

    /**
     * XmsgImOrgNodeDeptUsrQueryRsp ver.
     * @member {number|Long} ver
     * @memberof XmsgImOrgNodeDeptUsrQueryRsp
     * @instance
     */
    XmsgImOrgNodeDeptUsrQueryRsp.prototype.ver = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImOrgNodeDeptUsrQueryRsp gts.
     * @member {number|Long} gts
     * @memberof XmsgImOrgNodeDeptUsrQueryRsp
     * @instance
     */
    XmsgImOrgNodeDeptUsrQueryRsp.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImOrgNodeDeptUsrQueryRsp uts.
     * @member {number|Long} uts
     * @memberof XmsgImOrgNodeDeptUsrQueryRsp
     * @instance
     */
    XmsgImOrgNodeDeptUsrQueryRsp.prototype.uts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgImOrgNodeDeptUsrQueryRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImOrgNodeDeptUsrQueryRsp
     * @static
     * @param {IXmsgImOrgNodeDeptUsrQueryRsp=} [properties] Properties to set
     * @returns {XmsgImOrgNodeDeptUsrQueryRsp} XmsgImOrgNodeDeptUsrQueryRsp instance
     */
    XmsgImOrgNodeDeptUsrQueryRsp.create = function create(properties) {
        return new XmsgImOrgNodeDeptUsrQueryRsp(properties);
    };

    /**
     * Encodes the specified XmsgImOrgNodeDeptUsrQueryRsp message. Does not implicitly {@link XmsgImOrgNodeDeptUsrQueryRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImOrgNodeDeptUsrQueryRsp
     * @static
     * @param {IXmsgImOrgNodeDeptUsrQueryRsp} message XmsgImOrgNodeDeptUsrQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgNodeDeptUsrQueryRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.enable != null && message.hasOwnProperty("enable"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.enable);
        if (message.info != null && message.hasOwnProperty("info"))
            $root.XmsgImOrgNodeInfo.encode(message.info, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.ver != null && message.hasOwnProperty("ver"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.ver);
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.gts);
        if (message.uts != null && message.hasOwnProperty("uts"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.uts);
        return writer;
    };

    /**
     * Encodes the specified XmsgImOrgNodeDeptUsrQueryRsp message, length delimited. Does not implicitly {@link XmsgImOrgNodeDeptUsrQueryRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImOrgNodeDeptUsrQueryRsp
     * @static
     * @param {IXmsgImOrgNodeDeptUsrQueryRsp} message XmsgImOrgNodeDeptUsrQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgNodeDeptUsrQueryRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImOrgNodeDeptUsrQueryRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImOrgNodeDeptUsrQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImOrgNodeDeptUsrQueryRsp} XmsgImOrgNodeDeptUsrQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgNodeDeptUsrQueryRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImOrgNodeDeptUsrQueryRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.name = reader.string();
                break;
            case 3:
                message.enable = reader.bool();
                break;
            case 4:
                message.info = $root.XmsgImOrgNodeInfo.decode(reader, reader.uint32());
                break;
            case 5:
                message.ver = reader.uint64();
                break;
            case 6:
                message.gts = reader.uint64();
                break;
            case 7:
                message.uts = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImOrgNodeDeptUsrQueryRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImOrgNodeDeptUsrQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImOrgNodeDeptUsrQueryRsp} XmsgImOrgNodeDeptUsrQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgNodeDeptUsrQueryRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImOrgNodeDeptUsrQueryRsp message.
     * @function verify
     * @memberof XmsgImOrgNodeDeptUsrQueryRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImOrgNodeDeptUsrQueryRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.enable != null && message.hasOwnProperty("enable"))
            if (typeof message.enable !== "boolean")
                return "enable: boolean expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            var error = $root.XmsgImOrgNodeInfo.verify(message.info);
            if (error)
                return "info." + error;
        }
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (!$util.isInteger(message.ver) && !(message.ver && $util.isInteger(message.ver.low) && $util.isInteger(message.ver.high)))
                return "ver: integer|Long expected";
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (!$util.isInteger(message.uts) && !(message.uts && $util.isInteger(message.uts.low) && $util.isInteger(message.uts.high)))
                return "uts: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgImOrgNodeDeptUsrQueryRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImOrgNodeDeptUsrQueryRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImOrgNodeDeptUsrQueryRsp} XmsgImOrgNodeDeptUsrQueryRsp
     */
    XmsgImOrgNodeDeptUsrQueryRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImOrgNodeDeptUsrQueryRsp)
            return object;
        var message = new $root.XmsgImOrgNodeDeptUsrQueryRsp();
        if (object.name != null)
            message.name = String(object.name);
        if (object.enable != null)
            message.enable = Boolean(object.enable);
        if (object.info != null) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImOrgNodeDeptUsrQueryRsp.info: object expected");
            message.info = $root.XmsgImOrgNodeInfo.fromObject(object.info);
        }
        if (object.ver != null)
            if ($util.Long)
                (message.ver = $util.Long.fromValue(object.ver)).unsigned = true;
            else if (typeof object.ver === "string")
                message.ver = parseInt(object.ver, 10);
            else if (typeof object.ver === "number")
                message.ver = object.ver;
            else if (typeof object.ver === "object")
                message.ver = new $util.LongBits(object.ver.low >>> 0, object.ver.high >>> 0).toNumber(true);
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        if (object.uts != null)
            if ($util.Long)
                (message.uts = $util.Long.fromValue(object.uts)).unsigned = true;
            else if (typeof object.uts === "string")
                message.uts = parseInt(object.uts, 10);
            else if (typeof object.uts === "number")
                message.uts = object.uts;
            else if (typeof object.uts === "object")
                message.uts = new $util.LongBits(object.uts.low >>> 0, object.uts.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImOrgNodeDeptUsrQueryRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImOrgNodeDeptUsrQueryRsp
     * @static
     * @param {XmsgImOrgNodeDeptUsrQueryRsp} message XmsgImOrgNodeDeptUsrQueryRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImOrgNodeDeptUsrQueryRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.name = "";
            object.enable = false;
            object.info = null;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uts = options.longs === String ? "0" : 0;
        }
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.enable != null && message.hasOwnProperty("enable"))
            object.enable = message.enable;
        if (message.info != null && message.hasOwnProperty("info"))
            object.info = $root.XmsgImOrgNodeInfo.toObject(message.info, options);
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (typeof message.ver === "number")
                object.ver = options.longs === String ? String(message.ver) : message.ver;
            else
                object.ver = options.longs === String ? $util.Long.prototype.toString.call(message.ver) : options.longs === Number ? new $util.LongBits(message.ver.low >>> 0, message.ver.high >>> 0).toNumber(true) : message.ver;
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (typeof message.uts === "number")
                object.uts = options.longs === String ? String(message.uts) : message.uts;
            else
                object.uts = options.longs === String ? $util.Long.prototype.toString.call(message.uts) : options.longs === Number ? new $util.LongBits(message.uts.low >>> 0, message.uts.high >>> 0).toNumber(true) : message.uts;
        return object;
    };

    /**
     * Converts this XmsgImOrgNodeDeptUsrQueryRsp to JSON.
     * @function toJSON
     * @memberof XmsgImOrgNodeDeptUsrQueryRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImOrgNodeDeptUsrQueryRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImOrgNodeDeptUsrQueryRsp;
})();

$root.XmsgImOrgNodeQueryReq = (function() {

    /**
     * Properties of a XmsgImOrgNodeQueryReq.
     * @exports IXmsgImOrgNodeQueryReq
     * @interface IXmsgImOrgNodeQueryReq
     * @property {string|null} [cgt] XmsgImOrgNodeQueryReq cgt
     */

    /**
     * Constructs a new XmsgImOrgNodeQueryReq.
     * @exports XmsgImOrgNodeQueryReq
     * @classdesc Represents a XmsgImOrgNodeQueryReq.
     * @implements IXmsgImOrgNodeQueryReq
     * @constructor
     * @param {IXmsgImOrgNodeQueryReq=} [properties] Properties to set
     */
    function XmsgImOrgNodeQueryReq(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImOrgNodeQueryReq cgt.
     * @member {string} cgt
     * @memberof XmsgImOrgNodeQueryReq
     * @instance
     */
    XmsgImOrgNodeQueryReq.prototype.cgt = "";

    /**
     * Creates a new XmsgImOrgNodeQueryReq instance using the specified properties.
     * @function create
     * @memberof XmsgImOrgNodeQueryReq
     * @static
     * @param {IXmsgImOrgNodeQueryReq=} [properties] Properties to set
     * @returns {XmsgImOrgNodeQueryReq} XmsgImOrgNodeQueryReq instance
     */
    XmsgImOrgNodeQueryReq.create = function create(properties) {
        return new XmsgImOrgNodeQueryReq(properties);
    };

    /**
     * Encodes the specified XmsgImOrgNodeQueryReq message. Does not implicitly {@link XmsgImOrgNodeQueryReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImOrgNodeQueryReq
     * @static
     * @param {IXmsgImOrgNodeQueryReq} message XmsgImOrgNodeQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgNodeQueryReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        return writer;
    };

    /**
     * Encodes the specified XmsgImOrgNodeQueryReq message, length delimited. Does not implicitly {@link XmsgImOrgNodeQueryReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImOrgNodeQueryReq
     * @static
     * @param {IXmsgImOrgNodeQueryReq} message XmsgImOrgNodeQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgNodeQueryReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImOrgNodeQueryReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImOrgNodeQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImOrgNodeQueryReq} XmsgImOrgNodeQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgNodeQueryReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImOrgNodeQueryReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImOrgNodeQueryReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImOrgNodeQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImOrgNodeQueryReq} XmsgImOrgNodeQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgNodeQueryReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImOrgNodeQueryReq message.
     * @function verify
     * @memberof XmsgImOrgNodeQueryReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImOrgNodeQueryReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        return null;
    };

    /**
     * Creates a XmsgImOrgNodeQueryReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImOrgNodeQueryReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImOrgNodeQueryReq} XmsgImOrgNodeQueryReq
     */
    XmsgImOrgNodeQueryReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImOrgNodeQueryReq)
            return object;
        var message = new $root.XmsgImOrgNodeQueryReq();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImOrgNodeQueryReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImOrgNodeQueryReq
     * @static
     * @param {XmsgImOrgNodeQueryReq} message XmsgImOrgNodeQueryReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImOrgNodeQueryReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.cgt = "";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        return object;
    };

    /**
     * Converts this XmsgImOrgNodeQueryReq to JSON.
     * @function toJSON
     * @memberof XmsgImOrgNodeQueryReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImOrgNodeQueryReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImOrgNodeQueryReq;
})();

$root.XmsgImOrgNodeQueryRsp = (function() {

    /**
     * Properties of a XmsgImOrgNodeQueryRsp.
     * @exports IXmsgImOrgNodeQueryRsp
     * @interface IXmsgImOrgNodeQueryRsp
     * @property {string|null} [pgt] XmsgImOrgNodeQueryRsp pgt
     * @property {string|null} [name] XmsgImOrgNodeQueryRsp name
     * @property {boolean|null} [enable] XmsgImOrgNodeQueryRsp enable
     * @property {XmsgImOrgNodeType|null} [type] XmsgImOrgNodeQueryRsp type
     * @property {IXmsgImOrgNodeInfo|null} [info] XmsgImOrgNodeQueryRsp info
     * @property {number|Long|null} [ver] XmsgImOrgNodeQueryRsp ver
     * @property {number|Long|null} [gts] XmsgImOrgNodeQueryRsp gts
     * @property {number|Long|null} [uts] XmsgImOrgNodeQueryRsp uts
     */

    /**
     * Constructs a new XmsgImOrgNodeQueryRsp.
     * @exports XmsgImOrgNodeQueryRsp
     * @classdesc Represents a XmsgImOrgNodeQueryRsp.
     * @implements IXmsgImOrgNodeQueryRsp
     * @constructor
     * @param {IXmsgImOrgNodeQueryRsp=} [properties] Properties to set
     */
    function XmsgImOrgNodeQueryRsp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImOrgNodeQueryRsp pgt.
     * @member {string} pgt
     * @memberof XmsgImOrgNodeQueryRsp
     * @instance
     */
    XmsgImOrgNodeQueryRsp.prototype.pgt = "";

    /**
     * XmsgImOrgNodeQueryRsp name.
     * @member {string} name
     * @memberof XmsgImOrgNodeQueryRsp
     * @instance
     */
    XmsgImOrgNodeQueryRsp.prototype.name = "";

    /**
     * XmsgImOrgNodeQueryRsp enable.
     * @member {boolean} enable
     * @memberof XmsgImOrgNodeQueryRsp
     * @instance
     */
    XmsgImOrgNodeQueryRsp.prototype.enable = false;

    /**
     * XmsgImOrgNodeQueryRsp type.
     * @member {XmsgImOrgNodeType} type
     * @memberof XmsgImOrgNodeQueryRsp
     * @instance
     */
    XmsgImOrgNodeQueryRsp.prototype.type = 0;

    /**
     * XmsgImOrgNodeQueryRsp info.
     * @member {IXmsgImOrgNodeInfo|null|undefined} info
     * @memberof XmsgImOrgNodeQueryRsp
     * @instance
     */
    XmsgImOrgNodeQueryRsp.prototype.info = null;

    /**
     * XmsgImOrgNodeQueryRsp ver.
     * @member {number|Long} ver
     * @memberof XmsgImOrgNodeQueryRsp
     * @instance
     */
    XmsgImOrgNodeQueryRsp.prototype.ver = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImOrgNodeQueryRsp gts.
     * @member {number|Long} gts
     * @memberof XmsgImOrgNodeQueryRsp
     * @instance
     */
    XmsgImOrgNodeQueryRsp.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImOrgNodeQueryRsp uts.
     * @member {number|Long} uts
     * @memberof XmsgImOrgNodeQueryRsp
     * @instance
     */
    XmsgImOrgNodeQueryRsp.prototype.uts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgImOrgNodeQueryRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImOrgNodeQueryRsp
     * @static
     * @param {IXmsgImOrgNodeQueryRsp=} [properties] Properties to set
     * @returns {XmsgImOrgNodeQueryRsp} XmsgImOrgNodeQueryRsp instance
     */
    XmsgImOrgNodeQueryRsp.create = function create(properties) {
        return new XmsgImOrgNodeQueryRsp(properties);
    };

    /**
     * Encodes the specified XmsgImOrgNodeQueryRsp message. Does not implicitly {@link XmsgImOrgNodeQueryRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImOrgNodeQueryRsp
     * @static
     * @param {IXmsgImOrgNodeQueryRsp} message XmsgImOrgNodeQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgNodeQueryRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.pgt != null && message.hasOwnProperty("pgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.pgt);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.enable != null && message.hasOwnProperty("enable"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.enable);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);
        if (message.info != null && message.hasOwnProperty("info"))
            $root.XmsgImOrgNodeInfo.encode(message.info, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.ver != null && message.hasOwnProperty("ver"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.ver);
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.gts);
        if (message.uts != null && message.hasOwnProperty("uts"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.uts);
        return writer;
    };

    /**
     * Encodes the specified XmsgImOrgNodeQueryRsp message, length delimited. Does not implicitly {@link XmsgImOrgNodeQueryRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImOrgNodeQueryRsp
     * @static
     * @param {IXmsgImOrgNodeQueryRsp} message XmsgImOrgNodeQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgNodeQueryRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImOrgNodeQueryRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImOrgNodeQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImOrgNodeQueryRsp} XmsgImOrgNodeQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgNodeQueryRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImOrgNodeQueryRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.pgt = reader.string();
                break;
            case 2:
                message.name = reader.string();
                break;
            case 3:
                message.enable = reader.bool();
                break;
            case 4:
                message.type = reader.int32();
                break;
            case 5:
                message.info = $root.XmsgImOrgNodeInfo.decode(reader, reader.uint32());
                break;
            case 6:
                message.ver = reader.uint64();
                break;
            case 7:
                message.gts = reader.uint64();
                break;
            case 8:
                message.uts = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImOrgNodeQueryRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImOrgNodeQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImOrgNodeQueryRsp} XmsgImOrgNodeQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgNodeQueryRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImOrgNodeQueryRsp message.
     * @function verify
     * @memberof XmsgImOrgNodeQueryRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImOrgNodeQueryRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.pgt != null && message.hasOwnProperty("pgt"))
            if (!$util.isString(message.pgt))
                return "pgt: string expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.enable != null && message.hasOwnProperty("enable"))
            if (typeof message.enable !== "boolean")
                return "enable: boolean expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.info != null && message.hasOwnProperty("info")) {
            var error = $root.XmsgImOrgNodeInfo.verify(message.info);
            if (error)
                return "info." + error;
        }
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (!$util.isInteger(message.ver) && !(message.ver && $util.isInteger(message.ver.low) && $util.isInteger(message.ver.high)))
                return "ver: integer|Long expected";
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (!$util.isInteger(message.uts) && !(message.uts && $util.isInteger(message.uts.low) && $util.isInteger(message.uts.high)))
                return "uts: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgImOrgNodeQueryRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImOrgNodeQueryRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImOrgNodeQueryRsp} XmsgImOrgNodeQueryRsp
     */
    XmsgImOrgNodeQueryRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImOrgNodeQueryRsp)
            return object;
        var message = new $root.XmsgImOrgNodeQueryRsp();
        if (object.pgt != null)
            message.pgt = String(object.pgt);
        if (object.name != null)
            message.name = String(object.name);
        if (object.enable != null)
            message.enable = Boolean(object.enable);
        switch (object.type) {
        case "X_MSG_IM_ORG_NODE_TYPE__RESERVED__":
        case 0:
            message.type = 0;
            break;
        case "X_MSG_IM_ORG_NODE_TYPE_BRANCH":
        case 1:
            message.type = 1;
            break;
        case "X_MSG_IM_ORG_NODE_TYPE_LEAF":
        case 2:
            message.type = 2;
            break;
        }
        if (object.info != null) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImOrgNodeQueryRsp.info: object expected");
            message.info = $root.XmsgImOrgNodeInfo.fromObject(object.info);
        }
        if (object.ver != null)
            if ($util.Long)
                (message.ver = $util.Long.fromValue(object.ver)).unsigned = true;
            else if (typeof object.ver === "string")
                message.ver = parseInt(object.ver, 10);
            else if (typeof object.ver === "number")
                message.ver = object.ver;
            else if (typeof object.ver === "object")
                message.ver = new $util.LongBits(object.ver.low >>> 0, object.ver.high >>> 0).toNumber(true);
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        if (object.uts != null)
            if ($util.Long)
                (message.uts = $util.Long.fromValue(object.uts)).unsigned = true;
            else if (typeof object.uts === "string")
                message.uts = parseInt(object.uts, 10);
            else if (typeof object.uts === "number")
                message.uts = object.uts;
            else if (typeof object.uts === "object")
                message.uts = new $util.LongBits(object.uts.low >>> 0, object.uts.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImOrgNodeQueryRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImOrgNodeQueryRsp
     * @static
     * @param {XmsgImOrgNodeQueryRsp} message XmsgImOrgNodeQueryRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImOrgNodeQueryRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.pgt = "";
            object.name = "";
            object.enable = false;
            object.type = options.enums === String ? "X_MSG_IM_ORG_NODE_TYPE__RESERVED__" : 0;
            object.info = null;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uts = options.longs === String ? "0" : 0;
        }
        if (message.pgt != null && message.hasOwnProperty("pgt"))
            object.pgt = message.pgt;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.enable != null && message.hasOwnProperty("enable"))
            object.enable = message.enable;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.XmsgImOrgNodeType[message.type] : message.type;
        if (message.info != null && message.hasOwnProperty("info"))
            object.info = $root.XmsgImOrgNodeInfo.toObject(message.info, options);
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (typeof message.ver === "number")
                object.ver = options.longs === String ? String(message.ver) : message.ver;
            else
                object.ver = options.longs === String ? $util.Long.prototype.toString.call(message.ver) : options.longs === Number ? new $util.LongBits(message.ver.low >>> 0, message.ver.high >>> 0).toNumber(true) : message.ver;
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (typeof message.uts === "number")
                object.uts = options.longs === String ? String(message.uts) : message.uts;
            else
                object.uts = options.longs === String ? $util.Long.prototype.toString.call(message.uts) : options.longs === Number ? new $util.LongBits(message.uts.low >>> 0, message.uts.high >>> 0).toNumber(true) : message.uts;
        return object;
    };

    /**
     * Converts this XmsgImOrgNodeQueryRsp to JSON.
     * @function toJSON
     * @memberof XmsgImOrgNodeQueryRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImOrgNodeQueryRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImOrgNodeQueryRsp;
})();

$root.XmsgImOrgEvent = (function() {

    /**
     * Properties of a XmsgImOrgEvent.
     * @exports IXmsgImOrgEvent
     * @interface IXmsgImOrgEvent
     * @property {IXmsgImOrgEventDept|null} [dept] XmsgImOrgEvent dept
     * @property {IXmsgImOrgEventDeptUsr|null} [deptUsr] XmsgImOrgEvent deptUsr
     * @property {IXmsgImOrgEventUsr|null} [usr] XmsgImOrgEvent usr
     */

    /**
     * Constructs a new XmsgImOrgEvent.
     * @exports XmsgImOrgEvent
     * @classdesc Represents a XmsgImOrgEvent.
     * @implements IXmsgImOrgEvent
     * @constructor
     * @param {IXmsgImOrgEvent=} [properties] Properties to set
     */
    function XmsgImOrgEvent(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImOrgEvent dept.
     * @member {IXmsgImOrgEventDept|null|undefined} dept
     * @memberof XmsgImOrgEvent
     * @instance
     */
    XmsgImOrgEvent.prototype.dept = null;

    /**
     * XmsgImOrgEvent deptUsr.
     * @member {IXmsgImOrgEventDeptUsr|null|undefined} deptUsr
     * @memberof XmsgImOrgEvent
     * @instance
     */
    XmsgImOrgEvent.prototype.deptUsr = null;

    /**
     * XmsgImOrgEvent usr.
     * @member {IXmsgImOrgEventUsr|null|undefined} usr
     * @memberof XmsgImOrgEvent
     * @instance
     */
    XmsgImOrgEvent.prototype.usr = null;

    /**
     * Creates a new XmsgImOrgEvent instance using the specified properties.
     * @function create
     * @memberof XmsgImOrgEvent
     * @static
     * @param {IXmsgImOrgEvent=} [properties] Properties to set
     * @returns {XmsgImOrgEvent} XmsgImOrgEvent instance
     */
    XmsgImOrgEvent.create = function create(properties) {
        return new XmsgImOrgEvent(properties);
    };

    /**
     * Encodes the specified XmsgImOrgEvent message. Does not implicitly {@link XmsgImOrgEvent.verify|verify} messages.
     * @function encode
     * @memberof XmsgImOrgEvent
     * @static
     * @param {IXmsgImOrgEvent} message XmsgImOrgEvent message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgEvent.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.dept != null && message.hasOwnProperty("dept"))
            $root.XmsgImOrgEventDept.encode(message.dept, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.deptUsr != null && message.hasOwnProperty("deptUsr"))
            $root.XmsgImOrgEventDeptUsr.encode(message.deptUsr, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.usr != null && message.hasOwnProperty("usr"))
            $root.XmsgImOrgEventUsr.encode(message.usr, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImOrgEvent message, length delimited. Does not implicitly {@link XmsgImOrgEvent.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImOrgEvent
     * @static
     * @param {IXmsgImOrgEvent} message XmsgImOrgEvent message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgEvent.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImOrgEvent message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImOrgEvent
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImOrgEvent} XmsgImOrgEvent
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgEvent.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImOrgEvent();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.dept = $root.XmsgImOrgEventDept.decode(reader, reader.uint32());
                break;
            case 2:
                message.deptUsr = $root.XmsgImOrgEventDeptUsr.decode(reader, reader.uint32());
                break;
            case 3:
                message.usr = $root.XmsgImOrgEventUsr.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImOrgEvent message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImOrgEvent
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImOrgEvent} XmsgImOrgEvent
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgEvent.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImOrgEvent message.
     * @function verify
     * @memberof XmsgImOrgEvent
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImOrgEvent.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.dept != null && message.hasOwnProperty("dept")) {
            var error = $root.XmsgImOrgEventDept.verify(message.dept);
            if (error)
                return "dept." + error;
        }
        if (message.deptUsr != null && message.hasOwnProperty("deptUsr")) {
            var error = $root.XmsgImOrgEventDeptUsr.verify(message.deptUsr);
            if (error)
                return "deptUsr." + error;
        }
        if (message.usr != null && message.hasOwnProperty("usr")) {
            var error = $root.XmsgImOrgEventUsr.verify(message.usr);
            if (error)
                return "usr." + error;
        }
        return null;
    };

    /**
     * Creates a XmsgImOrgEvent message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImOrgEvent
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImOrgEvent} XmsgImOrgEvent
     */
    XmsgImOrgEvent.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImOrgEvent)
            return object;
        var message = new $root.XmsgImOrgEvent();
        if (object.dept != null) {
            if (typeof object.dept !== "object")
                throw TypeError(".XmsgImOrgEvent.dept: object expected");
            message.dept = $root.XmsgImOrgEventDept.fromObject(object.dept);
        }
        if (object.deptUsr != null) {
            if (typeof object.deptUsr !== "object")
                throw TypeError(".XmsgImOrgEvent.deptUsr: object expected");
            message.deptUsr = $root.XmsgImOrgEventDeptUsr.fromObject(object.deptUsr);
        }
        if (object.usr != null) {
            if (typeof object.usr !== "object")
                throw TypeError(".XmsgImOrgEvent.usr: object expected");
            message.usr = $root.XmsgImOrgEventUsr.fromObject(object.usr);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImOrgEvent message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImOrgEvent
     * @static
     * @param {XmsgImOrgEvent} message XmsgImOrgEvent
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImOrgEvent.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.dept = null;
            object.deptUsr = null;
            object.usr = null;
        }
        if (message.dept != null && message.hasOwnProperty("dept"))
            object.dept = $root.XmsgImOrgEventDept.toObject(message.dept, options);
        if (message.deptUsr != null && message.hasOwnProperty("deptUsr"))
            object.deptUsr = $root.XmsgImOrgEventDeptUsr.toObject(message.deptUsr, options);
        if (message.usr != null && message.hasOwnProperty("usr"))
            object.usr = $root.XmsgImOrgEventUsr.toObject(message.usr, options);
        return object;
    };

    /**
     * Converts this XmsgImOrgEvent to JSON.
     * @function toJSON
     * @memberof XmsgImOrgEvent
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImOrgEvent.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImOrgEvent;
})();

$root.XmsgImOrgEventDept = (function() {

    /**
     * Properties of a XmsgImOrgEventDept.
     * @exports IXmsgImOrgEventDept
     * @interface IXmsgImOrgEventDept
     * @property {string|null} [cgt] XmsgImOrgEventDept cgt
     * @property {string|null} [pcgt] XmsgImOrgEventDept pcgt
     * @property {string|null} [name] XmsgImOrgEventDept name
     * @property {boolean|null} [enable] XmsgImOrgEventDept enable
     * @property {IXmsgImOrgNodeInfo|null} [info] XmsgImOrgEventDept info
     * @property {number|Long|null} [ver] XmsgImOrgEventDept ver
     * @property {number|Long|null} [gts] XmsgImOrgEventDept gts
     * @property {number|Long|null} [uts] XmsgImOrgEventDept uts
     */

    /**
     * Constructs a new XmsgImOrgEventDept.
     * @exports XmsgImOrgEventDept
     * @classdesc Represents a XmsgImOrgEventDept.
     * @implements IXmsgImOrgEventDept
     * @constructor
     * @param {IXmsgImOrgEventDept=} [properties] Properties to set
     */
    function XmsgImOrgEventDept(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImOrgEventDept cgt.
     * @member {string} cgt
     * @memberof XmsgImOrgEventDept
     * @instance
     */
    XmsgImOrgEventDept.prototype.cgt = "";

    /**
     * XmsgImOrgEventDept pcgt.
     * @member {string} pcgt
     * @memberof XmsgImOrgEventDept
     * @instance
     */
    XmsgImOrgEventDept.prototype.pcgt = "";

    /**
     * XmsgImOrgEventDept name.
     * @member {string} name
     * @memberof XmsgImOrgEventDept
     * @instance
     */
    XmsgImOrgEventDept.prototype.name = "";

    /**
     * XmsgImOrgEventDept enable.
     * @member {boolean} enable
     * @memberof XmsgImOrgEventDept
     * @instance
     */
    XmsgImOrgEventDept.prototype.enable = false;

    /**
     * XmsgImOrgEventDept info.
     * @member {IXmsgImOrgNodeInfo|null|undefined} info
     * @memberof XmsgImOrgEventDept
     * @instance
     */
    XmsgImOrgEventDept.prototype.info = null;

    /**
     * XmsgImOrgEventDept ver.
     * @member {number|Long} ver
     * @memberof XmsgImOrgEventDept
     * @instance
     */
    XmsgImOrgEventDept.prototype.ver = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImOrgEventDept gts.
     * @member {number|Long} gts
     * @memberof XmsgImOrgEventDept
     * @instance
     */
    XmsgImOrgEventDept.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImOrgEventDept uts.
     * @member {number|Long} uts
     * @memberof XmsgImOrgEventDept
     * @instance
     */
    XmsgImOrgEventDept.prototype.uts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgImOrgEventDept instance using the specified properties.
     * @function create
     * @memberof XmsgImOrgEventDept
     * @static
     * @param {IXmsgImOrgEventDept=} [properties] Properties to set
     * @returns {XmsgImOrgEventDept} XmsgImOrgEventDept instance
     */
    XmsgImOrgEventDept.create = function create(properties) {
        return new XmsgImOrgEventDept(properties);
    };

    /**
     * Encodes the specified XmsgImOrgEventDept message. Does not implicitly {@link XmsgImOrgEventDept.verify|verify} messages.
     * @function encode
     * @memberof XmsgImOrgEventDept
     * @static
     * @param {IXmsgImOrgEventDept} message XmsgImOrgEventDept message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgEventDept.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.pcgt != null && message.hasOwnProperty("pcgt"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pcgt);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.enable != null && message.hasOwnProperty("enable"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.enable);
        if (message.info != null && message.hasOwnProperty("info"))
            $root.XmsgImOrgNodeInfo.encode(message.info, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.ver != null && message.hasOwnProperty("ver"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.ver);
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.gts);
        if (message.uts != null && message.hasOwnProperty("uts"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.uts);
        return writer;
    };

    /**
     * Encodes the specified XmsgImOrgEventDept message, length delimited. Does not implicitly {@link XmsgImOrgEventDept.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImOrgEventDept
     * @static
     * @param {IXmsgImOrgEventDept} message XmsgImOrgEventDept message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgEventDept.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImOrgEventDept message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImOrgEventDept
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImOrgEventDept} XmsgImOrgEventDept
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgEventDept.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImOrgEventDept();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.pcgt = reader.string();
                break;
            case 3:
                message.name = reader.string();
                break;
            case 4:
                message.enable = reader.bool();
                break;
            case 5:
                message.info = $root.XmsgImOrgNodeInfo.decode(reader, reader.uint32());
                break;
            case 6:
                message.ver = reader.uint64();
                break;
            case 7:
                message.gts = reader.uint64();
                break;
            case 8:
                message.uts = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImOrgEventDept message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImOrgEventDept
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImOrgEventDept} XmsgImOrgEventDept
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgEventDept.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImOrgEventDept message.
     * @function verify
     * @memberof XmsgImOrgEventDept
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImOrgEventDept.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.pcgt != null && message.hasOwnProperty("pcgt"))
            if (!$util.isString(message.pcgt))
                return "pcgt: string expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.enable != null && message.hasOwnProperty("enable"))
            if (typeof message.enable !== "boolean")
                return "enable: boolean expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            var error = $root.XmsgImOrgNodeInfo.verify(message.info);
            if (error)
                return "info." + error;
        }
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (!$util.isInteger(message.ver) && !(message.ver && $util.isInteger(message.ver.low) && $util.isInteger(message.ver.high)))
                return "ver: integer|Long expected";
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (!$util.isInteger(message.uts) && !(message.uts && $util.isInteger(message.uts.low) && $util.isInteger(message.uts.high)))
                return "uts: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgImOrgEventDept message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImOrgEventDept
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImOrgEventDept} XmsgImOrgEventDept
     */
    XmsgImOrgEventDept.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImOrgEventDept)
            return object;
        var message = new $root.XmsgImOrgEventDept();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.pcgt != null)
            message.pcgt = String(object.pcgt);
        if (object.name != null)
            message.name = String(object.name);
        if (object.enable != null)
            message.enable = Boolean(object.enable);
        if (object.info != null) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImOrgEventDept.info: object expected");
            message.info = $root.XmsgImOrgNodeInfo.fromObject(object.info);
        }
        if (object.ver != null)
            if ($util.Long)
                (message.ver = $util.Long.fromValue(object.ver)).unsigned = true;
            else if (typeof object.ver === "string")
                message.ver = parseInt(object.ver, 10);
            else if (typeof object.ver === "number")
                message.ver = object.ver;
            else if (typeof object.ver === "object")
                message.ver = new $util.LongBits(object.ver.low >>> 0, object.ver.high >>> 0).toNumber(true);
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        if (object.uts != null)
            if ($util.Long)
                (message.uts = $util.Long.fromValue(object.uts)).unsigned = true;
            else if (typeof object.uts === "string")
                message.uts = parseInt(object.uts, 10);
            else if (typeof object.uts === "number")
                message.uts = object.uts;
            else if (typeof object.uts === "object")
                message.uts = new $util.LongBits(object.uts.low >>> 0, object.uts.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImOrgEventDept message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImOrgEventDept
     * @static
     * @param {XmsgImOrgEventDept} message XmsgImOrgEventDept
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImOrgEventDept.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cgt = "";
            object.pcgt = "";
            object.name = "";
            object.enable = false;
            object.info = null;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uts = options.longs === String ? "0" : 0;
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.pcgt != null && message.hasOwnProperty("pcgt"))
            object.pcgt = message.pcgt;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.enable != null && message.hasOwnProperty("enable"))
            object.enable = message.enable;
        if (message.info != null && message.hasOwnProperty("info"))
            object.info = $root.XmsgImOrgNodeInfo.toObject(message.info, options);
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (typeof message.ver === "number")
                object.ver = options.longs === String ? String(message.ver) : message.ver;
            else
                object.ver = options.longs === String ? $util.Long.prototype.toString.call(message.ver) : options.longs === Number ? new $util.LongBits(message.ver.low >>> 0, message.ver.high >>> 0).toNumber(true) : message.ver;
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (typeof message.uts === "number")
                object.uts = options.longs === String ? String(message.uts) : message.uts;
            else
                object.uts = options.longs === String ? $util.Long.prototype.toString.call(message.uts) : options.longs === Number ? new $util.LongBits(message.uts.low >>> 0, message.uts.high >>> 0).toNumber(true) : message.uts;
        return object;
    };

    /**
     * Converts this XmsgImOrgEventDept to JSON.
     * @function toJSON
     * @memberof XmsgImOrgEventDept
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImOrgEventDept.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImOrgEventDept;
})();

$root.XmsgImOrgEventDeptUsr = (function() {

    /**
     * Properties of a XmsgImOrgEventDeptUsr.
     * @exports IXmsgImOrgEventDeptUsr
     * @interface IXmsgImOrgEventDeptUsr
     * @property {string|null} [dcgt] XmsgImOrgEventDeptUsr dcgt
     * @property {string|null} [ucgt] XmsgImOrgEventDeptUsr ucgt
     * @property {string|null} [name] XmsgImOrgEventDeptUsr name
     * @property {boolean|null} [enable] XmsgImOrgEventDeptUsr enable
     * @property {IXmsgImOrgNodeInfo|null} [info] XmsgImOrgEventDeptUsr info
     * @property {number|Long|null} [ver] XmsgImOrgEventDeptUsr ver
     * @property {number|Long|null} [gts] XmsgImOrgEventDeptUsr gts
     * @property {number|Long|null} [uts] XmsgImOrgEventDeptUsr uts
     */

    /**
     * Constructs a new XmsgImOrgEventDeptUsr.
     * @exports XmsgImOrgEventDeptUsr
     * @classdesc Represents a XmsgImOrgEventDeptUsr.
     * @implements IXmsgImOrgEventDeptUsr
     * @constructor
     * @param {IXmsgImOrgEventDeptUsr=} [properties] Properties to set
     */
    function XmsgImOrgEventDeptUsr(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImOrgEventDeptUsr dcgt.
     * @member {string} dcgt
     * @memberof XmsgImOrgEventDeptUsr
     * @instance
     */
    XmsgImOrgEventDeptUsr.prototype.dcgt = "";

    /**
     * XmsgImOrgEventDeptUsr ucgt.
     * @member {string} ucgt
     * @memberof XmsgImOrgEventDeptUsr
     * @instance
     */
    XmsgImOrgEventDeptUsr.prototype.ucgt = "";

    /**
     * XmsgImOrgEventDeptUsr name.
     * @member {string} name
     * @memberof XmsgImOrgEventDeptUsr
     * @instance
     */
    XmsgImOrgEventDeptUsr.prototype.name = "";

    /**
     * XmsgImOrgEventDeptUsr enable.
     * @member {boolean} enable
     * @memberof XmsgImOrgEventDeptUsr
     * @instance
     */
    XmsgImOrgEventDeptUsr.prototype.enable = false;

    /**
     * XmsgImOrgEventDeptUsr info.
     * @member {IXmsgImOrgNodeInfo|null|undefined} info
     * @memberof XmsgImOrgEventDeptUsr
     * @instance
     */
    XmsgImOrgEventDeptUsr.prototype.info = null;

    /**
     * XmsgImOrgEventDeptUsr ver.
     * @member {number|Long} ver
     * @memberof XmsgImOrgEventDeptUsr
     * @instance
     */
    XmsgImOrgEventDeptUsr.prototype.ver = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImOrgEventDeptUsr gts.
     * @member {number|Long} gts
     * @memberof XmsgImOrgEventDeptUsr
     * @instance
     */
    XmsgImOrgEventDeptUsr.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImOrgEventDeptUsr uts.
     * @member {number|Long} uts
     * @memberof XmsgImOrgEventDeptUsr
     * @instance
     */
    XmsgImOrgEventDeptUsr.prototype.uts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgImOrgEventDeptUsr instance using the specified properties.
     * @function create
     * @memberof XmsgImOrgEventDeptUsr
     * @static
     * @param {IXmsgImOrgEventDeptUsr=} [properties] Properties to set
     * @returns {XmsgImOrgEventDeptUsr} XmsgImOrgEventDeptUsr instance
     */
    XmsgImOrgEventDeptUsr.create = function create(properties) {
        return new XmsgImOrgEventDeptUsr(properties);
    };

    /**
     * Encodes the specified XmsgImOrgEventDeptUsr message. Does not implicitly {@link XmsgImOrgEventDeptUsr.verify|verify} messages.
     * @function encode
     * @memberof XmsgImOrgEventDeptUsr
     * @static
     * @param {IXmsgImOrgEventDeptUsr} message XmsgImOrgEventDeptUsr message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgEventDeptUsr.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.dcgt != null && message.hasOwnProperty("dcgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.dcgt);
        if (message.ucgt != null && message.hasOwnProperty("ucgt"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.ucgt);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.enable != null && message.hasOwnProperty("enable"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.enable);
        if (message.info != null && message.hasOwnProperty("info"))
            $root.XmsgImOrgNodeInfo.encode(message.info, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.ver != null && message.hasOwnProperty("ver"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.ver);
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.gts);
        if (message.uts != null && message.hasOwnProperty("uts"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.uts);
        return writer;
    };

    /**
     * Encodes the specified XmsgImOrgEventDeptUsr message, length delimited. Does not implicitly {@link XmsgImOrgEventDeptUsr.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImOrgEventDeptUsr
     * @static
     * @param {IXmsgImOrgEventDeptUsr} message XmsgImOrgEventDeptUsr message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgEventDeptUsr.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImOrgEventDeptUsr message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImOrgEventDeptUsr
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImOrgEventDeptUsr} XmsgImOrgEventDeptUsr
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgEventDeptUsr.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImOrgEventDeptUsr();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.dcgt = reader.string();
                break;
            case 2:
                message.ucgt = reader.string();
                break;
            case 3:
                message.name = reader.string();
                break;
            case 4:
                message.enable = reader.bool();
                break;
            case 5:
                message.info = $root.XmsgImOrgNodeInfo.decode(reader, reader.uint32());
                break;
            case 6:
                message.ver = reader.uint64();
                break;
            case 7:
                message.gts = reader.uint64();
                break;
            case 8:
                message.uts = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImOrgEventDeptUsr message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImOrgEventDeptUsr
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImOrgEventDeptUsr} XmsgImOrgEventDeptUsr
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgEventDeptUsr.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImOrgEventDeptUsr message.
     * @function verify
     * @memberof XmsgImOrgEventDeptUsr
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImOrgEventDeptUsr.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.dcgt != null && message.hasOwnProperty("dcgt"))
            if (!$util.isString(message.dcgt))
                return "dcgt: string expected";
        if (message.ucgt != null && message.hasOwnProperty("ucgt"))
            if (!$util.isString(message.ucgt))
                return "ucgt: string expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.enable != null && message.hasOwnProperty("enable"))
            if (typeof message.enable !== "boolean")
                return "enable: boolean expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            var error = $root.XmsgImOrgNodeInfo.verify(message.info);
            if (error)
                return "info." + error;
        }
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (!$util.isInteger(message.ver) && !(message.ver && $util.isInteger(message.ver.low) && $util.isInteger(message.ver.high)))
                return "ver: integer|Long expected";
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (!$util.isInteger(message.uts) && !(message.uts && $util.isInteger(message.uts.low) && $util.isInteger(message.uts.high)))
                return "uts: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgImOrgEventDeptUsr message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImOrgEventDeptUsr
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImOrgEventDeptUsr} XmsgImOrgEventDeptUsr
     */
    XmsgImOrgEventDeptUsr.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImOrgEventDeptUsr)
            return object;
        var message = new $root.XmsgImOrgEventDeptUsr();
        if (object.dcgt != null)
            message.dcgt = String(object.dcgt);
        if (object.ucgt != null)
            message.ucgt = String(object.ucgt);
        if (object.name != null)
            message.name = String(object.name);
        if (object.enable != null)
            message.enable = Boolean(object.enable);
        if (object.info != null) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImOrgEventDeptUsr.info: object expected");
            message.info = $root.XmsgImOrgNodeInfo.fromObject(object.info);
        }
        if (object.ver != null)
            if ($util.Long)
                (message.ver = $util.Long.fromValue(object.ver)).unsigned = true;
            else if (typeof object.ver === "string")
                message.ver = parseInt(object.ver, 10);
            else if (typeof object.ver === "number")
                message.ver = object.ver;
            else if (typeof object.ver === "object")
                message.ver = new $util.LongBits(object.ver.low >>> 0, object.ver.high >>> 0).toNumber(true);
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        if (object.uts != null)
            if ($util.Long)
                (message.uts = $util.Long.fromValue(object.uts)).unsigned = true;
            else if (typeof object.uts === "string")
                message.uts = parseInt(object.uts, 10);
            else if (typeof object.uts === "number")
                message.uts = object.uts;
            else if (typeof object.uts === "object")
                message.uts = new $util.LongBits(object.uts.low >>> 0, object.uts.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImOrgEventDeptUsr message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImOrgEventDeptUsr
     * @static
     * @param {XmsgImOrgEventDeptUsr} message XmsgImOrgEventDeptUsr
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImOrgEventDeptUsr.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.dcgt = "";
            object.ucgt = "";
            object.name = "";
            object.enable = false;
            object.info = null;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uts = options.longs === String ? "0" : 0;
        }
        if (message.dcgt != null && message.hasOwnProperty("dcgt"))
            object.dcgt = message.dcgt;
        if (message.ucgt != null && message.hasOwnProperty("ucgt"))
            object.ucgt = message.ucgt;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.enable != null && message.hasOwnProperty("enable"))
            object.enable = message.enable;
        if (message.info != null && message.hasOwnProperty("info"))
            object.info = $root.XmsgImOrgNodeInfo.toObject(message.info, options);
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (typeof message.ver === "number")
                object.ver = options.longs === String ? String(message.ver) : message.ver;
            else
                object.ver = options.longs === String ? $util.Long.prototype.toString.call(message.ver) : options.longs === Number ? new $util.LongBits(message.ver.low >>> 0, message.ver.high >>> 0).toNumber(true) : message.ver;
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (typeof message.uts === "number")
                object.uts = options.longs === String ? String(message.uts) : message.uts;
            else
                object.uts = options.longs === String ? $util.Long.prototype.toString.call(message.uts) : options.longs === Number ? new $util.LongBits(message.uts.low >>> 0, message.uts.high >>> 0).toNumber(true) : message.uts;
        return object;
    };

    /**
     * Converts this XmsgImOrgEventDeptUsr to JSON.
     * @function toJSON
     * @memberof XmsgImOrgEventDeptUsr
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImOrgEventDeptUsr.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImOrgEventDeptUsr;
})();

$root.XmsgImOrgEventUsr = (function() {

    /**
     * Properties of a XmsgImOrgEventUsr.
     * @exports IXmsgImOrgEventUsr
     * @interface IXmsgImOrgEventUsr
     * @property {string|null} [cgt] XmsgImOrgEventUsr cgt
     * @property {string|null} [name] XmsgImOrgEventUsr name
     * @property {boolean|null} [enable] XmsgImOrgEventUsr enable
     * @property {IXmsgImOrgNodeInfo|null} [info] XmsgImOrgEventUsr info
     * @property {number|Long|null} [ver] XmsgImOrgEventUsr ver
     * @property {number|Long|null} [gts] XmsgImOrgEventUsr gts
     * @property {number|Long|null} [uts] XmsgImOrgEventUsr uts
     */

    /**
     * Constructs a new XmsgImOrgEventUsr.
     * @exports XmsgImOrgEventUsr
     * @classdesc Represents a XmsgImOrgEventUsr.
     * @implements IXmsgImOrgEventUsr
     * @constructor
     * @param {IXmsgImOrgEventUsr=} [properties] Properties to set
     */
    function XmsgImOrgEventUsr(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImOrgEventUsr cgt.
     * @member {string} cgt
     * @memberof XmsgImOrgEventUsr
     * @instance
     */
    XmsgImOrgEventUsr.prototype.cgt = "";

    /**
     * XmsgImOrgEventUsr name.
     * @member {string} name
     * @memberof XmsgImOrgEventUsr
     * @instance
     */
    XmsgImOrgEventUsr.prototype.name = "";

    /**
     * XmsgImOrgEventUsr enable.
     * @member {boolean} enable
     * @memberof XmsgImOrgEventUsr
     * @instance
     */
    XmsgImOrgEventUsr.prototype.enable = false;

    /**
     * XmsgImOrgEventUsr info.
     * @member {IXmsgImOrgNodeInfo|null|undefined} info
     * @memberof XmsgImOrgEventUsr
     * @instance
     */
    XmsgImOrgEventUsr.prototype.info = null;

    /**
     * XmsgImOrgEventUsr ver.
     * @member {number|Long} ver
     * @memberof XmsgImOrgEventUsr
     * @instance
     */
    XmsgImOrgEventUsr.prototype.ver = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImOrgEventUsr gts.
     * @member {number|Long} gts
     * @memberof XmsgImOrgEventUsr
     * @instance
     */
    XmsgImOrgEventUsr.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImOrgEventUsr uts.
     * @member {number|Long} uts
     * @memberof XmsgImOrgEventUsr
     * @instance
     */
    XmsgImOrgEventUsr.prototype.uts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgImOrgEventUsr instance using the specified properties.
     * @function create
     * @memberof XmsgImOrgEventUsr
     * @static
     * @param {IXmsgImOrgEventUsr=} [properties] Properties to set
     * @returns {XmsgImOrgEventUsr} XmsgImOrgEventUsr instance
     */
    XmsgImOrgEventUsr.create = function create(properties) {
        return new XmsgImOrgEventUsr(properties);
    };

    /**
     * Encodes the specified XmsgImOrgEventUsr message. Does not implicitly {@link XmsgImOrgEventUsr.verify|verify} messages.
     * @function encode
     * @memberof XmsgImOrgEventUsr
     * @static
     * @param {IXmsgImOrgEventUsr} message XmsgImOrgEventUsr message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgEventUsr.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.enable != null && message.hasOwnProperty("enable"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.enable);
        if (message.info != null && message.hasOwnProperty("info"))
            $root.XmsgImOrgNodeInfo.encode(message.info, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.ver != null && message.hasOwnProperty("ver"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.ver);
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.gts);
        if (message.uts != null && message.hasOwnProperty("uts"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.uts);
        return writer;
    };

    /**
     * Encodes the specified XmsgImOrgEventUsr message, length delimited. Does not implicitly {@link XmsgImOrgEventUsr.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImOrgEventUsr
     * @static
     * @param {IXmsgImOrgEventUsr} message XmsgImOrgEventUsr message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgEventUsr.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImOrgEventUsr message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImOrgEventUsr
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImOrgEventUsr} XmsgImOrgEventUsr
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgEventUsr.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImOrgEventUsr();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.name = reader.string();
                break;
            case 3:
                message.enable = reader.bool();
                break;
            case 4:
                message.info = $root.XmsgImOrgNodeInfo.decode(reader, reader.uint32());
                break;
            case 5:
                message.ver = reader.uint64();
                break;
            case 6:
                message.gts = reader.uint64();
                break;
            case 7:
                message.uts = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImOrgEventUsr message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImOrgEventUsr
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImOrgEventUsr} XmsgImOrgEventUsr
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgEventUsr.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImOrgEventUsr message.
     * @function verify
     * @memberof XmsgImOrgEventUsr
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImOrgEventUsr.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.enable != null && message.hasOwnProperty("enable"))
            if (typeof message.enable !== "boolean")
                return "enable: boolean expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            var error = $root.XmsgImOrgNodeInfo.verify(message.info);
            if (error)
                return "info." + error;
        }
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (!$util.isInteger(message.ver) && !(message.ver && $util.isInteger(message.ver.low) && $util.isInteger(message.ver.high)))
                return "ver: integer|Long expected";
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (!$util.isInteger(message.uts) && !(message.uts && $util.isInteger(message.uts.low) && $util.isInteger(message.uts.high)))
                return "uts: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgImOrgEventUsr message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImOrgEventUsr
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImOrgEventUsr} XmsgImOrgEventUsr
     */
    XmsgImOrgEventUsr.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImOrgEventUsr)
            return object;
        var message = new $root.XmsgImOrgEventUsr();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.name != null)
            message.name = String(object.name);
        if (object.enable != null)
            message.enable = Boolean(object.enable);
        if (object.info != null) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImOrgEventUsr.info: object expected");
            message.info = $root.XmsgImOrgNodeInfo.fromObject(object.info);
        }
        if (object.ver != null)
            if ($util.Long)
                (message.ver = $util.Long.fromValue(object.ver)).unsigned = true;
            else if (typeof object.ver === "string")
                message.ver = parseInt(object.ver, 10);
            else if (typeof object.ver === "number")
                message.ver = object.ver;
            else if (typeof object.ver === "object")
                message.ver = new $util.LongBits(object.ver.low >>> 0, object.ver.high >>> 0).toNumber(true);
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        if (object.uts != null)
            if ($util.Long)
                (message.uts = $util.Long.fromValue(object.uts)).unsigned = true;
            else if (typeof object.uts === "string")
                message.uts = parseInt(object.uts, 10);
            else if (typeof object.uts === "number")
                message.uts = object.uts;
            else if (typeof object.uts === "object")
                message.uts = new $util.LongBits(object.uts.low >>> 0, object.uts.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImOrgEventUsr message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImOrgEventUsr
     * @static
     * @param {XmsgImOrgEventUsr} message XmsgImOrgEventUsr
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImOrgEventUsr.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cgt = "";
            object.name = "";
            object.enable = false;
            object.info = null;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uts = options.longs === String ? "0" : 0;
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.enable != null && message.hasOwnProperty("enable"))
            object.enable = message.enable;
        if (message.info != null && message.hasOwnProperty("info"))
            object.info = $root.XmsgImOrgNodeInfo.toObject(message.info, options);
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (typeof message.ver === "number")
                object.ver = options.longs === String ? String(message.ver) : message.ver;
            else
                object.ver = options.longs === String ? $util.Long.prototype.toString.call(message.ver) : options.longs === Number ? new $util.LongBits(message.ver.low >>> 0, message.ver.high >>> 0).toNumber(true) : message.ver;
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (typeof message.uts === "number")
                object.uts = options.longs === String ? String(message.uts) : message.uts;
            else
                object.uts = options.longs === String ? $util.Long.prototype.toString.call(message.uts) : options.longs === Number ? new $util.LongBits(message.uts.low >>> 0, message.uts.high >>> 0).toNumber(true) : message.uts;
        return object;
    };

    /**
     * Converts this XmsgImOrgEventUsr to JSON.
     * @function toJSON
     * @memberof XmsgImOrgEventUsr
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImOrgEventUsr.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImOrgEventUsr;
})();

/**
 * XmsgImOrgNodeType enum.
 * @exports XmsgImOrgNodeType
 * @enum {string}
 * @property {number} X_MSG_IM_ORG_NODE_TYPE__RESERVED__=0 X_MSG_IM_ORG_NODE_TYPE__RESERVED__ value
 * @property {number} X_MSG_IM_ORG_NODE_TYPE_BRANCH=1 X_MSG_IM_ORG_NODE_TYPE_BRANCH value
 * @property {number} X_MSG_IM_ORG_NODE_TYPE_LEAF=2 X_MSG_IM_ORG_NODE_TYPE_LEAF value
 */
$root.XmsgImOrgNodeType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "X_MSG_IM_ORG_NODE_TYPE__RESERVED__"] = 0;
    values[valuesById[1] = "X_MSG_IM_ORG_NODE_TYPE_BRANCH"] = 1;
    values[valuesById[2] = "X_MSG_IM_ORG_NODE_TYPE_LEAF"] = 2;
    return values;
})();

$root.XmsgImOrgNodeInfo = (function() {

    /**
     * Properties of a XmsgImOrgNodeInfo.
     * @exports IXmsgImOrgNodeInfo
     * @interface IXmsgImOrgNodeInfo
     * @property {Object.<string,string>|null} [kv] XmsgImOrgNodeInfo kv
     */

    /**
     * Constructs a new XmsgImOrgNodeInfo.
     * @exports XmsgImOrgNodeInfo
     * @classdesc Represents a XmsgImOrgNodeInfo.
     * @implements IXmsgImOrgNodeInfo
     * @constructor
     * @param {IXmsgImOrgNodeInfo=} [properties] Properties to set
     */
    function XmsgImOrgNodeInfo(properties) {
        this.kv = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImOrgNodeInfo kv.
     * @member {Object.<string,string>} kv
     * @memberof XmsgImOrgNodeInfo
     * @instance
     */
    XmsgImOrgNodeInfo.prototype.kv = $util.emptyObject;

    /**
     * Creates a new XmsgImOrgNodeInfo instance using the specified properties.
     * @function create
     * @memberof XmsgImOrgNodeInfo
     * @static
     * @param {IXmsgImOrgNodeInfo=} [properties] Properties to set
     * @returns {XmsgImOrgNodeInfo} XmsgImOrgNodeInfo instance
     */
    XmsgImOrgNodeInfo.create = function create(properties) {
        return new XmsgImOrgNodeInfo(properties);
    };

    /**
     * Encodes the specified XmsgImOrgNodeInfo message. Does not implicitly {@link XmsgImOrgNodeInfo.verify|verify} messages.
     * @function encode
     * @memberof XmsgImOrgNodeInfo
     * @static
     * @param {IXmsgImOrgNodeInfo} message XmsgImOrgNodeInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgNodeInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.kv != null && message.hasOwnProperty("kv"))
            for (var keys = Object.keys(message.kv), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.kv[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImOrgNodeInfo message, length delimited. Does not implicitly {@link XmsgImOrgNodeInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImOrgNodeInfo
     * @static
     * @param {IXmsgImOrgNodeInfo} message XmsgImOrgNodeInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgNodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImOrgNodeInfo message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImOrgNodeInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImOrgNodeInfo} XmsgImOrgNodeInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgNodeInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImOrgNodeInfo(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                reader.skip().pos++;
                if (message.kv === $util.emptyObject)
                    message.kv = {};
                key = reader.string();
                reader.pos++;
                message.kv[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImOrgNodeInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImOrgNodeInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImOrgNodeInfo} XmsgImOrgNodeInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgNodeInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImOrgNodeInfo message.
     * @function verify
     * @memberof XmsgImOrgNodeInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImOrgNodeInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.kv != null && message.hasOwnProperty("kv")) {
            if (!$util.isObject(message.kv))
                return "kv: object expected";
            var key = Object.keys(message.kv);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.kv[key[i]]))
                    return "kv: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImOrgNodeInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImOrgNodeInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImOrgNodeInfo} XmsgImOrgNodeInfo
     */
    XmsgImOrgNodeInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImOrgNodeInfo)
            return object;
        var message = new $root.XmsgImOrgNodeInfo();
        if (object.kv) {
            if (typeof object.kv !== "object")
                throw TypeError(".XmsgImOrgNodeInfo.kv: object expected");
            message.kv = {};
            for (var keys = Object.keys(object.kv), i = 0; i < keys.length; ++i)
                message.kv[keys[i]] = String(object.kv[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImOrgNodeInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImOrgNodeInfo
     * @static
     * @param {XmsgImOrgNodeInfo} message XmsgImOrgNodeInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImOrgNodeInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.kv = {};
        var keys2;
        if (message.kv && (keys2 = Object.keys(message.kv)).length) {
            object.kv = {};
            for (var j = 0; j < keys2.length; ++j)
                object.kv[keys2[j]] = message.kv[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImOrgNodeInfo to JSON.
     * @function toJSON
     * @memberof XmsgImOrgNodeInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImOrgNodeInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImOrgNodeInfo;
})();

$root.XmsgImOrgNodeChild = (function() {

    /**
     * Properties of a XmsgImOrgNodeChild.
     * @exports IXmsgImOrgNodeChild
     * @interface IXmsgImOrgNodeChild
     * @property {string|null} [cgt] XmsgImOrgNodeChild cgt
     * @property {string|null} [name] XmsgImOrgNodeChild name
     * @property {boolean|null} [enable] XmsgImOrgNodeChild enable
     * @property {XmsgImOrgNodeType|null} [type] XmsgImOrgNodeChild type
     * @property {IXmsgImOrgNodeInfo|null} [info] XmsgImOrgNodeChild info
     * @property {number|Long|null} [ver] XmsgImOrgNodeChild ver
     * @property {number|Long|null} [gts] XmsgImOrgNodeChild gts
     * @property {number|Long|null} [uts] XmsgImOrgNodeChild uts
     */

    /**
     * Constructs a new XmsgImOrgNodeChild.
     * @exports XmsgImOrgNodeChild
     * @classdesc Represents a XmsgImOrgNodeChild.
     * @implements IXmsgImOrgNodeChild
     * @constructor
     * @param {IXmsgImOrgNodeChild=} [properties] Properties to set
     */
    function XmsgImOrgNodeChild(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImOrgNodeChild cgt.
     * @member {string} cgt
     * @memberof XmsgImOrgNodeChild
     * @instance
     */
    XmsgImOrgNodeChild.prototype.cgt = "";

    /**
     * XmsgImOrgNodeChild name.
     * @member {string} name
     * @memberof XmsgImOrgNodeChild
     * @instance
     */
    XmsgImOrgNodeChild.prototype.name = "";

    /**
     * XmsgImOrgNodeChild enable.
     * @member {boolean} enable
     * @memberof XmsgImOrgNodeChild
     * @instance
     */
    XmsgImOrgNodeChild.prototype.enable = false;

    /**
     * XmsgImOrgNodeChild type.
     * @member {XmsgImOrgNodeType} type
     * @memberof XmsgImOrgNodeChild
     * @instance
     */
    XmsgImOrgNodeChild.prototype.type = 0;

    /**
     * XmsgImOrgNodeChild info.
     * @member {IXmsgImOrgNodeInfo|null|undefined} info
     * @memberof XmsgImOrgNodeChild
     * @instance
     */
    XmsgImOrgNodeChild.prototype.info = null;

    /**
     * XmsgImOrgNodeChild ver.
     * @member {number|Long} ver
     * @memberof XmsgImOrgNodeChild
     * @instance
     */
    XmsgImOrgNodeChild.prototype.ver = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImOrgNodeChild gts.
     * @member {number|Long} gts
     * @memberof XmsgImOrgNodeChild
     * @instance
     */
    XmsgImOrgNodeChild.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImOrgNodeChild uts.
     * @member {number|Long} uts
     * @memberof XmsgImOrgNodeChild
     * @instance
     */
    XmsgImOrgNodeChild.prototype.uts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgImOrgNodeChild instance using the specified properties.
     * @function create
     * @memberof XmsgImOrgNodeChild
     * @static
     * @param {IXmsgImOrgNodeChild=} [properties] Properties to set
     * @returns {XmsgImOrgNodeChild} XmsgImOrgNodeChild instance
     */
    XmsgImOrgNodeChild.create = function create(properties) {
        return new XmsgImOrgNodeChild(properties);
    };

    /**
     * Encodes the specified XmsgImOrgNodeChild message. Does not implicitly {@link XmsgImOrgNodeChild.verify|verify} messages.
     * @function encode
     * @memberof XmsgImOrgNodeChild
     * @static
     * @param {IXmsgImOrgNodeChild} message XmsgImOrgNodeChild message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgNodeChild.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.enable != null && message.hasOwnProperty("enable"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.enable);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);
        if (message.info != null && message.hasOwnProperty("info"))
            $root.XmsgImOrgNodeInfo.encode(message.info, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.ver != null && message.hasOwnProperty("ver"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.ver);
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.gts);
        if (message.uts != null && message.hasOwnProperty("uts"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.uts);
        return writer;
    };

    /**
     * Encodes the specified XmsgImOrgNodeChild message, length delimited. Does not implicitly {@link XmsgImOrgNodeChild.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImOrgNodeChild
     * @static
     * @param {IXmsgImOrgNodeChild} message XmsgImOrgNodeChild message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImOrgNodeChild.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImOrgNodeChild message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImOrgNodeChild
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImOrgNodeChild} XmsgImOrgNodeChild
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgNodeChild.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImOrgNodeChild();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.name = reader.string();
                break;
            case 3:
                message.enable = reader.bool();
                break;
            case 4:
                message.type = reader.int32();
                break;
            case 5:
                message.info = $root.XmsgImOrgNodeInfo.decode(reader, reader.uint32());
                break;
            case 6:
                message.ver = reader.uint64();
                break;
            case 7:
                message.gts = reader.uint64();
                break;
            case 8:
                message.uts = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImOrgNodeChild message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImOrgNodeChild
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImOrgNodeChild} XmsgImOrgNodeChild
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImOrgNodeChild.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImOrgNodeChild message.
     * @function verify
     * @memberof XmsgImOrgNodeChild
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImOrgNodeChild.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.enable != null && message.hasOwnProperty("enable"))
            if (typeof message.enable !== "boolean")
                return "enable: boolean expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.info != null && message.hasOwnProperty("info")) {
            var error = $root.XmsgImOrgNodeInfo.verify(message.info);
            if (error)
                return "info." + error;
        }
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (!$util.isInteger(message.ver) && !(message.ver && $util.isInteger(message.ver.low) && $util.isInteger(message.ver.high)))
                return "ver: integer|Long expected";
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (!$util.isInteger(message.uts) && !(message.uts && $util.isInteger(message.uts.low) && $util.isInteger(message.uts.high)))
                return "uts: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgImOrgNodeChild message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImOrgNodeChild
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImOrgNodeChild} XmsgImOrgNodeChild
     */
    XmsgImOrgNodeChild.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImOrgNodeChild)
            return object;
        var message = new $root.XmsgImOrgNodeChild();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.name != null)
            message.name = String(object.name);
        if (object.enable != null)
            message.enable = Boolean(object.enable);
        switch (object.type) {
        case "X_MSG_IM_ORG_NODE_TYPE__RESERVED__":
        case 0:
            message.type = 0;
            break;
        case "X_MSG_IM_ORG_NODE_TYPE_BRANCH":
        case 1:
            message.type = 1;
            break;
        case "X_MSG_IM_ORG_NODE_TYPE_LEAF":
        case 2:
            message.type = 2;
            break;
        }
        if (object.info != null) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImOrgNodeChild.info: object expected");
            message.info = $root.XmsgImOrgNodeInfo.fromObject(object.info);
        }
        if (object.ver != null)
            if ($util.Long)
                (message.ver = $util.Long.fromValue(object.ver)).unsigned = true;
            else if (typeof object.ver === "string")
                message.ver = parseInt(object.ver, 10);
            else if (typeof object.ver === "number")
                message.ver = object.ver;
            else if (typeof object.ver === "object")
                message.ver = new $util.LongBits(object.ver.low >>> 0, object.ver.high >>> 0).toNumber(true);
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        if (object.uts != null)
            if ($util.Long)
                (message.uts = $util.Long.fromValue(object.uts)).unsigned = true;
            else if (typeof object.uts === "string")
                message.uts = parseInt(object.uts, 10);
            else if (typeof object.uts === "number")
                message.uts = object.uts;
            else if (typeof object.uts === "object")
                message.uts = new $util.LongBits(object.uts.low >>> 0, object.uts.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImOrgNodeChild message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImOrgNodeChild
     * @static
     * @param {XmsgImOrgNodeChild} message XmsgImOrgNodeChild
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImOrgNodeChild.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cgt = "";
            object.name = "";
            object.enable = false;
            object.type = options.enums === String ? "X_MSG_IM_ORG_NODE_TYPE__RESERVED__" : 0;
            object.info = null;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uts = options.longs === String ? "0" : 0;
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.enable != null && message.hasOwnProperty("enable"))
            object.enable = message.enable;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.XmsgImOrgNodeType[message.type] : message.type;
        if (message.info != null && message.hasOwnProperty("info"))
            object.info = $root.XmsgImOrgNodeInfo.toObject(message.info, options);
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (typeof message.ver === "number")
                object.ver = options.longs === String ? String(message.ver) : message.ver;
            else
                object.ver = options.longs === String ? $util.Long.prototype.toString.call(message.ver) : options.longs === Number ? new $util.LongBits(message.ver.low >>> 0, message.ver.high >>> 0).toNumber(true) : message.ver;
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (typeof message.uts === "number")
                object.uts = options.longs === String ? String(message.uts) : message.uts;
            else
                object.uts = options.longs === String ? $util.Long.prototype.toString.call(message.uts) : options.longs === Number ? new $util.LongBits(message.uts.low >>> 0, message.uts.high >>> 0).toNumber(true) : message.uts;
        return object;
    };

    /**
     * Converts this XmsgImOrgNodeChild to JSON.
     * @function toJSON
     * @memberof XmsgImOrgNodeChild
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImOrgNodeChild.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImOrgNodeChild;
})();

$root.XmsgImGroupUsrGroupQueryReq = (function() {

    /**
     * Properties of a XmsgImGroupUsrGroupQueryReq.
     * @exports IXmsgImGroupUsrGroupQueryReq
     * @interface IXmsgImGroupUsrGroupQueryReq
     * @property {Object.<string,string>|null} [ext] XmsgImGroupUsrGroupQueryReq ext
     */

    /**
     * Constructs a new XmsgImGroupUsrGroupQueryReq.
     * @exports XmsgImGroupUsrGroupQueryReq
     * @classdesc Represents a XmsgImGroupUsrGroupQueryReq.
     * @implements IXmsgImGroupUsrGroupQueryReq
     * @constructor
     * @param {IXmsgImGroupUsrGroupQueryReq=} [properties] Properties to set
     */
    function XmsgImGroupUsrGroupQueryReq(properties) {
        this.ext = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupUsrGroupQueryReq ext.
     * @member {Object.<string,string>} ext
     * @memberof XmsgImGroupUsrGroupQueryReq
     * @instance
     */
    XmsgImGroupUsrGroupQueryReq.prototype.ext = $util.emptyObject;

    /**
     * Creates a new XmsgImGroupUsrGroupQueryReq instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupUsrGroupQueryReq
     * @static
     * @param {IXmsgImGroupUsrGroupQueryReq=} [properties] Properties to set
     * @returns {XmsgImGroupUsrGroupQueryReq} XmsgImGroupUsrGroupQueryReq instance
     */
    XmsgImGroupUsrGroupQueryReq.create = function create(properties) {
        return new XmsgImGroupUsrGroupQueryReq(properties);
    };

    /**
     * Encodes the specified XmsgImGroupUsrGroupQueryReq message. Does not implicitly {@link XmsgImGroupUsrGroupQueryReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupUsrGroupQueryReq
     * @static
     * @param {IXmsgImGroupUsrGroupQueryReq} message XmsgImGroupUsrGroupQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupUsrGroupQueryReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ext != null && message.hasOwnProperty("ext"))
            for (var keys = Object.keys(message.ext), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.ext[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupUsrGroupQueryReq message, length delimited. Does not implicitly {@link XmsgImGroupUsrGroupQueryReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupUsrGroupQueryReq
     * @static
     * @param {IXmsgImGroupUsrGroupQueryReq} message XmsgImGroupUsrGroupQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupUsrGroupQueryReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupUsrGroupQueryReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupUsrGroupQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupUsrGroupQueryReq} XmsgImGroupUsrGroupQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupUsrGroupQueryReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupUsrGroupQueryReq(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                reader.skip().pos++;
                if (message.ext === $util.emptyObject)
                    message.ext = {};
                key = reader.string();
                reader.pos++;
                message.ext[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupUsrGroupQueryReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupUsrGroupQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupUsrGroupQueryReq} XmsgImGroupUsrGroupQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupUsrGroupQueryReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupUsrGroupQueryReq message.
     * @function verify
     * @memberof XmsgImGroupUsrGroupQueryReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupUsrGroupQueryReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ext != null && message.hasOwnProperty("ext")) {
            if (!$util.isObject(message.ext))
                return "ext: object expected";
            var key = Object.keys(message.ext);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.ext[key[i]]))
                    return "ext: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupUsrGroupQueryReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupUsrGroupQueryReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupUsrGroupQueryReq} XmsgImGroupUsrGroupQueryReq
     */
    XmsgImGroupUsrGroupQueryReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupUsrGroupQueryReq)
            return object;
        var message = new $root.XmsgImGroupUsrGroupQueryReq();
        if (object.ext) {
            if (typeof object.ext !== "object")
                throw TypeError(".XmsgImGroupUsrGroupQueryReq.ext: object expected");
            message.ext = {};
            for (var keys = Object.keys(object.ext), i = 0; i < keys.length; ++i)
                message.ext[keys[i]] = String(object.ext[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupUsrGroupQueryReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupUsrGroupQueryReq
     * @static
     * @param {XmsgImGroupUsrGroupQueryReq} message XmsgImGroupUsrGroupQueryReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupUsrGroupQueryReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.ext = {};
        var keys2;
        if (message.ext && (keys2 = Object.keys(message.ext)).length) {
            object.ext = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ext[keys2[j]] = message.ext[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupUsrGroupQueryReq to JSON.
     * @function toJSON
     * @memberof XmsgImGroupUsrGroupQueryReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupUsrGroupQueryReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupUsrGroupQueryReq;
})();

$root.XmsgImGroupUsrGroupQueryRsp = (function() {

    /**
     * Properties of a XmsgImGroupUsrGroupQueryRsp.
     * @exports IXmsgImGroupUsrGroupQueryRsp
     * @interface IXmsgImGroupUsrGroupQueryRsp
     * @property {Array.<IXmsgImGroupUsrGroupInfo>|null} [group] XmsgImGroupUsrGroupQueryRsp group
     */

    /**
     * Constructs a new XmsgImGroupUsrGroupQueryRsp.
     * @exports XmsgImGroupUsrGroupQueryRsp
     * @classdesc Represents a XmsgImGroupUsrGroupQueryRsp.
     * @implements IXmsgImGroupUsrGroupQueryRsp
     * @constructor
     * @param {IXmsgImGroupUsrGroupQueryRsp=} [properties] Properties to set
     */
    function XmsgImGroupUsrGroupQueryRsp(properties) {
        this.group = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupUsrGroupQueryRsp group.
     * @member {Array.<IXmsgImGroupUsrGroupInfo>} group
     * @memberof XmsgImGroupUsrGroupQueryRsp
     * @instance
     */
    XmsgImGroupUsrGroupQueryRsp.prototype.group = $util.emptyArray;

    /**
     * Creates a new XmsgImGroupUsrGroupQueryRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupUsrGroupQueryRsp
     * @static
     * @param {IXmsgImGroupUsrGroupQueryRsp=} [properties] Properties to set
     * @returns {XmsgImGroupUsrGroupQueryRsp} XmsgImGroupUsrGroupQueryRsp instance
     */
    XmsgImGroupUsrGroupQueryRsp.create = function create(properties) {
        return new XmsgImGroupUsrGroupQueryRsp(properties);
    };

    /**
     * Encodes the specified XmsgImGroupUsrGroupQueryRsp message. Does not implicitly {@link XmsgImGroupUsrGroupQueryRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupUsrGroupQueryRsp
     * @static
     * @param {IXmsgImGroupUsrGroupQueryRsp} message XmsgImGroupUsrGroupQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupUsrGroupQueryRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.group != null && message.group.length)
            for (var i = 0; i < message.group.length; ++i)
                $root.XmsgImGroupUsrGroupInfo.encode(message.group[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupUsrGroupQueryRsp message, length delimited. Does not implicitly {@link XmsgImGroupUsrGroupQueryRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupUsrGroupQueryRsp
     * @static
     * @param {IXmsgImGroupUsrGroupQueryRsp} message XmsgImGroupUsrGroupQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupUsrGroupQueryRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupUsrGroupQueryRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupUsrGroupQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupUsrGroupQueryRsp} XmsgImGroupUsrGroupQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupUsrGroupQueryRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupUsrGroupQueryRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.group && message.group.length))
                    message.group = [];
                message.group.push($root.XmsgImGroupUsrGroupInfo.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupUsrGroupQueryRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupUsrGroupQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupUsrGroupQueryRsp} XmsgImGroupUsrGroupQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupUsrGroupQueryRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupUsrGroupQueryRsp message.
     * @function verify
     * @memberof XmsgImGroupUsrGroupQueryRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupUsrGroupQueryRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.group != null && message.hasOwnProperty("group")) {
            if (!Array.isArray(message.group))
                return "group: array expected";
            for (var i = 0; i < message.group.length; ++i) {
                var error = $root.XmsgImGroupUsrGroupInfo.verify(message.group[i]);
                if (error)
                    return "group." + error;
            }
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupUsrGroupQueryRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupUsrGroupQueryRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupUsrGroupQueryRsp} XmsgImGroupUsrGroupQueryRsp
     */
    XmsgImGroupUsrGroupQueryRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupUsrGroupQueryRsp)
            return object;
        var message = new $root.XmsgImGroupUsrGroupQueryRsp();
        if (object.group) {
            if (!Array.isArray(object.group))
                throw TypeError(".XmsgImGroupUsrGroupQueryRsp.group: array expected");
            message.group = [];
            for (var i = 0; i < object.group.length; ++i) {
                if (typeof object.group[i] !== "object")
                    throw TypeError(".XmsgImGroupUsrGroupQueryRsp.group: object expected");
                message.group[i] = $root.XmsgImGroupUsrGroupInfo.fromObject(object.group[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupUsrGroupQueryRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupUsrGroupQueryRsp
     * @static
     * @param {XmsgImGroupUsrGroupQueryRsp} message XmsgImGroupUsrGroupQueryRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupUsrGroupQueryRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.group = [];
        if (message.group && message.group.length) {
            object.group = [];
            for (var j = 0; j < message.group.length; ++j)
                object.group[j] = $root.XmsgImGroupUsrGroupInfo.toObject(message.group[j], options);
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupUsrGroupQueryRsp to JSON.
     * @function toJSON
     * @memberof XmsgImGroupUsrGroupQueryRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupUsrGroupQueryRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupUsrGroupQueryRsp;
})();

$root.XmsgImGroupUsrGroupInfo = (function() {

    /**
     * Properties of a XmsgImGroupUsrGroupInfo.
     * @exports IXmsgImGroupUsrGroupInfo
     * @interface IXmsgImGroupUsrGroupInfo
     * @property {string|null} [cgt] XmsgImGroupUsrGroupInfo cgt
     * @property {string|null} [name] XmsgImGroupUsrGroupInfo name
     * @property {Object.<string,string>|null} [info] XmsgImGroupUsrGroupInfo info
     * @property {number|Long|null} [ver] XmsgImGroupUsrGroupInfo ver
     * @property {number|Long|null} [gts] XmsgImGroupUsrGroupInfo gts
     * @property {number|Long|null} [uts] XmsgImGroupUsrGroupInfo uts
     * @property {boolean|null} [usr2usr] XmsgImGroupUsrGroupInfo usr2usr
     */

    /**
     * Constructs a new XmsgImGroupUsrGroupInfo.
     * @exports XmsgImGroupUsrGroupInfo
     * @classdesc Represents a XmsgImGroupUsrGroupInfo.
     * @implements IXmsgImGroupUsrGroupInfo
     * @constructor
     * @param {IXmsgImGroupUsrGroupInfo=} [properties] Properties to set
     */
    function XmsgImGroupUsrGroupInfo(properties) {
        this.info = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupUsrGroupInfo cgt.
     * @member {string} cgt
     * @memberof XmsgImGroupUsrGroupInfo
     * @instance
     */
    XmsgImGroupUsrGroupInfo.prototype.cgt = "";

    /**
     * XmsgImGroupUsrGroupInfo name.
     * @member {string} name
     * @memberof XmsgImGroupUsrGroupInfo
     * @instance
     */
    XmsgImGroupUsrGroupInfo.prototype.name = "";

    /**
     * XmsgImGroupUsrGroupInfo info.
     * @member {Object.<string,string>} info
     * @memberof XmsgImGroupUsrGroupInfo
     * @instance
     */
    XmsgImGroupUsrGroupInfo.prototype.info = $util.emptyObject;

    /**
     * XmsgImGroupUsrGroupInfo ver.
     * @member {number|Long} ver
     * @memberof XmsgImGroupUsrGroupInfo
     * @instance
     */
    XmsgImGroupUsrGroupInfo.prototype.ver = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupUsrGroupInfo gts.
     * @member {number|Long} gts
     * @memberof XmsgImGroupUsrGroupInfo
     * @instance
     */
    XmsgImGroupUsrGroupInfo.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupUsrGroupInfo uts.
     * @member {number|Long} uts
     * @memberof XmsgImGroupUsrGroupInfo
     * @instance
     */
    XmsgImGroupUsrGroupInfo.prototype.uts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupUsrGroupInfo usr2usr.
     * @member {boolean} usr2usr
     * @memberof XmsgImGroupUsrGroupInfo
     * @instance
     */
    XmsgImGroupUsrGroupInfo.prototype.usr2usr = false;

    /**
     * Creates a new XmsgImGroupUsrGroupInfo instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupUsrGroupInfo
     * @static
     * @param {IXmsgImGroupUsrGroupInfo=} [properties] Properties to set
     * @returns {XmsgImGroupUsrGroupInfo} XmsgImGroupUsrGroupInfo instance
     */
    XmsgImGroupUsrGroupInfo.create = function create(properties) {
        return new XmsgImGroupUsrGroupInfo(properties);
    };

    /**
     * Encodes the specified XmsgImGroupUsrGroupInfo message. Does not implicitly {@link XmsgImGroupUsrGroupInfo.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupUsrGroupInfo
     * @static
     * @param {IXmsgImGroupUsrGroupInfo} message XmsgImGroupUsrGroupInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupUsrGroupInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.info != null && message.hasOwnProperty("info"))
            for (var keys = Object.keys(message.info), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.info[keys[i]]).ldelim();
        if (message.ver != null && message.hasOwnProperty("ver"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.ver);
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.gts);
        if (message.uts != null && message.hasOwnProperty("uts"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.uts);
        if (message.usr2usr != null && message.hasOwnProperty("usr2usr"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.usr2usr);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupUsrGroupInfo message, length delimited. Does not implicitly {@link XmsgImGroupUsrGroupInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupUsrGroupInfo
     * @static
     * @param {IXmsgImGroupUsrGroupInfo} message XmsgImGroupUsrGroupInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupUsrGroupInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupUsrGroupInfo message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupUsrGroupInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupUsrGroupInfo} XmsgImGroupUsrGroupInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupUsrGroupInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupUsrGroupInfo(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.name = reader.string();
                break;
            case 3:
                reader.skip().pos++;
                if (message.info === $util.emptyObject)
                    message.info = {};
                key = reader.string();
                reader.pos++;
                message.info[key] = reader.string();
                break;
            case 4:
                message.ver = reader.uint64();
                break;
            case 5:
                message.gts = reader.uint64();
                break;
            case 6:
                message.uts = reader.uint64();
                break;
            case 7:
                message.usr2usr = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupUsrGroupInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupUsrGroupInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupUsrGroupInfo} XmsgImGroupUsrGroupInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupUsrGroupInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupUsrGroupInfo message.
     * @function verify
     * @memberof XmsgImGroupUsrGroupInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupUsrGroupInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            if (!$util.isObject(message.info))
                return "info: object expected";
            var key = Object.keys(message.info);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.info[key[i]]))
                    return "info: string{k:string} expected";
        }
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (!$util.isInteger(message.ver) && !(message.ver && $util.isInteger(message.ver.low) && $util.isInteger(message.ver.high)))
                return "ver: integer|Long expected";
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (!$util.isInteger(message.uts) && !(message.uts && $util.isInteger(message.uts.low) && $util.isInteger(message.uts.high)))
                return "uts: integer|Long expected";
        if (message.usr2usr != null && message.hasOwnProperty("usr2usr"))
            if (typeof message.usr2usr !== "boolean")
                return "usr2usr: boolean expected";
        return null;
    };

    /**
     * Creates a XmsgImGroupUsrGroupInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupUsrGroupInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupUsrGroupInfo} XmsgImGroupUsrGroupInfo
     */
    XmsgImGroupUsrGroupInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupUsrGroupInfo)
            return object;
        var message = new $root.XmsgImGroupUsrGroupInfo();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.name != null)
            message.name = String(object.name);
        if (object.info) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImGroupUsrGroupInfo.info: object expected");
            message.info = {};
            for (var keys = Object.keys(object.info), i = 0; i < keys.length; ++i)
                message.info[keys[i]] = String(object.info[keys[i]]);
        }
        if (object.ver != null)
            if ($util.Long)
                (message.ver = $util.Long.fromValue(object.ver)).unsigned = true;
            else if (typeof object.ver === "string")
                message.ver = parseInt(object.ver, 10);
            else if (typeof object.ver === "number")
                message.ver = object.ver;
            else if (typeof object.ver === "object")
                message.ver = new $util.LongBits(object.ver.low >>> 0, object.ver.high >>> 0).toNumber(true);
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        if (object.uts != null)
            if ($util.Long)
                (message.uts = $util.Long.fromValue(object.uts)).unsigned = true;
            else if (typeof object.uts === "string")
                message.uts = parseInt(object.uts, 10);
            else if (typeof object.uts === "number")
                message.uts = object.uts;
            else if (typeof object.uts === "object")
                message.uts = new $util.LongBits(object.uts.low >>> 0, object.uts.high >>> 0).toNumber(true);
        if (object.usr2usr != null)
            message.usr2usr = Boolean(object.usr2usr);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupUsrGroupInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupUsrGroupInfo
     * @static
     * @param {XmsgImGroupUsrGroupInfo} message XmsgImGroupUsrGroupInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupUsrGroupInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.info = {};
        if (options.defaults) {
            object.cgt = "";
            object.name = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uts = options.longs === String ? "0" : 0;
            object.usr2usr = false;
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        var keys2;
        if (message.info && (keys2 = Object.keys(message.info)).length) {
            object.info = {};
            for (var j = 0; j < keys2.length; ++j)
                object.info[keys2[j]] = message.info[keys2[j]];
        }
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (typeof message.ver === "number")
                object.ver = options.longs === String ? String(message.ver) : message.ver;
            else
                object.ver = options.longs === String ? $util.Long.prototype.toString.call(message.ver) : options.longs === Number ? new $util.LongBits(message.ver.low >>> 0, message.ver.high >>> 0).toNumber(true) : message.ver;
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (typeof message.uts === "number")
                object.uts = options.longs === String ? String(message.uts) : message.uts;
            else
                object.uts = options.longs === String ? $util.Long.prototype.toString.call(message.uts) : options.longs === Number ? new $util.LongBits(message.uts.low >>> 0, message.uts.high >>> 0).toNumber(true) : message.uts;
        if (message.usr2usr != null && message.hasOwnProperty("usr2usr"))
            object.usr2usr = message.usr2usr;
        return object;
    };

    /**
     * Converts this XmsgImGroupUsrGroupInfo to JSON.
     * @function toJSON
     * @memberof XmsgImGroupUsrGroupInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupUsrGroupInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupUsrGroupInfo;
})();

$root.XmsgImGroupCreateReq = (function() {

    /**
     * Properties of a XmsgImGroupCreateReq.
     * @exports IXmsgImGroupCreateReq
     * @interface IXmsgImGroupCreateReq
     * @property {Object.<string,string>|null} [info] XmsgImGroupCreateReq info
     * @property {Array.<IXmsgImGroupAddMember>|null} [member] XmsgImGroupCreateReq member
     */

    /**
     * Constructs a new XmsgImGroupCreateReq.
     * @exports XmsgImGroupCreateReq
     * @classdesc Represents a XmsgImGroupCreateReq.
     * @implements IXmsgImGroupCreateReq
     * @constructor
     * @param {IXmsgImGroupCreateReq=} [properties] Properties to set
     */
    function XmsgImGroupCreateReq(properties) {
        this.info = {};
        this.member = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupCreateReq info.
     * @member {Object.<string,string>} info
     * @memberof XmsgImGroupCreateReq
     * @instance
     */
    XmsgImGroupCreateReq.prototype.info = $util.emptyObject;

    /**
     * XmsgImGroupCreateReq member.
     * @member {Array.<IXmsgImGroupAddMember>} member
     * @memberof XmsgImGroupCreateReq
     * @instance
     */
    XmsgImGroupCreateReq.prototype.member = $util.emptyArray;

    /**
     * Creates a new XmsgImGroupCreateReq instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupCreateReq
     * @static
     * @param {IXmsgImGroupCreateReq=} [properties] Properties to set
     * @returns {XmsgImGroupCreateReq} XmsgImGroupCreateReq instance
     */
    XmsgImGroupCreateReq.create = function create(properties) {
        return new XmsgImGroupCreateReq(properties);
    };

    /**
     * Encodes the specified XmsgImGroupCreateReq message. Does not implicitly {@link XmsgImGroupCreateReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupCreateReq
     * @static
     * @param {IXmsgImGroupCreateReq} message XmsgImGroupCreateReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupCreateReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.info != null && message.hasOwnProperty("info"))
            for (var keys = Object.keys(message.info), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.info[keys[i]]).ldelim();
        if (message.member != null && message.member.length)
            for (var i = 0; i < message.member.length; ++i)
                $root.XmsgImGroupAddMember.encode(message.member[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupCreateReq message, length delimited. Does not implicitly {@link XmsgImGroupCreateReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupCreateReq
     * @static
     * @param {IXmsgImGroupCreateReq} message XmsgImGroupCreateReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupCreateReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupCreateReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupCreateReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupCreateReq} XmsgImGroupCreateReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupCreateReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupCreateReq(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                reader.skip().pos++;
                if (message.info === $util.emptyObject)
                    message.info = {};
                key = reader.string();
                reader.pos++;
                message.info[key] = reader.string();
                break;
            case 2:
                if (!(message.member && message.member.length))
                    message.member = [];
                message.member.push($root.XmsgImGroupAddMember.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupCreateReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupCreateReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupCreateReq} XmsgImGroupCreateReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupCreateReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupCreateReq message.
     * @function verify
     * @memberof XmsgImGroupCreateReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupCreateReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            if (!$util.isObject(message.info))
                return "info: object expected";
            var key = Object.keys(message.info);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.info[key[i]]))
                    return "info: string{k:string} expected";
        }
        if (message.member != null && message.hasOwnProperty("member")) {
            if (!Array.isArray(message.member))
                return "member: array expected";
            for (var i = 0; i < message.member.length; ++i) {
                var error = $root.XmsgImGroupAddMember.verify(message.member[i]);
                if (error)
                    return "member." + error;
            }
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupCreateReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupCreateReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupCreateReq} XmsgImGroupCreateReq
     */
    XmsgImGroupCreateReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupCreateReq)
            return object;
        var message = new $root.XmsgImGroupCreateReq();
        if (object.info) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImGroupCreateReq.info: object expected");
            message.info = {};
            for (var keys = Object.keys(object.info), i = 0; i < keys.length; ++i)
                message.info[keys[i]] = String(object.info[keys[i]]);
        }
        if (object.member) {
            if (!Array.isArray(object.member))
                throw TypeError(".XmsgImGroupCreateReq.member: array expected");
            message.member = [];
            for (var i = 0; i < object.member.length; ++i) {
                if (typeof object.member[i] !== "object")
                    throw TypeError(".XmsgImGroupCreateReq.member: object expected");
                message.member[i] = $root.XmsgImGroupAddMember.fromObject(object.member[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupCreateReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupCreateReq
     * @static
     * @param {XmsgImGroupCreateReq} message XmsgImGroupCreateReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupCreateReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.member = [];
        if (options.objects || options.defaults)
            object.info = {};
        var keys2;
        if (message.info && (keys2 = Object.keys(message.info)).length) {
            object.info = {};
            for (var j = 0; j < keys2.length; ++j)
                object.info[keys2[j]] = message.info[keys2[j]];
        }
        if (message.member && message.member.length) {
            object.member = [];
            for (var j = 0; j < message.member.length; ++j)
                object.member[j] = $root.XmsgImGroupAddMember.toObject(message.member[j], options);
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupCreateReq to JSON.
     * @function toJSON
     * @memberof XmsgImGroupCreateReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupCreateReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupCreateReq;
})();

$root.XmsgImGroupCreateRsp = (function() {

    /**
     * Properties of a XmsgImGroupCreateRsp.
     * @exports IXmsgImGroupCreateRsp
     * @interface IXmsgImGroupCreateRsp
     * @property {string|null} [cgt] XmsgImGroupCreateRsp cgt
     * @property {number|Long|null} [gts] XmsgImGroupCreateRsp gts
     */

    /**
     * Constructs a new XmsgImGroupCreateRsp.
     * @exports XmsgImGroupCreateRsp
     * @classdesc Represents a XmsgImGroupCreateRsp.
     * @implements IXmsgImGroupCreateRsp
     * @constructor
     * @param {IXmsgImGroupCreateRsp=} [properties] Properties to set
     */
    function XmsgImGroupCreateRsp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupCreateRsp cgt.
     * @member {string} cgt
     * @memberof XmsgImGroupCreateRsp
     * @instance
     */
    XmsgImGroupCreateRsp.prototype.cgt = "";

    /**
     * XmsgImGroupCreateRsp gts.
     * @member {number|Long} gts
     * @memberof XmsgImGroupCreateRsp
     * @instance
     */
    XmsgImGroupCreateRsp.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgImGroupCreateRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupCreateRsp
     * @static
     * @param {IXmsgImGroupCreateRsp=} [properties] Properties to set
     * @returns {XmsgImGroupCreateRsp} XmsgImGroupCreateRsp instance
     */
    XmsgImGroupCreateRsp.create = function create(properties) {
        return new XmsgImGroupCreateRsp(properties);
    };

    /**
     * Encodes the specified XmsgImGroupCreateRsp message. Does not implicitly {@link XmsgImGroupCreateRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupCreateRsp
     * @static
     * @param {IXmsgImGroupCreateRsp} message XmsgImGroupCreateRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupCreateRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.gts);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupCreateRsp message, length delimited. Does not implicitly {@link XmsgImGroupCreateRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupCreateRsp
     * @static
     * @param {IXmsgImGroupCreateRsp} message XmsgImGroupCreateRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupCreateRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupCreateRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupCreateRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupCreateRsp} XmsgImGroupCreateRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupCreateRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupCreateRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.gts = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupCreateRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupCreateRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupCreateRsp} XmsgImGroupCreateRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupCreateRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupCreateRsp message.
     * @function verify
     * @memberof XmsgImGroupCreateRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupCreateRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgImGroupCreateRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupCreateRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupCreateRsp} XmsgImGroupCreateRsp
     */
    XmsgImGroupCreateRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupCreateRsp)
            return object;
        var message = new $root.XmsgImGroupCreateRsp();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupCreateRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupCreateRsp
     * @static
     * @param {XmsgImGroupCreateRsp} message XmsgImGroupCreateRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupCreateRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cgt = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        return object;
    };

    /**
     * Converts this XmsgImGroupCreateRsp to JSON.
     * @function toJSON
     * @memberof XmsgImGroupCreateRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupCreateRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupCreateRsp;
})();

$root.XmsgImGroupAddMember = (function() {

    /**
     * Properties of a XmsgImGroupAddMember.
     * @exports IXmsgImGroupAddMember
     * @interface IXmsgImGroupAddMember
     * @property {string|null} [cgt] XmsgImGroupAddMember cgt
     * @property {Object.<string,string>|null} [info] XmsgImGroupAddMember info
     */

    /**
     * Constructs a new XmsgImGroupAddMember.
     * @exports XmsgImGroupAddMember
     * @classdesc Represents a XmsgImGroupAddMember.
     * @implements IXmsgImGroupAddMember
     * @constructor
     * @param {IXmsgImGroupAddMember=} [properties] Properties to set
     */
    function XmsgImGroupAddMember(properties) {
        this.info = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupAddMember cgt.
     * @member {string} cgt
     * @memberof XmsgImGroupAddMember
     * @instance
     */
    XmsgImGroupAddMember.prototype.cgt = "";

    /**
     * XmsgImGroupAddMember info.
     * @member {Object.<string,string>} info
     * @memberof XmsgImGroupAddMember
     * @instance
     */
    XmsgImGroupAddMember.prototype.info = $util.emptyObject;

    /**
     * Creates a new XmsgImGroupAddMember instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupAddMember
     * @static
     * @param {IXmsgImGroupAddMember=} [properties] Properties to set
     * @returns {XmsgImGroupAddMember} XmsgImGroupAddMember instance
     */
    XmsgImGroupAddMember.create = function create(properties) {
        return new XmsgImGroupAddMember(properties);
    };

    /**
     * Encodes the specified XmsgImGroupAddMember message. Does not implicitly {@link XmsgImGroupAddMember.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupAddMember
     * @static
     * @param {IXmsgImGroupAddMember} message XmsgImGroupAddMember message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupAddMember.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.info != null && message.hasOwnProperty("info"))
            for (var keys = Object.keys(message.info), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.info[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupAddMember message, length delimited. Does not implicitly {@link XmsgImGroupAddMember.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupAddMember
     * @static
     * @param {IXmsgImGroupAddMember} message XmsgImGroupAddMember message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupAddMember.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupAddMember message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupAddMember
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupAddMember} XmsgImGroupAddMember
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupAddMember.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupAddMember(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                reader.skip().pos++;
                if (message.info === $util.emptyObject)
                    message.info = {};
                key = reader.string();
                reader.pos++;
                message.info[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupAddMember message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupAddMember
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupAddMember} XmsgImGroupAddMember
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupAddMember.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupAddMember message.
     * @function verify
     * @memberof XmsgImGroupAddMember
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupAddMember.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            if (!$util.isObject(message.info))
                return "info: object expected";
            var key = Object.keys(message.info);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.info[key[i]]))
                    return "info: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupAddMember message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupAddMember
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupAddMember} XmsgImGroupAddMember
     */
    XmsgImGroupAddMember.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupAddMember)
            return object;
        var message = new $root.XmsgImGroupAddMember();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.info) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImGroupAddMember.info: object expected");
            message.info = {};
            for (var keys = Object.keys(object.info), i = 0; i < keys.length; ++i)
                message.info[keys[i]] = String(object.info[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupAddMember message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupAddMember
     * @static
     * @param {XmsgImGroupAddMember} message XmsgImGroupAddMember
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupAddMember.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.info = {};
        if (options.defaults)
            object.cgt = "";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        var keys2;
        if (message.info && (keys2 = Object.keys(message.info)).length) {
            object.info = {};
            for (var j = 0; j < keys2.length; ++j)
                object.info[keys2[j]] = message.info[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupAddMember to JSON.
     * @function toJSON
     * @memberof XmsgImGroupAddMember
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupAddMember.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupAddMember;
})();

$root.XmsgImGroupSyncReq = (function() {

    /**
     * Properties of a XmsgImGroupSyncReq.
     * @exports IXmsgImGroupSyncReq
     * @interface IXmsgImGroupSyncReq
     * @property {number|Long|null} [ver4usr] XmsgImGroupSyncReq ver4usr
     * @property {Object.<string,string>|null} [ext] XmsgImGroupSyncReq ext
     */

    /**
     * Constructs a new XmsgImGroupSyncReq.
     * @exports XmsgImGroupSyncReq
     * @classdesc Represents a XmsgImGroupSyncReq.
     * @implements IXmsgImGroupSyncReq
     * @constructor
     * @param {IXmsgImGroupSyncReq=} [properties] Properties to set
     */
    function XmsgImGroupSyncReq(properties) {
        this.ext = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupSyncReq ver4usr.
     * @member {number|Long} ver4usr
     * @memberof XmsgImGroupSyncReq
     * @instance
     */
    XmsgImGroupSyncReq.prototype.ver4usr = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupSyncReq ext.
     * @member {Object.<string,string>} ext
     * @memberof XmsgImGroupSyncReq
     * @instance
     */
    XmsgImGroupSyncReq.prototype.ext = $util.emptyObject;

    /**
     * Creates a new XmsgImGroupSyncReq instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupSyncReq
     * @static
     * @param {IXmsgImGroupSyncReq=} [properties] Properties to set
     * @returns {XmsgImGroupSyncReq} XmsgImGroupSyncReq instance
     */
    XmsgImGroupSyncReq.create = function create(properties) {
        return new XmsgImGroupSyncReq(properties);
    };

    /**
     * Encodes the specified XmsgImGroupSyncReq message. Does not implicitly {@link XmsgImGroupSyncReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupSyncReq
     * @static
     * @param {IXmsgImGroupSyncReq} message XmsgImGroupSyncReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSyncReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ver4usr != null && message.hasOwnProperty("ver4usr"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.ver4usr);
        if (message.ext != null && message.hasOwnProperty("ext"))
            for (var keys = Object.keys(message.ext), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.ext[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupSyncReq message, length delimited. Does not implicitly {@link XmsgImGroupSyncReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupSyncReq
     * @static
     * @param {IXmsgImGroupSyncReq} message XmsgImGroupSyncReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSyncReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupSyncReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupSyncReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupSyncReq} XmsgImGroupSyncReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSyncReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupSyncReq(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.ver4usr = reader.uint64();
                break;
            case 2:
                reader.skip().pos++;
                if (message.ext === $util.emptyObject)
                    message.ext = {};
                key = reader.string();
                reader.pos++;
                message.ext[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupSyncReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupSyncReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupSyncReq} XmsgImGroupSyncReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSyncReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupSyncReq message.
     * @function verify
     * @memberof XmsgImGroupSyncReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupSyncReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ver4usr != null && message.hasOwnProperty("ver4usr"))
            if (!$util.isInteger(message.ver4usr) && !(message.ver4usr && $util.isInteger(message.ver4usr.low) && $util.isInteger(message.ver4usr.high)))
                return "ver4usr: integer|Long expected";
        if (message.ext != null && message.hasOwnProperty("ext")) {
            if (!$util.isObject(message.ext))
                return "ext: object expected";
            var key = Object.keys(message.ext);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.ext[key[i]]))
                    return "ext: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupSyncReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupSyncReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupSyncReq} XmsgImGroupSyncReq
     */
    XmsgImGroupSyncReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupSyncReq)
            return object;
        var message = new $root.XmsgImGroupSyncReq();
        if (object.ver4usr != null)
            if ($util.Long)
                (message.ver4usr = $util.Long.fromValue(object.ver4usr)).unsigned = true;
            else if (typeof object.ver4usr === "string")
                message.ver4usr = parseInt(object.ver4usr, 10);
            else if (typeof object.ver4usr === "number")
                message.ver4usr = object.ver4usr;
            else if (typeof object.ver4usr === "object")
                message.ver4usr = new $util.LongBits(object.ver4usr.low >>> 0, object.ver4usr.high >>> 0).toNumber(true);
        if (object.ext) {
            if (typeof object.ext !== "object")
                throw TypeError(".XmsgImGroupSyncReq.ext: object expected");
            message.ext = {};
            for (var keys = Object.keys(object.ext), i = 0; i < keys.length; ++i)
                message.ext[keys[i]] = String(object.ext[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupSyncReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupSyncReq
     * @static
     * @param {XmsgImGroupSyncReq} message XmsgImGroupSyncReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupSyncReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.ext = {};
        if (options.defaults)
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver4usr = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver4usr = options.longs === String ? "0" : 0;
        if (message.ver4usr != null && message.hasOwnProperty("ver4usr"))
            if (typeof message.ver4usr === "number")
                object.ver4usr = options.longs === String ? String(message.ver4usr) : message.ver4usr;
            else
                object.ver4usr = options.longs === String ? $util.Long.prototype.toString.call(message.ver4usr) : options.longs === Number ? new $util.LongBits(message.ver4usr.low >>> 0, message.ver4usr.high >>> 0).toNumber(true) : message.ver4usr;
        var keys2;
        if (message.ext && (keys2 = Object.keys(message.ext)).length) {
            object.ext = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ext[keys2[j]] = message.ext[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupSyncReq to JSON.
     * @function toJSON
     * @memberof XmsgImGroupSyncReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupSyncReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupSyncReq;
})();

$root.XmsgImGroupSyncRsp = (function() {

    /**
     * Properties of a XmsgImGroupSyncRsp.
     * @exports IXmsgImGroupSyncRsp
     * @interface IXmsgImGroupSyncRsp
     * @property {Array.<IXmsgImGroupSyncEvent>|null} [event] XmsgImGroupSyncRsp event
     */

    /**
     * Constructs a new XmsgImGroupSyncRsp.
     * @exports XmsgImGroupSyncRsp
     * @classdesc Represents a XmsgImGroupSyncRsp.
     * @implements IXmsgImGroupSyncRsp
     * @constructor
     * @param {IXmsgImGroupSyncRsp=} [properties] Properties to set
     */
    function XmsgImGroupSyncRsp(properties) {
        this.event = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupSyncRsp event.
     * @member {Array.<IXmsgImGroupSyncEvent>} event
     * @memberof XmsgImGroupSyncRsp
     * @instance
     */
    XmsgImGroupSyncRsp.prototype.event = $util.emptyArray;

    /**
     * Creates a new XmsgImGroupSyncRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupSyncRsp
     * @static
     * @param {IXmsgImGroupSyncRsp=} [properties] Properties to set
     * @returns {XmsgImGroupSyncRsp} XmsgImGroupSyncRsp instance
     */
    XmsgImGroupSyncRsp.create = function create(properties) {
        return new XmsgImGroupSyncRsp(properties);
    };

    /**
     * Encodes the specified XmsgImGroupSyncRsp message. Does not implicitly {@link XmsgImGroupSyncRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupSyncRsp
     * @static
     * @param {IXmsgImGroupSyncRsp} message XmsgImGroupSyncRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSyncRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.event != null && message.event.length)
            for (var i = 0; i < message.event.length; ++i)
                $root.XmsgImGroupSyncEvent.encode(message.event[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupSyncRsp message, length delimited. Does not implicitly {@link XmsgImGroupSyncRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupSyncRsp
     * @static
     * @param {IXmsgImGroupSyncRsp} message XmsgImGroupSyncRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSyncRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupSyncRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupSyncRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupSyncRsp} XmsgImGroupSyncRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSyncRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupSyncRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.event && message.event.length))
                    message.event = [];
                message.event.push($root.XmsgImGroupSyncEvent.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupSyncRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupSyncRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupSyncRsp} XmsgImGroupSyncRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSyncRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupSyncRsp message.
     * @function verify
     * @memberof XmsgImGroupSyncRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupSyncRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.event != null && message.hasOwnProperty("event")) {
            if (!Array.isArray(message.event))
                return "event: array expected";
            for (var i = 0; i < message.event.length; ++i) {
                var error = $root.XmsgImGroupSyncEvent.verify(message.event[i]);
                if (error)
                    return "event." + error;
            }
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupSyncRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupSyncRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupSyncRsp} XmsgImGroupSyncRsp
     */
    XmsgImGroupSyncRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupSyncRsp)
            return object;
        var message = new $root.XmsgImGroupSyncRsp();
        if (object.event) {
            if (!Array.isArray(object.event))
                throw TypeError(".XmsgImGroupSyncRsp.event: array expected");
            message.event = [];
            for (var i = 0; i < object.event.length; ++i) {
                if (typeof object.event[i] !== "object")
                    throw TypeError(".XmsgImGroupSyncRsp.event: object expected");
                message.event[i] = $root.XmsgImGroupSyncEvent.fromObject(object.event[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupSyncRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupSyncRsp
     * @static
     * @param {XmsgImGroupSyncRsp} message XmsgImGroupSyncRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupSyncRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.event = [];
        if (message.event && message.event.length) {
            object.event = [];
            for (var j = 0; j < message.event.length; ++j)
                object.event[j] = $root.XmsgImGroupSyncEvent.toObject(message.event[j], options);
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupSyncRsp to JSON.
     * @function toJSON
     * @memberof XmsgImGroupSyncRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupSyncRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupSyncRsp;
})();

$root.XmsgImGroupSyncEvent = (function() {

    /**
     * Properties of a XmsgImGroupSyncEvent.
     * @exports IXmsgImGroupSyncEvent
     * @interface IXmsgImGroupSyncEvent
     * @property {string|null} [cgt] XmsgImGroupSyncEvent cgt
     * @property {string|null} [oper] XmsgImGroupSyncEvent oper
     * @property {Object.<string,string>|null} [info] XmsgImGroupSyncEvent info
     * @property {number|Long|null} [ver4usr] XmsgImGroupSyncEvent ver4usr
     * @property {number|Long|null} [gts4usr] XmsgImGroupSyncEvent gts4usr
     * @property {number|Long|null} [uts4usr] XmsgImGroupSyncEvent uts4usr
     * @property {number|Long|null} [gts4group] XmsgImGroupSyncEvent gts4group
     */

    /**
     * Constructs a new XmsgImGroupSyncEvent.
     * @exports XmsgImGroupSyncEvent
     * @classdesc Represents a XmsgImGroupSyncEvent.
     * @implements IXmsgImGroupSyncEvent
     * @constructor
     * @param {IXmsgImGroupSyncEvent=} [properties] Properties to set
     */
    function XmsgImGroupSyncEvent(properties) {
        this.info = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupSyncEvent cgt.
     * @member {string} cgt
     * @memberof XmsgImGroupSyncEvent
     * @instance
     */
    XmsgImGroupSyncEvent.prototype.cgt = "";

    /**
     * XmsgImGroupSyncEvent oper.
     * @member {string} oper
     * @memberof XmsgImGroupSyncEvent
     * @instance
     */
    XmsgImGroupSyncEvent.prototype.oper = "";

    /**
     * XmsgImGroupSyncEvent info.
     * @member {Object.<string,string>} info
     * @memberof XmsgImGroupSyncEvent
     * @instance
     */
    XmsgImGroupSyncEvent.prototype.info = $util.emptyObject;

    /**
     * XmsgImGroupSyncEvent ver4usr.
     * @member {number|Long} ver4usr
     * @memberof XmsgImGroupSyncEvent
     * @instance
     */
    XmsgImGroupSyncEvent.prototype.ver4usr = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupSyncEvent gts4usr.
     * @member {number|Long} gts4usr
     * @memberof XmsgImGroupSyncEvent
     * @instance
     */
    XmsgImGroupSyncEvent.prototype.gts4usr = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupSyncEvent uts4usr.
     * @member {number|Long} uts4usr
     * @memberof XmsgImGroupSyncEvent
     * @instance
     */
    XmsgImGroupSyncEvent.prototype.uts4usr = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupSyncEvent gts4group.
     * @member {number|Long} gts4group
     * @memberof XmsgImGroupSyncEvent
     * @instance
     */
    XmsgImGroupSyncEvent.prototype.gts4group = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgImGroupSyncEvent instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupSyncEvent
     * @static
     * @param {IXmsgImGroupSyncEvent=} [properties] Properties to set
     * @returns {XmsgImGroupSyncEvent} XmsgImGroupSyncEvent instance
     */
    XmsgImGroupSyncEvent.create = function create(properties) {
        return new XmsgImGroupSyncEvent(properties);
    };

    /**
     * Encodes the specified XmsgImGroupSyncEvent message. Does not implicitly {@link XmsgImGroupSyncEvent.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupSyncEvent
     * @static
     * @param {IXmsgImGroupSyncEvent} message XmsgImGroupSyncEvent message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSyncEvent.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.oper != null && message.hasOwnProperty("oper"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.oper);
        if (message.info != null && message.hasOwnProperty("info"))
            for (var keys = Object.keys(message.info), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.info[keys[i]]).ldelim();
        if (message.ver4usr != null && message.hasOwnProperty("ver4usr"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.ver4usr);
        if (message.gts4usr != null && message.hasOwnProperty("gts4usr"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.gts4usr);
        if (message.uts4usr != null && message.hasOwnProperty("uts4usr"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.uts4usr);
        if (message.gts4group != null && message.hasOwnProperty("gts4group"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.gts4group);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupSyncEvent message, length delimited. Does not implicitly {@link XmsgImGroupSyncEvent.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupSyncEvent
     * @static
     * @param {IXmsgImGroupSyncEvent} message XmsgImGroupSyncEvent message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSyncEvent.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupSyncEvent message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupSyncEvent
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupSyncEvent} XmsgImGroupSyncEvent
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSyncEvent.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupSyncEvent(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.oper = reader.string();
                break;
            case 3:
                reader.skip().pos++;
                if (message.info === $util.emptyObject)
                    message.info = {};
                key = reader.string();
                reader.pos++;
                message.info[key] = reader.string();
                break;
            case 4:
                message.ver4usr = reader.uint64();
                break;
            case 5:
                message.gts4usr = reader.uint64();
                break;
            case 6:
                message.uts4usr = reader.uint64();
                break;
            case 7:
                message.gts4group = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupSyncEvent message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupSyncEvent
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupSyncEvent} XmsgImGroupSyncEvent
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSyncEvent.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupSyncEvent message.
     * @function verify
     * @memberof XmsgImGroupSyncEvent
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupSyncEvent.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.oper != null && message.hasOwnProperty("oper"))
            if (!$util.isString(message.oper))
                return "oper: string expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            if (!$util.isObject(message.info))
                return "info: object expected";
            var key = Object.keys(message.info);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.info[key[i]]))
                    return "info: string{k:string} expected";
        }
        if (message.ver4usr != null && message.hasOwnProperty("ver4usr"))
            if (!$util.isInteger(message.ver4usr) && !(message.ver4usr && $util.isInteger(message.ver4usr.low) && $util.isInteger(message.ver4usr.high)))
                return "ver4usr: integer|Long expected";
        if (message.gts4usr != null && message.hasOwnProperty("gts4usr"))
            if (!$util.isInteger(message.gts4usr) && !(message.gts4usr && $util.isInteger(message.gts4usr.low) && $util.isInteger(message.gts4usr.high)))
                return "gts4usr: integer|Long expected";
        if (message.uts4usr != null && message.hasOwnProperty("uts4usr"))
            if (!$util.isInteger(message.uts4usr) && !(message.uts4usr && $util.isInteger(message.uts4usr.low) && $util.isInteger(message.uts4usr.high)))
                return "uts4usr: integer|Long expected";
        if (message.gts4group != null && message.hasOwnProperty("gts4group"))
            if (!$util.isInteger(message.gts4group) && !(message.gts4group && $util.isInteger(message.gts4group.low) && $util.isInteger(message.gts4group.high)))
                return "gts4group: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgImGroupSyncEvent message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupSyncEvent
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupSyncEvent} XmsgImGroupSyncEvent
     */
    XmsgImGroupSyncEvent.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupSyncEvent)
            return object;
        var message = new $root.XmsgImGroupSyncEvent();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.oper != null)
            message.oper = String(object.oper);
        if (object.info) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImGroupSyncEvent.info: object expected");
            message.info = {};
            for (var keys = Object.keys(object.info), i = 0; i < keys.length; ++i)
                message.info[keys[i]] = String(object.info[keys[i]]);
        }
        if (object.ver4usr != null)
            if ($util.Long)
                (message.ver4usr = $util.Long.fromValue(object.ver4usr)).unsigned = true;
            else if (typeof object.ver4usr === "string")
                message.ver4usr = parseInt(object.ver4usr, 10);
            else if (typeof object.ver4usr === "number")
                message.ver4usr = object.ver4usr;
            else if (typeof object.ver4usr === "object")
                message.ver4usr = new $util.LongBits(object.ver4usr.low >>> 0, object.ver4usr.high >>> 0).toNumber(true);
        if (object.gts4usr != null)
            if ($util.Long)
                (message.gts4usr = $util.Long.fromValue(object.gts4usr)).unsigned = true;
            else if (typeof object.gts4usr === "string")
                message.gts4usr = parseInt(object.gts4usr, 10);
            else if (typeof object.gts4usr === "number")
                message.gts4usr = object.gts4usr;
            else if (typeof object.gts4usr === "object")
                message.gts4usr = new $util.LongBits(object.gts4usr.low >>> 0, object.gts4usr.high >>> 0).toNumber(true);
        if (object.uts4usr != null)
            if ($util.Long)
                (message.uts4usr = $util.Long.fromValue(object.uts4usr)).unsigned = true;
            else if (typeof object.uts4usr === "string")
                message.uts4usr = parseInt(object.uts4usr, 10);
            else if (typeof object.uts4usr === "number")
                message.uts4usr = object.uts4usr;
            else if (typeof object.uts4usr === "object")
                message.uts4usr = new $util.LongBits(object.uts4usr.low >>> 0, object.uts4usr.high >>> 0).toNumber(true);
        if (object.gts4group != null)
            if ($util.Long)
                (message.gts4group = $util.Long.fromValue(object.gts4group)).unsigned = true;
            else if (typeof object.gts4group === "string")
                message.gts4group = parseInt(object.gts4group, 10);
            else if (typeof object.gts4group === "number")
                message.gts4group = object.gts4group;
            else if (typeof object.gts4group === "object")
                message.gts4group = new $util.LongBits(object.gts4group.low >>> 0, object.gts4group.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupSyncEvent message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupSyncEvent
     * @static
     * @param {XmsgImGroupSyncEvent} message XmsgImGroupSyncEvent
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupSyncEvent.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.info = {};
        if (options.defaults) {
            object.cgt = "";
            object.oper = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver4usr = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver4usr = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts4usr = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts4usr = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uts4usr = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uts4usr = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts4group = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts4group = options.longs === String ? "0" : 0;
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.oper != null && message.hasOwnProperty("oper"))
            object.oper = message.oper;
        var keys2;
        if (message.info && (keys2 = Object.keys(message.info)).length) {
            object.info = {};
            for (var j = 0; j < keys2.length; ++j)
                object.info[keys2[j]] = message.info[keys2[j]];
        }
        if (message.ver4usr != null && message.hasOwnProperty("ver4usr"))
            if (typeof message.ver4usr === "number")
                object.ver4usr = options.longs === String ? String(message.ver4usr) : message.ver4usr;
            else
                object.ver4usr = options.longs === String ? $util.Long.prototype.toString.call(message.ver4usr) : options.longs === Number ? new $util.LongBits(message.ver4usr.low >>> 0, message.ver4usr.high >>> 0).toNumber(true) : message.ver4usr;
        if (message.gts4usr != null && message.hasOwnProperty("gts4usr"))
            if (typeof message.gts4usr === "number")
                object.gts4usr = options.longs === String ? String(message.gts4usr) : message.gts4usr;
            else
                object.gts4usr = options.longs === String ? $util.Long.prototype.toString.call(message.gts4usr) : options.longs === Number ? new $util.LongBits(message.gts4usr.low >>> 0, message.gts4usr.high >>> 0).toNumber(true) : message.gts4usr;
        if (message.uts4usr != null && message.hasOwnProperty("uts4usr"))
            if (typeof message.uts4usr === "number")
                object.uts4usr = options.longs === String ? String(message.uts4usr) : message.uts4usr;
            else
                object.uts4usr = options.longs === String ? $util.Long.prototype.toString.call(message.uts4usr) : options.longs === Number ? new $util.LongBits(message.uts4usr.low >>> 0, message.uts4usr.high >>> 0).toNumber(true) : message.uts4usr;
        if (message.gts4group != null && message.hasOwnProperty("gts4group"))
            if (typeof message.gts4group === "number")
                object.gts4group = options.longs === String ? String(message.gts4group) : message.gts4group;
            else
                object.gts4group = options.longs === String ? $util.Long.prototype.toString.call(message.gts4group) : options.longs === Number ? new $util.LongBits(message.gts4group.low >>> 0, message.gts4group.high >>> 0).toNumber(true) : message.gts4group;
        return object;
    };

    /**
     * Converts this XmsgImGroupSyncEvent to JSON.
     * @function toJSON
     * @memberof XmsgImGroupSyncEvent
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupSyncEvent.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupSyncEvent;
})();

$root.XmsgImGroupSyncNotice = (function() {

    /**
     * Properties of a XmsgImGroupSyncNotice.
     * @exports IXmsgImGroupSyncNotice
     * @interface IXmsgImGroupSyncNotice
     * @property {IXmsgImGroupSyncEvent|null} [event] XmsgImGroupSyncNotice event
     */

    /**
     * Constructs a new XmsgImGroupSyncNotice.
     * @exports XmsgImGroupSyncNotice
     * @classdesc Represents a XmsgImGroupSyncNotice.
     * @implements IXmsgImGroupSyncNotice
     * @constructor
     * @param {IXmsgImGroupSyncNotice=} [properties] Properties to set
     */
    function XmsgImGroupSyncNotice(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupSyncNotice event.
     * @member {IXmsgImGroupSyncEvent|null|undefined} event
     * @memberof XmsgImGroupSyncNotice
     * @instance
     */
    XmsgImGroupSyncNotice.prototype.event = null;

    /**
     * Creates a new XmsgImGroupSyncNotice instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupSyncNotice
     * @static
     * @param {IXmsgImGroupSyncNotice=} [properties] Properties to set
     * @returns {XmsgImGroupSyncNotice} XmsgImGroupSyncNotice instance
     */
    XmsgImGroupSyncNotice.create = function create(properties) {
        return new XmsgImGroupSyncNotice(properties);
    };

    /**
     * Encodes the specified XmsgImGroupSyncNotice message. Does not implicitly {@link XmsgImGroupSyncNotice.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupSyncNotice
     * @static
     * @param {IXmsgImGroupSyncNotice} message XmsgImGroupSyncNotice message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSyncNotice.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.event != null && message.hasOwnProperty("event"))
            $root.XmsgImGroupSyncEvent.encode(message.event, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupSyncNotice message, length delimited. Does not implicitly {@link XmsgImGroupSyncNotice.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupSyncNotice
     * @static
     * @param {IXmsgImGroupSyncNotice} message XmsgImGroupSyncNotice message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSyncNotice.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupSyncNotice message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupSyncNotice
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupSyncNotice} XmsgImGroupSyncNotice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSyncNotice.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupSyncNotice();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.event = $root.XmsgImGroupSyncEvent.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupSyncNotice message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupSyncNotice
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupSyncNotice} XmsgImGroupSyncNotice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSyncNotice.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupSyncNotice message.
     * @function verify
     * @memberof XmsgImGroupSyncNotice
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupSyncNotice.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.event != null && message.hasOwnProperty("event")) {
            var error = $root.XmsgImGroupSyncEvent.verify(message.event);
            if (error)
                return "event." + error;
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupSyncNotice message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupSyncNotice
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupSyncNotice} XmsgImGroupSyncNotice
     */
    XmsgImGroupSyncNotice.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupSyncNotice)
            return object;
        var message = new $root.XmsgImGroupSyncNotice();
        if (object.event != null) {
            if (typeof object.event !== "object")
                throw TypeError(".XmsgImGroupSyncNotice.event: object expected");
            message.event = $root.XmsgImGroupSyncEvent.fromObject(object.event);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupSyncNotice message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupSyncNotice
     * @static
     * @param {XmsgImGroupSyncNotice} message XmsgImGroupSyncNotice
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupSyncNotice.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.event = null;
        if (message.event != null && message.hasOwnProperty("event"))
            object.event = $root.XmsgImGroupSyncEvent.toObject(message.event, options);
        return object;
    };

    /**
     * Converts this XmsgImGroupSyncNotice to JSON.
     * @function toJSON
     * @memberof XmsgImGroupSyncNotice
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupSyncNotice.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupSyncNotice;
})();

$root.XmsgImGroupSyncGroupReq = (function() {

    /**
     * Properties of a XmsgImGroupSyncGroupReq.
     * @exports IXmsgImGroupSyncGroupReq
     * @interface IXmsgImGroupSyncGroupReq
     * @property {string|null} [cgt] XmsgImGroupSyncGroupReq cgt
     * @property {number|Long|null} [ver] XmsgImGroupSyncGroupReq ver
     * @property {Object.<string,string>|null} [ext] XmsgImGroupSyncGroupReq ext
     */

    /**
     * Constructs a new XmsgImGroupSyncGroupReq.
     * @exports XmsgImGroupSyncGroupReq
     * @classdesc Represents a XmsgImGroupSyncGroupReq.
     * @implements IXmsgImGroupSyncGroupReq
     * @constructor
     * @param {IXmsgImGroupSyncGroupReq=} [properties] Properties to set
     */
    function XmsgImGroupSyncGroupReq(properties) {
        this.ext = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupSyncGroupReq cgt.
     * @member {string} cgt
     * @memberof XmsgImGroupSyncGroupReq
     * @instance
     */
    XmsgImGroupSyncGroupReq.prototype.cgt = "";

    /**
     * XmsgImGroupSyncGroupReq ver.
     * @member {number|Long} ver
     * @memberof XmsgImGroupSyncGroupReq
     * @instance
     */
    XmsgImGroupSyncGroupReq.prototype.ver = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupSyncGroupReq ext.
     * @member {Object.<string,string>} ext
     * @memberof XmsgImGroupSyncGroupReq
     * @instance
     */
    XmsgImGroupSyncGroupReq.prototype.ext = $util.emptyObject;

    /**
     * Creates a new XmsgImGroupSyncGroupReq instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupSyncGroupReq
     * @static
     * @param {IXmsgImGroupSyncGroupReq=} [properties] Properties to set
     * @returns {XmsgImGroupSyncGroupReq} XmsgImGroupSyncGroupReq instance
     */
    XmsgImGroupSyncGroupReq.create = function create(properties) {
        return new XmsgImGroupSyncGroupReq(properties);
    };

    /**
     * Encodes the specified XmsgImGroupSyncGroupReq message. Does not implicitly {@link XmsgImGroupSyncGroupReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupSyncGroupReq
     * @static
     * @param {IXmsgImGroupSyncGroupReq} message XmsgImGroupSyncGroupReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSyncGroupReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.ver != null && message.hasOwnProperty("ver"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ver);
        if (message.ext != null && message.hasOwnProperty("ext"))
            for (var keys = Object.keys(message.ext), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.ext[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupSyncGroupReq message, length delimited. Does not implicitly {@link XmsgImGroupSyncGroupReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupSyncGroupReq
     * @static
     * @param {IXmsgImGroupSyncGroupReq} message XmsgImGroupSyncGroupReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSyncGroupReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupSyncGroupReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupSyncGroupReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupSyncGroupReq} XmsgImGroupSyncGroupReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSyncGroupReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupSyncGroupReq(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.ver = reader.uint64();
                break;
            case 3:
                reader.skip().pos++;
                if (message.ext === $util.emptyObject)
                    message.ext = {};
                key = reader.string();
                reader.pos++;
                message.ext[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupSyncGroupReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupSyncGroupReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupSyncGroupReq} XmsgImGroupSyncGroupReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSyncGroupReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupSyncGroupReq message.
     * @function verify
     * @memberof XmsgImGroupSyncGroupReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupSyncGroupReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (!$util.isInteger(message.ver) && !(message.ver && $util.isInteger(message.ver.low) && $util.isInteger(message.ver.high)))
                return "ver: integer|Long expected";
        if (message.ext != null && message.hasOwnProperty("ext")) {
            if (!$util.isObject(message.ext))
                return "ext: object expected";
            var key = Object.keys(message.ext);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.ext[key[i]]))
                    return "ext: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupSyncGroupReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupSyncGroupReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupSyncGroupReq} XmsgImGroupSyncGroupReq
     */
    XmsgImGroupSyncGroupReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupSyncGroupReq)
            return object;
        var message = new $root.XmsgImGroupSyncGroupReq();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.ver != null)
            if ($util.Long)
                (message.ver = $util.Long.fromValue(object.ver)).unsigned = true;
            else if (typeof object.ver === "string")
                message.ver = parseInt(object.ver, 10);
            else if (typeof object.ver === "number")
                message.ver = object.ver;
            else if (typeof object.ver === "object")
                message.ver = new $util.LongBits(object.ver.low >>> 0, object.ver.high >>> 0).toNumber(true);
        if (object.ext) {
            if (typeof object.ext !== "object")
                throw TypeError(".XmsgImGroupSyncGroupReq.ext: object expected");
            message.ext = {};
            for (var keys = Object.keys(object.ext), i = 0; i < keys.length; ++i)
                message.ext[keys[i]] = String(object.ext[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupSyncGroupReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupSyncGroupReq
     * @static
     * @param {XmsgImGroupSyncGroupReq} message XmsgImGroupSyncGroupReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupSyncGroupReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.ext = {};
        if (options.defaults) {
            object.cgt = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver = options.longs === String ? "0" : 0;
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (typeof message.ver === "number")
                object.ver = options.longs === String ? String(message.ver) : message.ver;
            else
                object.ver = options.longs === String ? $util.Long.prototype.toString.call(message.ver) : options.longs === Number ? new $util.LongBits(message.ver.low >>> 0, message.ver.high >>> 0).toNumber(true) : message.ver;
        var keys2;
        if (message.ext && (keys2 = Object.keys(message.ext)).length) {
            object.ext = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ext[keys2[j]] = message.ext[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupSyncGroupReq to JSON.
     * @function toJSON
     * @memberof XmsgImGroupSyncGroupReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupSyncGroupReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupSyncGroupReq;
})();

$root.XmsgImGroupSyncGroupRsp = (function() {

    /**
     * Properties of a XmsgImGroupSyncGroupRsp.
     * @exports IXmsgImGroupSyncGroupRsp
     * @interface IXmsgImGroupSyncGroupRsp
     * @property {IXmsgImGroupSyncGroupEventInfo|null} [info] XmsgImGroupSyncGroupRsp info
     * @property {Array.<IXmsgImGroupSyncGroupEventMember>|null} [member] XmsgImGroupSyncGroupRsp member
     */

    /**
     * Constructs a new XmsgImGroupSyncGroupRsp.
     * @exports XmsgImGroupSyncGroupRsp
     * @classdesc Represents a XmsgImGroupSyncGroupRsp.
     * @implements IXmsgImGroupSyncGroupRsp
     * @constructor
     * @param {IXmsgImGroupSyncGroupRsp=} [properties] Properties to set
     */
    function XmsgImGroupSyncGroupRsp(properties) {
        this.member = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupSyncGroupRsp info.
     * @member {IXmsgImGroupSyncGroupEventInfo|null|undefined} info
     * @memberof XmsgImGroupSyncGroupRsp
     * @instance
     */
    XmsgImGroupSyncGroupRsp.prototype.info = null;

    /**
     * XmsgImGroupSyncGroupRsp member.
     * @member {Array.<IXmsgImGroupSyncGroupEventMember>} member
     * @memberof XmsgImGroupSyncGroupRsp
     * @instance
     */
    XmsgImGroupSyncGroupRsp.prototype.member = $util.emptyArray;

    /**
     * Creates a new XmsgImGroupSyncGroupRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupSyncGroupRsp
     * @static
     * @param {IXmsgImGroupSyncGroupRsp=} [properties] Properties to set
     * @returns {XmsgImGroupSyncGroupRsp} XmsgImGroupSyncGroupRsp instance
     */
    XmsgImGroupSyncGroupRsp.create = function create(properties) {
        return new XmsgImGroupSyncGroupRsp(properties);
    };

    /**
     * Encodes the specified XmsgImGroupSyncGroupRsp message. Does not implicitly {@link XmsgImGroupSyncGroupRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupSyncGroupRsp
     * @static
     * @param {IXmsgImGroupSyncGroupRsp} message XmsgImGroupSyncGroupRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSyncGroupRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.info != null && message.hasOwnProperty("info"))
            $root.XmsgImGroupSyncGroupEventInfo.encode(message.info, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.member != null && message.member.length)
            for (var i = 0; i < message.member.length; ++i)
                $root.XmsgImGroupSyncGroupEventMember.encode(message.member[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupSyncGroupRsp message, length delimited. Does not implicitly {@link XmsgImGroupSyncGroupRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupSyncGroupRsp
     * @static
     * @param {IXmsgImGroupSyncGroupRsp} message XmsgImGroupSyncGroupRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSyncGroupRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupSyncGroupRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupSyncGroupRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupSyncGroupRsp} XmsgImGroupSyncGroupRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSyncGroupRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupSyncGroupRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.info = $root.XmsgImGroupSyncGroupEventInfo.decode(reader, reader.uint32());
                break;
            case 2:
                if (!(message.member && message.member.length))
                    message.member = [];
                message.member.push($root.XmsgImGroupSyncGroupEventMember.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupSyncGroupRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupSyncGroupRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupSyncGroupRsp} XmsgImGroupSyncGroupRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSyncGroupRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupSyncGroupRsp message.
     * @function verify
     * @memberof XmsgImGroupSyncGroupRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupSyncGroupRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            var error = $root.XmsgImGroupSyncGroupEventInfo.verify(message.info);
            if (error)
                return "info." + error;
        }
        if (message.member != null && message.hasOwnProperty("member")) {
            if (!Array.isArray(message.member))
                return "member: array expected";
            for (var i = 0; i < message.member.length; ++i) {
                var error = $root.XmsgImGroupSyncGroupEventMember.verify(message.member[i]);
                if (error)
                    return "member." + error;
            }
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupSyncGroupRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupSyncGroupRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupSyncGroupRsp} XmsgImGroupSyncGroupRsp
     */
    XmsgImGroupSyncGroupRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupSyncGroupRsp)
            return object;
        var message = new $root.XmsgImGroupSyncGroupRsp();
        if (object.info != null) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImGroupSyncGroupRsp.info: object expected");
            message.info = $root.XmsgImGroupSyncGroupEventInfo.fromObject(object.info);
        }
        if (object.member) {
            if (!Array.isArray(object.member))
                throw TypeError(".XmsgImGroupSyncGroupRsp.member: array expected");
            message.member = [];
            for (var i = 0; i < object.member.length; ++i) {
                if (typeof object.member[i] !== "object")
                    throw TypeError(".XmsgImGroupSyncGroupRsp.member: object expected");
                message.member[i] = $root.XmsgImGroupSyncGroupEventMember.fromObject(object.member[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupSyncGroupRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupSyncGroupRsp
     * @static
     * @param {XmsgImGroupSyncGroupRsp} message XmsgImGroupSyncGroupRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupSyncGroupRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.member = [];
        if (options.defaults)
            object.info = null;
        if (message.info != null && message.hasOwnProperty("info"))
            object.info = $root.XmsgImGroupSyncGroupEventInfo.toObject(message.info, options);
        if (message.member && message.member.length) {
            object.member = [];
            for (var j = 0; j < message.member.length; ++j)
                object.member[j] = $root.XmsgImGroupSyncGroupEventMember.toObject(message.member[j], options);
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupSyncGroupRsp to JSON.
     * @function toJSON
     * @memberof XmsgImGroupSyncGroupRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupSyncGroupRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupSyncGroupRsp;
})();

$root.XmsgImGroupSyncGroupEventInfo = (function() {

    /**
     * Properties of a XmsgImGroupSyncGroupEventInfo.
     * @exports IXmsgImGroupSyncGroupEventInfo
     * @interface IXmsgImGroupSyncGroupEventInfo
     * @property {Object.<string,string>|null} [info] XmsgImGroupSyncGroupEventInfo info
     * @property {number|Long|null} [ver] XmsgImGroupSyncGroupEventInfo ver
     * @property {number|Long|null} [gts] XmsgImGroupSyncGroupEventInfo gts
     * @property {number|Long|null} [uts] XmsgImGroupSyncGroupEventInfo uts
     */

    /**
     * Constructs a new XmsgImGroupSyncGroupEventInfo.
     * @exports XmsgImGroupSyncGroupEventInfo
     * @classdesc Represents a XmsgImGroupSyncGroupEventInfo.
     * @implements IXmsgImGroupSyncGroupEventInfo
     * @constructor
     * @param {IXmsgImGroupSyncGroupEventInfo=} [properties] Properties to set
     */
    function XmsgImGroupSyncGroupEventInfo(properties) {
        this.info = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupSyncGroupEventInfo info.
     * @member {Object.<string,string>} info
     * @memberof XmsgImGroupSyncGroupEventInfo
     * @instance
     */
    XmsgImGroupSyncGroupEventInfo.prototype.info = $util.emptyObject;

    /**
     * XmsgImGroupSyncGroupEventInfo ver.
     * @member {number|Long} ver
     * @memberof XmsgImGroupSyncGroupEventInfo
     * @instance
     */
    XmsgImGroupSyncGroupEventInfo.prototype.ver = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupSyncGroupEventInfo gts.
     * @member {number|Long} gts
     * @memberof XmsgImGroupSyncGroupEventInfo
     * @instance
     */
    XmsgImGroupSyncGroupEventInfo.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupSyncGroupEventInfo uts.
     * @member {number|Long} uts
     * @memberof XmsgImGroupSyncGroupEventInfo
     * @instance
     */
    XmsgImGroupSyncGroupEventInfo.prototype.uts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgImGroupSyncGroupEventInfo instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupSyncGroupEventInfo
     * @static
     * @param {IXmsgImGroupSyncGroupEventInfo=} [properties] Properties to set
     * @returns {XmsgImGroupSyncGroupEventInfo} XmsgImGroupSyncGroupEventInfo instance
     */
    XmsgImGroupSyncGroupEventInfo.create = function create(properties) {
        return new XmsgImGroupSyncGroupEventInfo(properties);
    };

    /**
     * Encodes the specified XmsgImGroupSyncGroupEventInfo message. Does not implicitly {@link XmsgImGroupSyncGroupEventInfo.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupSyncGroupEventInfo
     * @static
     * @param {IXmsgImGroupSyncGroupEventInfo} message XmsgImGroupSyncGroupEventInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSyncGroupEventInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.info != null && message.hasOwnProperty("info"))
            for (var keys = Object.keys(message.info), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.info[keys[i]]).ldelim();
        if (message.ver != null && message.hasOwnProperty("ver"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ver);
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.gts);
        if (message.uts != null && message.hasOwnProperty("uts"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.uts);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupSyncGroupEventInfo message, length delimited. Does not implicitly {@link XmsgImGroupSyncGroupEventInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupSyncGroupEventInfo
     * @static
     * @param {IXmsgImGroupSyncGroupEventInfo} message XmsgImGroupSyncGroupEventInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSyncGroupEventInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupSyncGroupEventInfo message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupSyncGroupEventInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupSyncGroupEventInfo} XmsgImGroupSyncGroupEventInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSyncGroupEventInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupSyncGroupEventInfo(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                reader.skip().pos++;
                if (message.info === $util.emptyObject)
                    message.info = {};
                key = reader.string();
                reader.pos++;
                message.info[key] = reader.string();
                break;
            case 2:
                message.ver = reader.uint64();
                break;
            case 3:
                message.gts = reader.uint64();
                break;
            case 4:
                message.uts = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupSyncGroupEventInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupSyncGroupEventInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupSyncGroupEventInfo} XmsgImGroupSyncGroupEventInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSyncGroupEventInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupSyncGroupEventInfo message.
     * @function verify
     * @memberof XmsgImGroupSyncGroupEventInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupSyncGroupEventInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            if (!$util.isObject(message.info))
                return "info: object expected";
            var key = Object.keys(message.info);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.info[key[i]]))
                    return "info: string{k:string} expected";
        }
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (!$util.isInteger(message.ver) && !(message.ver && $util.isInteger(message.ver.low) && $util.isInteger(message.ver.high)))
                return "ver: integer|Long expected";
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (!$util.isInteger(message.uts) && !(message.uts && $util.isInteger(message.uts.low) && $util.isInteger(message.uts.high)))
                return "uts: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgImGroupSyncGroupEventInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupSyncGroupEventInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupSyncGroupEventInfo} XmsgImGroupSyncGroupEventInfo
     */
    XmsgImGroupSyncGroupEventInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupSyncGroupEventInfo)
            return object;
        var message = new $root.XmsgImGroupSyncGroupEventInfo();
        if (object.info) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImGroupSyncGroupEventInfo.info: object expected");
            message.info = {};
            for (var keys = Object.keys(object.info), i = 0; i < keys.length; ++i)
                message.info[keys[i]] = String(object.info[keys[i]]);
        }
        if (object.ver != null)
            if ($util.Long)
                (message.ver = $util.Long.fromValue(object.ver)).unsigned = true;
            else if (typeof object.ver === "string")
                message.ver = parseInt(object.ver, 10);
            else if (typeof object.ver === "number")
                message.ver = object.ver;
            else if (typeof object.ver === "object")
                message.ver = new $util.LongBits(object.ver.low >>> 0, object.ver.high >>> 0).toNumber(true);
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        if (object.uts != null)
            if ($util.Long)
                (message.uts = $util.Long.fromValue(object.uts)).unsigned = true;
            else if (typeof object.uts === "string")
                message.uts = parseInt(object.uts, 10);
            else if (typeof object.uts === "number")
                message.uts = object.uts;
            else if (typeof object.uts === "object")
                message.uts = new $util.LongBits(object.uts.low >>> 0, object.uts.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupSyncGroupEventInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupSyncGroupEventInfo
     * @static
     * @param {XmsgImGroupSyncGroupEventInfo} message XmsgImGroupSyncGroupEventInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupSyncGroupEventInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.info = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uts = options.longs === String ? "0" : 0;
        }
        var keys2;
        if (message.info && (keys2 = Object.keys(message.info)).length) {
            object.info = {};
            for (var j = 0; j < keys2.length; ++j)
                object.info[keys2[j]] = message.info[keys2[j]];
        }
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (typeof message.ver === "number")
                object.ver = options.longs === String ? String(message.ver) : message.ver;
            else
                object.ver = options.longs === String ? $util.Long.prototype.toString.call(message.ver) : options.longs === Number ? new $util.LongBits(message.ver.low >>> 0, message.ver.high >>> 0).toNumber(true) : message.ver;
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (typeof message.uts === "number")
                object.uts = options.longs === String ? String(message.uts) : message.uts;
            else
                object.uts = options.longs === String ? $util.Long.prototype.toString.call(message.uts) : options.longs === Number ? new $util.LongBits(message.uts.low >>> 0, message.uts.high >>> 0).toNumber(true) : message.uts;
        return object;
    };

    /**
     * Converts this XmsgImGroupSyncGroupEventInfo to JSON.
     * @function toJSON
     * @memberof XmsgImGroupSyncGroupEventInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupSyncGroupEventInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupSyncGroupEventInfo;
})();

$root.XmsgImGroupSyncGroupEventMember = (function() {

    /**
     * Properties of a XmsgImGroupSyncGroupEventMember.
     * @exports IXmsgImGroupSyncGroupEventMember
     * @interface IXmsgImGroupSyncGroupEventMember
     * @property {string|null} [cgt] XmsgImGroupSyncGroupEventMember cgt
     * @property {string|null} [oper] XmsgImGroupSyncGroupEventMember oper
     * @property {Object.<string,string>|null} [info] XmsgImGroupSyncGroupEventMember info
     * @property {number|Long|null} [ver] XmsgImGroupSyncGroupEventMember ver
     * @property {number|Long|null} [gts] XmsgImGroupSyncGroupEventMember gts
     * @property {number|Long|null} [uts] XmsgImGroupSyncGroupEventMember uts
     */

    /**
     * Constructs a new XmsgImGroupSyncGroupEventMember.
     * @exports XmsgImGroupSyncGroupEventMember
     * @classdesc Represents a XmsgImGroupSyncGroupEventMember.
     * @implements IXmsgImGroupSyncGroupEventMember
     * @constructor
     * @param {IXmsgImGroupSyncGroupEventMember=} [properties] Properties to set
     */
    function XmsgImGroupSyncGroupEventMember(properties) {
        this.info = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupSyncGroupEventMember cgt.
     * @member {string} cgt
     * @memberof XmsgImGroupSyncGroupEventMember
     * @instance
     */
    XmsgImGroupSyncGroupEventMember.prototype.cgt = "";

    /**
     * XmsgImGroupSyncGroupEventMember oper.
     * @member {string} oper
     * @memberof XmsgImGroupSyncGroupEventMember
     * @instance
     */
    XmsgImGroupSyncGroupEventMember.prototype.oper = "";

    /**
     * XmsgImGroupSyncGroupEventMember info.
     * @member {Object.<string,string>} info
     * @memberof XmsgImGroupSyncGroupEventMember
     * @instance
     */
    XmsgImGroupSyncGroupEventMember.prototype.info = $util.emptyObject;

    /**
     * XmsgImGroupSyncGroupEventMember ver.
     * @member {number|Long} ver
     * @memberof XmsgImGroupSyncGroupEventMember
     * @instance
     */
    XmsgImGroupSyncGroupEventMember.prototype.ver = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupSyncGroupEventMember gts.
     * @member {number|Long} gts
     * @memberof XmsgImGroupSyncGroupEventMember
     * @instance
     */
    XmsgImGroupSyncGroupEventMember.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupSyncGroupEventMember uts.
     * @member {number|Long} uts
     * @memberof XmsgImGroupSyncGroupEventMember
     * @instance
     */
    XmsgImGroupSyncGroupEventMember.prototype.uts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgImGroupSyncGroupEventMember instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupSyncGroupEventMember
     * @static
     * @param {IXmsgImGroupSyncGroupEventMember=} [properties] Properties to set
     * @returns {XmsgImGroupSyncGroupEventMember} XmsgImGroupSyncGroupEventMember instance
     */
    XmsgImGroupSyncGroupEventMember.create = function create(properties) {
        return new XmsgImGroupSyncGroupEventMember(properties);
    };

    /**
     * Encodes the specified XmsgImGroupSyncGroupEventMember message. Does not implicitly {@link XmsgImGroupSyncGroupEventMember.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupSyncGroupEventMember
     * @static
     * @param {IXmsgImGroupSyncGroupEventMember} message XmsgImGroupSyncGroupEventMember message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSyncGroupEventMember.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.oper != null && message.hasOwnProperty("oper"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.oper);
        if (message.info != null && message.hasOwnProperty("info"))
            for (var keys = Object.keys(message.info), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.info[keys[i]]).ldelim();
        if (message.ver != null && message.hasOwnProperty("ver"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.ver);
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.gts);
        if (message.uts != null && message.hasOwnProperty("uts"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.uts);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupSyncGroupEventMember message, length delimited. Does not implicitly {@link XmsgImGroupSyncGroupEventMember.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupSyncGroupEventMember
     * @static
     * @param {IXmsgImGroupSyncGroupEventMember} message XmsgImGroupSyncGroupEventMember message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupSyncGroupEventMember.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupSyncGroupEventMember message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupSyncGroupEventMember
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupSyncGroupEventMember} XmsgImGroupSyncGroupEventMember
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSyncGroupEventMember.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupSyncGroupEventMember(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.oper = reader.string();
                break;
            case 3:
                reader.skip().pos++;
                if (message.info === $util.emptyObject)
                    message.info = {};
                key = reader.string();
                reader.pos++;
                message.info[key] = reader.string();
                break;
            case 4:
                message.ver = reader.uint64();
                break;
            case 5:
                message.gts = reader.uint64();
                break;
            case 6:
                message.uts = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupSyncGroupEventMember message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupSyncGroupEventMember
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupSyncGroupEventMember} XmsgImGroupSyncGroupEventMember
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupSyncGroupEventMember.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupSyncGroupEventMember message.
     * @function verify
     * @memberof XmsgImGroupSyncGroupEventMember
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupSyncGroupEventMember.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.oper != null && message.hasOwnProperty("oper"))
            if (!$util.isString(message.oper))
                return "oper: string expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            if (!$util.isObject(message.info))
                return "info: object expected";
            var key = Object.keys(message.info);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.info[key[i]]))
                    return "info: string{k:string} expected";
        }
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (!$util.isInteger(message.ver) && !(message.ver && $util.isInteger(message.ver.low) && $util.isInteger(message.ver.high)))
                return "ver: integer|Long expected";
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (!$util.isInteger(message.uts) && !(message.uts && $util.isInteger(message.uts.low) && $util.isInteger(message.uts.high)))
                return "uts: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgImGroupSyncGroupEventMember message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupSyncGroupEventMember
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupSyncGroupEventMember} XmsgImGroupSyncGroupEventMember
     */
    XmsgImGroupSyncGroupEventMember.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupSyncGroupEventMember)
            return object;
        var message = new $root.XmsgImGroupSyncGroupEventMember();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.oper != null)
            message.oper = String(object.oper);
        if (object.info) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImGroupSyncGroupEventMember.info: object expected");
            message.info = {};
            for (var keys = Object.keys(object.info), i = 0; i < keys.length; ++i)
                message.info[keys[i]] = String(object.info[keys[i]]);
        }
        if (object.ver != null)
            if ($util.Long)
                (message.ver = $util.Long.fromValue(object.ver)).unsigned = true;
            else if (typeof object.ver === "string")
                message.ver = parseInt(object.ver, 10);
            else if (typeof object.ver === "number")
                message.ver = object.ver;
            else if (typeof object.ver === "object")
                message.ver = new $util.LongBits(object.ver.low >>> 0, object.ver.high >>> 0).toNumber(true);
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        if (object.uts != null)
            if ($util.Long)
                (message.uts = $util.Long.fromValue(object.uts)).unsigned = true;
            else if (typeof object.uts === "string")
                message.uts = parseInt(object.uts, 10);
            else if (typeof object.uts === "number")
                message.uts = object.uts;
            else if (typeof object.uts === "object")
                message.uts = new $util.LongBits(object.uts.low >>> 0, object.uts.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupSyncGroupEventMember message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupSyncGroupEventMember
     * @static
     * @param {XmsgImGroupSyncGroupEventMember} message XmsgImGroupSyncGroupEventMember
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupSyncGroupEventMember.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.info = {};
        if (options.defaults) {
            object.cgt = "";
            object.oper = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uts = options.longs === String ? "0" : 0;
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.oper != null && message.hasOwnProperty("oper"))
            object.oper = message.oper;
        var keys2;
        if (message.info && (keys2 = Object.keys(message.info)).length) {
            object.info = {};
            for (var j = 0; j < keys2.length; ++j)
                object.info[keys2[j]] = message.info[keys2[j]];
        }
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (typeof message.ver === "number")
                object.ver = options.longs === String ? String(message.ver) : message.ver;
            else
                object.ver = options.longs === String ? $util.Long.prototype.toString.call(message.ver) : options.longs === Number ? new $util.LongBits(message.ver.low >>> 0, message.ver.high >>> 0).toNumber(true) : message.ver;
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (typeof message.uts === "number")
                object.uts = options.longs === String ? String(message.uts) : message.uts;
            else
                object.uts = options.longs === String ? $util.Long.prototype.toString.call(message.uts) : options.longs === Number ? new $util.LongBits(message.uts.low >>> 0, message.uts.high >>> 0).toNumber(true) : message.uts;
        return object;
    };

    /**
     * Converts this XmsgImGroupSyncGroupEventMember to JSON.
     * @function toJSON
     * @memberof XmsgImGroupSyncGroupEventMember
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupSyncGroupEventMember.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupSyncGroupEventMember;
})();

$root.XmsgImGroupEventNotice = (function() {

    /**
     * Properties of a XmsgImGroupEventNotice.
     * @exports IXmsgImGroupEventNotice
     * @interface IXmsgImGroupEventNotice
     * @property {IXmsgImGroupSyncGroupEventInfo|null} [info] XmsgImGroupEventNotice info
     * @property {IXmsgImGroupSyncGroupEventMember|null} [member] XmsgImGroupEventNotice member
     */

    /**
     * Constructs a new XmsgImGroupEventNotice.
     * @exports XmsgImGroupEventNotice
     * @classdesc Represents a XmsgImGroupEventNotice.
     * @implements IXmsgImGroupEventNotice
     * @constructor
     * @param {IXmsgImGroupEventNotice=} [properties] Properties to set
     */
    function XmsgImGroupEventNotice(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupEventNotice info.
     * @member {IXmsgImGroupSyncGroupEventInfo|null|undefined} info
     * @memberof XmsgImGroupEventNotice
     * @instance
     */
    XmsgImGroupEventNotice.prototype.info = null;

    /**
     * XmsgImGroupEventNotice member.
     * @member {IXmsgImGroupSyncGroupEventMember|null|undefined} member
     * @memberof XmsgImGroupEventNotice
     * @instance
     */
    XmsgImGroupEventNotice.prototype.member = null;

    /**
     * Creates a new XmsgImGroupEventNotice instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupEventNotice
     * @static
     * @param {IXmsgImGroupEventNotice=} [properties] Properties to set
     * @returns {XmsgImGroupEventNotice} XmsgImGroupEventNotice instance
     */
    XmsgImGroupEventNotice.create = function create(properties) {
        return new XmsgImGroupEventNotice(properties);
    };

    /**
     * Encodes the specified XmsgImGroupEventNotice message. Does not implicitly {@link XmsgImGroupEventNotice.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupEventNotice
     * @static
     * @param {IXmsgImGroupEventNotice} message XmsgImGroupEventNotice message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupEventNotice.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.info != null && message.hasOwnProperty("info"))
            $root.XmsgImGroupSyncGroupEventInfo.encode(message.info, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.member != null && message.hasOwnProperty("member"))
            $root.XmsgImGroupSyncGroupEventMember.encode(message.member, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupEventNotice message, length delimited. Does not implicitly {@link XmsgImGroupEventNotice.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupEventNotice
     * @static
     * @param {IXmsgImGroupEventNotice} message XmsgImGroupEventNotice message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupEventNotice.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupEventNotice message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupEventNotice
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupEventNotice} XmsgImGroupEventNotice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupEventNotice.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupEventNotice();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.info = $root.XmsgImGroupSyncGroupEventInfo.decode(reader, reader.uint32());
                break;
            case 2:
                message.member = $root.XmsgImGroupSyncGroupEventMember.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupEventNotice message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupEventNotice
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupEventNotice} XmsgImGroupEventNotice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupEventNotice.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupEventNotice message.
     * @function verify
     * @memberof XmsgImGroupEventNotice
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupEventNotice.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            var error = $root.XmsgImGroupSyncGroupEventInfo.verify(message.info);
            if (error)
                return "info." + error;
        }
        if (message.member != null && message.hasOwnProperty("member")) {
            var error = $root.XmsgImGroupSyncGroupEventMember.verify(message.member);
            if (error)
                return "member." + error;
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupEventNotice message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupEventNotice
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupEventNotice} XmsgImGroupEventNotice
     */
    XmsgImGroupEventNotice.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupEventNotice)
            return object;
        var message = new $root.XmsgImGroupEventNotice();
        if (object.info != null) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImGroupEventNotice.info: object expected");
            message.info = $root.XmsgImGroupSyncGroupEventInfo.fromObject(object.info);
        }
        if (object.member != null) {
            if (typeof object.member !== "object")
                throw TypeError(".XmsgImGroupEventNotice.member: object expected");
            message.member = $root.XmsgImGroupSyncGroupEventMember.fromObject(object.member);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupEventNotice message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupEventNotice
     * @static
     * @param {XmsgImGroupEventNotice} message XmsgImGroupEventNotice
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupEventNotice.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.info = null;
            object.member = null;
        }
        if (message.info != null && message.hasOwnProperty("info"))
            object.info = $root.XmsgImGroupSyncGroupEventInfo.toObject(message.info, options);
        if (message.member != null && message.hasOwnProperty("member"))
            object.member = $root.XmsgImGroupSyncGroupEventMember.toObject(message.member, options);
        return object;
    };

    /**
     * Converts this XmsgImGroupEventNotice to JSON.
     * @function toJSON
     * @memberof XmsgImGroupEventNotice
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupEventNotice.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupEventNotice;
})();

$root.XmsgImGroupInfoQueryReq = (function() {

    /**
     * Properties of a XmsgImGroupInfoQueryReq.
     * @exports IXmsgImGroupInfoQueryReq
     * @interface IXmsgImGroupInfoQueryReq
     * @property {string|null} [cgt] XmsgImGroupInfoQueryReq cgt
     * @property {boolean|null} [member] XmsgImGroupInfoQueryReq member
     */

    /**
     * Constructs a new XmsgImGroupInfoQueryReq.
     * @exports XmsgImGroupInfoQueryReq
     * @classdesc Represents a XmsgImGroupInfoQueryReq.
     * @implements IXmsgImGroupInfoQueryReq
     * @constructor
     * @param {IXmsgImGroupInfoQueryReq=} [properties] Properties to set
     */
    function XmsgImGroupInfoQueryReq(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupInfoQueryReq cgt.
     * @member {string} cgt
     * @memberof XmsgImGroupInfoQueryReq
     * @instance
     */
    XmsgImGroupInfoQueryReq.prototype.cgt = "";

    /**
     * XmsgImGroupInfoQueryReq member.
     * @member {boolean} member
     * @memberof XmsgImGroupInfoQueryReq
     * @instance
     */
    XmsgImGroupInfoQueryReq.prototype.member = false;

    /**
     * Creates a new XmsgImGroupInfoQueryReq instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupInfoQueryReq
     * @static
     * @param {IXmsgImGroupInfoQueryReq=} [properties] Properties to set
     * @returns {XmsgImGroupInfoQueryReq} XmsgImGroupInfoQueryReq instance
     */
    XmsgImGroupInfoQueryReq.create = function create(properties) {
        return new XmsgImGroupInfoQueryReq(properties);
    };

    /**
     * Encodes the specified XmsgImGroupInfoQueryReq message. Does not implicitly {@link XmsgImGroupInfoQueryReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupInfoQueryReq
     * @static
     * @param {IXmsgImGroupInfoQueryReq} message XmsgImGroupInfoQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupInfoQueryReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.member != null && message.hasOwnProperty("member"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.member);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupInfoQueryReq message, length delimited. Does not implicitly {@link XmsgImGroupInfoQueryReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupInfoQueryReq
     * @static
     * @param {IXmsgImGroupInfoQueryReq} message XmsgImGroupInfoQueryReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupInfoQueryReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupInfoQueryReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupInfoQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupInfoQueryReq} XmsgImGroupInfoQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupInfoQueryReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupInfoQueryReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.member = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupInfoQueryReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupInfoQueryReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupInfoQueryReq} XmsgImGroupInfoQueryReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupInfoQueryReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupInfoQueryReq message.
     * @function verify
     * @memberof XmsgImGroupInfoQueryReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupInfoQueryReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.member != null && message.hasOwnProperty("member"))
            if (typeof message.member !== "boolean")
                return "member: boolean expected";
        return null;
    };

    /**
     * Creates a XmsgImGroupInfoQueryReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupInfoQueryReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupInfoQueryReq} XmsgImGroupInfoQueryReq
     */
    XmsgImGroupInfoQueryReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupInfoQueryReq)
            return object;
        var message = new $root.XmsgImGroupInfoQueryReq();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.member != null)
            message.member = Boolean(object.member);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupInfoQueryReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupInfoQueryReq
     * @static
     * @param {XmsgImGroupInfoQueryReq} message XmsgImGroupInfoQueryReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupInfoQueryReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cgt = "";
            object.member = false;
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.member != null && message.hasOwnProperty("member"))
            object.member = message.member;
        return object;
    };

    /**
     * Converts this XmsgImGroupInfoQueryReq to JSON.
     * @function toJSON
     * @memberof XmsgImGroupInfoQueryReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupInfoQueryReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupInfoQueryReq;
})();

$root.XmsgImGroupInfoQueryRsp = (function() {

    /**
     * Properties of a XmsgImGroupInfoQueryRsp.
     * @exports IXmsgImGroupInfoQueryRsp
     * @interface IXmsgImGroupInfoQueryRsp
     * @property {IXmsgImGroupInfoSelfInfo|null} [info] XmsgImGroupInfoQueryRsp info
     * @property {Array.<IXmsgImGroupInfoMember>|null} [member] XmsgImGroupInfoQueryRsp member
     */

    /**
     * Constructs a new XmsgImGroupInfoQueryRsp.
     * @exports XmsgImGroupInfoQueryRsp
     * @classdesc Represents a XmsgImGroupInfoQueryRsp.
     * @implements IXmsgImGroupInfoQueryRsp
     * @constructor
     * @param {IXmsgImGroupInfoQueryRsp=} [properties] Properties to set
     */
    function XmsgImGroupInfoQueryRsp(properties) {
        this.member = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupInfoQueryRsp info.
     * @member {IXmsgImGroupInfoSelfInfo|null|undefined} info
     * @memberof XmsgImGroupInfoQueryRsp
     * @instance
     */
    XmsgImGroupInfoQueryRsp.prototype.info = null;

    /**
     * XmsgImGroupInfoQueryRsp member.
     * @member {Array.<IXmsgImGroupInfoMember>} member
     * @memberof XmsgImGroupInfoQueryRsp
     * @instance
     */
    XmsgImGroupInfoQueryRsp.prototype.member = $util.emptyArray;

    /**
     * Creates a new XmsgImGroupInfoQueryRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupInfoQueryRsp
     * @static
     * @param {IXmsgImGroupInfoQueryRsp=} [properties] Properties to set
     * @returns {XmsgImGroupInfoQueryRsp} XmsgImGroupInfoQueryRsp instance
     */
    XmsgImGroupInfoQueryRsp.create = function create(properties) {
        return new XmsgImGroupInfoQueryRsp(properties);
    };

    /**
     * Encodes the specified XmsgImGroupInfoQueryRsp message. Does not implicitly {@link XmsgImGroupInfoQueryRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupInfoQueryRsp
     * @static
     * @param {IXmsgImGroupInfoQueryRsp} message XmsgImGroupInfoQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupInfoQueryRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.info != null && message.hasOwnProperty("info"))
            $root.XmsgImGroupInfoSelfInfo.encode(message.info, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.member != null && message.member.length)
            for (var i = 0; i < message.member.length; ++i)
                $root.XmsgImGroupInfoMember.encode(message.member[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupInfoQueryRsp message, length delimited. Does not implicitly {@link XmsgImGroupInfoQueryRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupInfoQueryRsp
     * @static
     * @param {IXmsgImGroupInfoQueryRsp} message XmsgImGroupInfoQueryRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupInfoQueryRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupInfoQueryRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupInfoQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupInfoQueryRsp} XmsgImGroupInfoQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupInfoQueryRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupInfoQueryRsp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.info = $root.XmsgImGroupInfoSelfInfo.decode(reader, reader.uint32());
                break;
            case 2:
                if (!(message.member && message.member.length))
                    message.member = [];
                message.member.push($root.XmsgImGroupInfoMember.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupInfoQueryRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupInfoQueryRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupInfoQueryRsp} XmsgImGroupInfoQueryRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupInfoQueryRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupInfoQueryRsp message.
     * @function verify
     * @memberof XmsgImGroupInfoQueryRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupInfoQueryRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            var error = $root.XmsgImGroupInfoSelfInfo.verify(message.info);
            if (error)
                return "info." + error;
        }
        if (message.member != null && message.hasOwnProperty("member")) {
            if (!Array.isArray(message.member))
                return "member: array expected";
            for (var i = 0; i < message.member.length; ++i) {
                var error = $root.XmsgImGroupInfoMember.verify(message.member[i]);
                if (error)
                    return "member." + error;
            }
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupInfoQueryRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupInfoQueryRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupInfoQueryRsp} XmsgImGroupInfoQueryRsp
     */
    XmsgImGroupInfoQueryRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupInfoQueryRsp)
            return object;
        var message = new $root.XmsgImGroupInfoQueryRsp();
        if (object.info != null) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImGroupInfoQueryRsp.info: object expected");
            message.info = $root.XmsgImGroupInfoSelfInfo.fromObject(object.info);
        }
        if (object.member) {
            if (!Array.isArray(object.member))
                throw TypeError(".XmsgImGroupInfoQueryRsp.member: array expected");
            message.member = [];
            for (var i = 0; i < object.member.length; ++i) {
                if (typeof object.member[i] !== "object")
                    throw TypeError(".XmsgImGroupInfoQueryRsp.member: object expected");
                message.member[i] = $root.XmsgImGroupInfoMember.fromObject(object.member[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupInfoQueryRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupInfoQueryRsp
     * @static
     * @param {XmsgImGroupInfoQueryRsp} message XmsgImGroupInfoQueryRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupInfoQueryRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.member = [];
        if (options.defaults)
            object.info = null;
        if (message.info != null && message.hasOwnProperty("info"))
            object.info = $root.XmsgImGroupInfoSelfInfo.toObject(message.info, options);
        if (message.member && message.member.length) {
            object.member = [];
            for (var j = 0; j < message.member.length; ++j)
                object.member[j] = $root.XmsgImGroupInfoMember.toObject(message.member[j], options);
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupInfoQueryRsp to JSON.
     * @function toJSON
     * @memberof XmsgImGroupInfoQueryRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupInfoQueryRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupInfoQueryRsp;
})();

$root.XmsgImGroupInfoSelfInfo = (function() {

    /**
     * Properties of a XmsgImGroupInfoSelfInfo.
     * @exports IXmsgImGroupInfoSelfInfo
     * @interface IXmsgImGroupInfoSelfInfo
     * @property {string|null} [cgt] XmsgImGroupInfoSelfInfo cgt
     * @property {boolean|null} [enable] XmsgImGroupInfoSelfInfo enable
     * @property {Object.<string,string>|null} [info] XmsgImGroupInfoSelfInfo info
     * @property {number|Long|null} [ver] XmsgImGroupInfoSelfInfo ver
     * @property {number|Long|null} [gts] XmsgImGroupInfoSelfInfo gts
     * @property {number|Long|null} [uts] XmsgImGroupInfoSelfInfo uts
     */

    /**
     * Constructs a new XmsgImGroupInfoSelfInfo.
     * @exports XmsgImGroupInfoSelfInfo
     * @classdesc Represents a XmsgImGroupInfoSelfInfo.
     * @implements IXmsgImGroupInfoSelfInfo
     * @constructor
     * @param {IXmsgImGroupInfoSelfInfo=} [properties] Properties to set
     */
    function XmsgImGroupInfoSelfInfo(properties) {
        this.info = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupInfoSelfInfo cgt.
     * @member {string} cgt
     * @memberof XmsgImGroupInfoSelfInfo
     * @instance
     */
    XmsgImGroupInfoSelfInfo.prototype.cgt = "";

    /**
     * XmsgImGroupInfoSelfInfo enable.
     * @member {boolean} enable
     * @memberof XmsgImGroupInfoSelfInfo
     * @instance
     */
    XmsgImGroupInfoSelfInfo.prototype.enable = false;

    /**
     * XmsgImGroupInfoSelfInfo info.
     * @member {Object.<string,string>} info
     * @memberof XmsgImGroupInfoSelfInfo
     * @instance
     */
    XmsgImGroupInfoSelfInfo.prototype.info = $util.emptyObject;

    /**
     * XmsgImGroupInfoSelfInfo ver.
     * @member {number|Long} ver
     * @memberof XmsgImGroupInfoSelfInfo
     * @instance
     */
    XmsgImGroupInfoSelfInfo.prototype.ver = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupInfoSelfInfo gts.
     * @member {number|Long} gts
     * @memberof XmsgImGroupInfoSelfInfo
     * @instance
     */
    XmsgImGroupInfoSelfInfo.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupInfoSelfInfo uts.
     * @member {number|Long} uts
     * @memberof XmsgImGroupInfoSelfInfo
     * @instance
     */
    XmsgImGroupInfoSelfInfo.prototype.uts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgImGroupInfoSelfInfo instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupInfoSelfInfo
     * @static
     * @param {IXmsgImGroupInfoSelfInfo=} [properties] Properties to set
     * @returns {XmsgImGroupInfoSelfInfo} XmsgImGroupInfoSelfInfo instance
     */
    XmsgImGroupInfoSelfInfo.create = function create(properties) {
        return new XmsgImGroupInfoSelfInfo(properties);
    };

    /**
     * Encodes the specified XmsgImGroupInfoSelfInfo message. Does not implicitly {@link XmsgImGroupInfoSelfInfo.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupInfoSelfInfo
     * @static
     * @param {IXmsgImGroupInfoSelfInfo} message XmsgImGroupInfoSelfInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupInfoSelfInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.enable != null && message.hasOwnProperty("enable"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.enable);
        if (message.info != null && message.hasOwnProperty("info"))
            for (var keys = Object.keys(message.info), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.info[keys[i]]).ldelim();
        if (message.ver != null && message.hasOwnProperty("ver"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.ver);
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.gts);
        if (message.uts != null && message.hasOwnProperty("uts"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.uts);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupInfoSelfInfo message, length delimited. Does not implicitly {@link XmsgImGroupInfoSelfInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupInfoSelfInfo
     * @static
     * @param {IXmsgImGroupInfoSelfInfo} message XmsgImGroupInfoSelfInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupInfoSelfInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupInfoSelfInfo message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupInfoSelfInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupInfoSelfInfo} XmsgImGroupInfoSelfInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupInfoSelfInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupInfoSelfInfo(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.enable = reader.bool();
                break;
            case 3:
                reader.skip().pos++;
                if (message.info === $util.emptyObject)
                    message.info = {};
                key = reader.string();
                reader.pos++;
                message.info[key] = reader.string();
                break;
            case 4:
                message.ver = reader.uint64();
                break;
            case 5:
                message.gts = reader.uint64();
                break;
            case 6:
                message.uts = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupInfoSelfInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupInfoSelfInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupInfoSelfInfo} XmsgImGroupInfoSelfInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupInfoSelfInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupInfoSelfInfo message.
     * @function verify
     * @memberof XmsgImGroupInfoSelfInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupInfoSelfInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.enable != null && message.hasOwnProperty("enable"))
            if (typeof message.enable !== "boolean")
                return "enable: boolean expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            if (!$util.isObject(message.info))
                return "info: object expected";
            var key = Object.keys(message.info);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.info[key[i]]))
                    return "info: string{k:string} expected";
        }
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (!$util.isInteger(message.ver) && !(message.ver && $util.isInteger(message.ver.low) && $util.isInteger(message.ver.high)))
                return "ver: integer|Long expected";
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (!$util.isInteger(message.uts) && !(message.uts && $util.isInteger(message.uts.low) && $util.isInteger(message.uts.high)))
                return "uts: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgImGroupInfoSelfInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupInfoSelfInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupInfoSelfInfo} XmsgImGroupInfoSelfInfo
     */
    XmsgImGroupInfoSelfInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupInfoSelfInfo)
            return object;
        var message = new $root.XmsgImGroupInfoSelfInfo();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.enable != null)
            message.enable = Boolean(object.enable);
        if (object.info) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImGroupInfoSelfInfo.info: object expected");
            message.info = {};
            for (var keys = Object.keys(object.info), i = 0; i < keys.length; ++i)
                message.info[keys[i]] = String(object.info[keys[i]]);
        }
        if (object.ver != null)
            if ($util.Long)
                (message.ver = $util.Long.fromValue(object.ver)).unsigned = true;
            else if (typeof object.ver === "string")
                message.ver = parseInt(object.ver, 10);
            else if (typeof object.ver === "number")
                message.ver = object.ver;
            else if (typeof object.ver === "object")
                message.ver = new $util.LongBits(object.ver.low >>> 0, object.ver.high >>> 0).toNumber(true);
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        if (object.uts != null)
            if ($util.Long)
                (message.uts = $util.Long.fromValue(object.uts)).unsigned = true;
            else if (typeof object.uts === "string")
                message.uts = parseInt(object.uts, 10);
            else if (typeof object.uts === "number")
                message.uts = object.uts;
            else if (typeof object.uts === "object")
                message.uts = new $util.LongBits(object.uts.low >>> 0, object.uts.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupInfoSelfInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupInfoSelfInfo
     * @static
     * @param {XmsgImGroupInfoSelfInfo} message XmsgImGroupInfoSelfInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupInfoSelfInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.info = {};
        if (options.defaults) {
            object.cgt = "";
            object.enable = false;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uts = options.longs === String ? "0" : 0;
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.enable != null && message.hasOwnProperty("enable"))
            object.enable = message.enable;
        var keys2;
        if (message.info && (keys2 = Object.keys(message.info)).length) {
            object.info = {};
            for (var j = 0; j < keys2.length; ++j)
                object.info[keys2[j]] = message.info[keys2[j]];
        }
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (typeof message.ver === "number")
                object.ver = options.longs === String ? String(message.ver) : message.ver;
            else
                object.ver = options.longs === String ? $util.Long.prototype.toString.call(message.ver) : options.longs === Number ? new $util.LongBits(message.ver.low >>> 0, message.ver.high >>> 0).toNumber(true) : message.ver;
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (typeof message.uts === "number")
                object.uts = options.longs === String ? String(message.uts) : message.uts;
            else
                object.uts = options.longs === String ? $util.Long.prototype.toString.call(message.uts) : options.longs === Number ? new $util.LongBits(message.uts.low >>> 0, message.uts.high >>> 0).toNumber(true) : message.uts;
        return object;
    };

    /**
     * Converts this XmsgImGroupInfoSelfInfo to JSON.
     * @function toJSON
     * @memberof XmsgImGroupInfoSelfInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupInfoSelfInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupInfoSelfInfo;
})();

$root.XmsgImGroupInfoMember = (function() {

    /**
     * Properties of a XmsgImGroupInfoMember.
     * @exports IXmsgImGroupInfoMember
     * @interface IXmsgImGroupInfoMember
     * @property {string|null} [cgt] XmsgImGroupInfoMember cgt
     * @property {boolean|null} [enable] XmsgImGroupInfoMember enable
     * @property {Object.<string,string>|null} [info] XmsgImGroupInfoMember info
     * @property {number|Long|null} [ver] XmsgImGroupInfoMember ver
     * @property {number|Long|null} [gts] XmsgImGroupInfoMember gts
     * @property {number|Long|null} [uts] XmsgImGroupInfoMember uts
     */

    /**
     * Constructs a new XmsgImGroupInfoMember.
     * @exports XmsgImGroupInfoMember
     * @classdesc Represents a XmsgImGroupInfoMember.
     * @implements IXmsgImGroupInfoMember
     * @constructor
     * @param {IXmsgImGroupInfoMember=} [properties] Properties to set
     */
    function XmsgImGroupInfoMember(properties) {
        this.info = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupInfoMember cgt.
     * @member {string} cgt
     * @memberof XmsgImGroupInfoMember
     * @instance
     */
    XmsgImGroupInfoMember.prototype.cgt = "";

    /**
     * XmsgImGroupInfoMember enable.
     * @member {boolean} enable
     * @memberof XmsgImGroupInfoMember
     * @instance
     */
    XmsgImGroupInfoMember.prototype.enable = false;

    /**
     * XmsgImGroupInfoMember info.
     * @member {Object.<string,string>} info
     * @memberof XmsgImGroupInfoMember
     * @instance
     */
    XmsgImGroupInfoMember.prototype.info = $util.emptyObject;

    /**
     * XmsgImGroupInfoMember ver.
     * @member {number|Long} ver
     * @memberof XmsgImGroupInfoMember
     * @instance
     */
    XmsgImGroupInfoMember.prototype.ver = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupInfoMember gts.
     * @member {number|Long} gts
     * @memberof XmsgImGroupInfoMember
     * @instance
     */
    XmsgImGroupInfoMember.prototype.gts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * XmsgImGroupInfoMember uts.
     * @member {number|Long} uts
     * @memberof XmsgImGroupInfoMember
     * @instance
     */
    XmsgImGroupInfoMember.prototype.uts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new XmsgImGroupInfoMember instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupInfoMember
     * @static
     * @param {IXmsgImGroupInfoMember=} [properties] Properties to set
     * @returns {XmsgImGroupInfoMember} XmsgImGroupInfoMember instance
     */
    XmsgImGroupInfoMember.create = function create(properties) {
        return new XmsgImGroupInfoMember(properties);
    };

    /**
     * Encodes the specified XmsgImGroupInfoMember message. Does not implicitly {@link XmsgImGroupInfoMember.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupInfoMember
     * @static
     * @param {IXmsgImGroupInfoMember} message XmsgImGroupInfoMember message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupInfoMember.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.enable != null && message.hasOwnProperty("enable"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.enable);
        if (message.info != null && message.hasOwnProperty("info"))
            for (var keys = Object.keys(message.info), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.info[keys[i]]).ldelim();
        if (message.ver != null && message.hasOwnProperty("ver"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.ver);
        if (message.gts != null && message.hasOwnProperty("gts"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.gts);
        if (message.uts != null && message.hasOwnProperty("uts"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.uts);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupInfoMember message, length delimited. Does not implicitly {@link XmsgImGroupInfoMember.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupInfoMember
     * @static
     * @param {IXmsgImGroupInfoMember} message XmsgImGroupInfoMember message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupInfoMember.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupInfoMember message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupInfoMember
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupInfoMember} XmsgImGroupInfoMember
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupInfoMember.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupInfoMember(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.enable = reader.bool();
                break;
            case 3:
                reader.skip().pos++;
                if (message.info === $util.emptyObject)
                    message.info = {};
                key = reader.string();
                reader.pos++;
                message.info[key] = reader.string();
                break;
            case 4:
                message.ver = reader.uint64();
                break;
            case 5:
                message.gts = reader.uint64();
                break;
            case 6:
                message.uts = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupInfoMember message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupInfoMember
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupInfoMember} XmsgImGroupInfoMember
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupInfoMember.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupInfoMember message.
     * @function verify
     * @memberof XmsgImGroupInfoMember
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupInfoMember.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.enable != null && message.hasOwnProperty("enable"))
            if (typeof message.enable !== "boolean")
                return "enable: boolean expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            if (!$util.isObject(message.info))
                return "info: object expected";
            var key = Object.keys(message.info);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.info[key[i]]))
                    return "info: string{k:string} expected";
        }
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (!$util.isInteger(message.ver) && !(message.ver && $util.isInteger(message.ver.low) && $util.isInteger(message.ver.high)))
                return "ver: integer|Long expected";
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (!$util.isInteger(message.gts) && !(message.gts && $util.isInteger(message.gts.low) && $util.isInteger(message.gts.high)))
                return "gts: integer|Long expected";
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (!$util.isInteger(message.uts) && !(message.uts && $util.isInteger(message.uts.low) && $util.isInteger(message.uts.high)))
                return "uts: integer|Long expected";
        return null;
    };

    /**
     * Creates a XmsgImGroupInfoMember message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupInfoMember
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupInfoMember} XmsgImGroupInfoMember
     */
    XmsgImGroupInfoMember.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupInfoMember)
            return object;
        var message = new $root.XmsgImGroupInfoMember();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.enable != null)
            message.enable = Boolean(object.enable);
        if (object.info) {
            if (typeof object.info !== "object")
                throw TypeError(".XmsgImGroupInfoMember.info: object expected");
            message.info = {};
            for (var keys = Object.keys(object.info), i = 0; i < keys.length; ++i)
                message.info[keys[i]] = String(object.info[keys[i]]);
        }
        if (object.ver != null)
            if ($util.Long)
                (message.ver = $util.Long.fromValue(object.ver)).unsigned = true;
            else if (typeof object.ver === "string")
                message.ver = parseInt(object.ver, 10);
            else if (typeof object.ver === "number")
                message.ver = object.ver;
            else if (typeof object.ver === "object")
                message.ver = new $util.LongBits(object.ver.low >>> 0, object.ver.high >>> 0).toNumber(true);
        if (object.gts != null)
            if ($util.Long)
                (message.gts = $util.Long.fromValue(object.gts)).unsigned = true;
            else if (typeof object.gts === "string")
                message.gts = parseInt(object.gts, 10);
            else if (typeof object.gts === "number")
                message.gts = object.gts;
            else if (typeof object.gts === "object")
                message.gts = new $util.LongBits(object.gts.low >>> 0, object.gts.high >>> 0).toNumber(true);
        if (object.uts != null)
            if ($util.Long)
                (message.uts = $util.Long.fromValue(object.uts)).unsigned = true;
            else if (typeof object.uts === "string")
                message.uts = parseInt(object.uts, 10);
            else if (typeof object.uts === "number")
                message.uts = object.uts;
            else if (typeof object.uts === "object")
                message.uts = new $util.LongBits(object.uts.low >>> 0, object.uts.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupInfoMember message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupInfoMember
     * @static
     * @param {XmsgImGroupInfoMember} message XmsgImGroupInfoMember
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupInfoMember.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.info = {};
        if (options.defaults) {
            object.cgt = "";
            object.enable = false;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ver = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ver = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gts = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uts = options.longs === String ? "0" : 0;
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.enable != null && message.hasOwnProperty("enable"))
            object.enable = message.enable;
        var keys2;
        if (message.info && (keys2 = Object.keys(message.info)).length) {
            object.info = {};
            for (var j = 0; j < keys2.length; ++j)
                object.info[keys2[j]] = message.info[keys2[j]];
        }
        if (message.ver != null && message.hasOwnProperty("ver"))
            if (typeof message.ver === "number")
                object.ver = options.longs === String ? String(message.ver) : message.ver;
            else
                object.ver = options.longs === String ? $util.Long.prototype.toString.call(message.ver) : options.longs === Number ? new $util.LongBits(message.ver.low >>> 0, message.ver.high >>> 0).toNumber(true) : message.ver;
        if (message.gts != null && message.hasOwnProperty("gts"))
            if (typeof message.gts === "number")
                object.gts = options.longs === String ? String(message.gts) : message.gts;
            else
                object.gts = options.longs === String ? $util.Long.prototype.toString.call(message.gts) : options.longs === Number ? new $util.LongBits(message.gts.low >>> 0, message.gts.high >>> 0).toNumber(true) : message.gts;
        if (message.uts != null && message.hasOwnProperty("uts"))
            if (typeof message.uts === "number")
                object.uts = options.longs === String ? String(message.uts) : message.uts;
            else
                object.uts = options.longs === String ? $util.Long.prototype.toString.call(message.uts) : options.longs === Number ? new $util.LongBits(message.uts.low >>> 0, message.uts.high >>> 0).toNumber(true) : message.uts;
        return object;
    };

    /**
     * Converts this XmsgImGroupInfoMember to JSON.
     * @function toJSON
     * @memberof XmsgImGroupInfoMember
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupInfoMember.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupInfoMember;
})();

$root.XmsgImGroupInfoUpdateReq = (function() {

    /**
     * Properties of a XmsgImGroupInfoUpdateReq.
     * @exports IXmsgImGroupInfoUpdateReq
     * @interface IXmsgImGroupInfoUpdateReq
     * @property {string|null} [cgt] XmsgImGroupInfoUpdateReq cgt
     * @property {Object.<string,string>|null} [upsert] XmsgImGroupInfoUpdateReq upsert
     * @property {Array.<string>|null} [remove] XmsgImGroupInfoUpdateReq remove
     */

    /**
     * Constructs a new XmsgImGroupInfoUpdateReq.
     * @exports XmsgImGroupInfoUpdateReq
     * @classdesc Represents a XmsgImGroupInfoUpdateReq.
     * @implements IXmsgImGroupInfoUpdateReq
     * @constructor
     * @param {IXmsgImGroupInfoUpdateReq=} [properties] Properties to set
     */
    function XmsgImGroupInfoUpdateReq(properties) {
        this.upsert = {};
        this.remove = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupInfoUpdateReq cgt.
     * @member {string} cgt
     * @memberof XmsgImGroupInfoUpdateReq
     * @instance
     */
    XmsgImGroupInfoUpdateReq.prototype.cgt = "";

    /**
     * XmsgImGroupInfoUpdateReq upsert.
     * @member {Object.<string,string>} upsert
     * @memberof XmsgImGroupInfoUpdateReq
     * @instance
     */
    XmsgImGroupInfoUpdateReq.prototype.upsert = $util.emptyObject;

    /**
     * XmsgImGroupInfoUpdateReq remove.
     * @member {Array.<string>} remove
     * @memberof XmsgImGroupInfoUpdateReq
     * @instance
     */
    XmsgImGroupInfoUpdateReq.prototype.remove = $util.emptyArray;

    /**
     * Creates a new XmsgImGroupInfoUpdateReq instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupInfoUpdateReq
     * @static
     * @param {IXmsgImGroupInfoUpdateReq=} [properties] Properties to set
     * @returns {XmsgImGroupInfoUpdateReq} XmsgImGroupInfoUpdateReq instance
     */
    XmsgImGroupInfoUpdateReq.create = function create(properties) {
        return new XmsgImGroupInfoUpdateReq(properties);
    };

    /**
     * Encodes the specified XmsgImGroupInfoUpdateReq message. Does not implicitly {@link XmsgImGroupInfoUpdateReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupInfoUpdateReq
     * @static
     * @param {IXmsgImGroupInfoUpdateReq} message XmsgImGroupInfoUpdateReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupInfoUpdateReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.upsert != null && message.hasOwnProperty("upsert"))
            for (var keys = Object.keys(message.upsert), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.upsert[keys[i]]).ldelim();
        if (message.remove != null && message.remove.length)
            for (var i = 0; i < message.remove.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.remove[i]);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupInfoUpdateReq message, length delimited. Does not implicitly {@link XmsgImGroupInfoUpdateReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupInfoUpdateReq
     * @static
     * @param {IXmsgImGroupInfoUpdateReq} message XmsgImGroupInfoUpdateReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupInfoUpdateReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupInfoUpdateReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupInfoUpdateReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupInfoUpdateReq} XmsgImGroupInfoUpdateReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupInfoUpdateReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupInfoUpdateReq(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                reader.skip().pos++;
                if (message.upsert === $util.emptyObject)
                    message.upsert = {};
                key = reader.string();
                reader.pos++;
                message.upsert[key] = reader.string();
                break;
            case 3:
                if (!(message.remove && message.remove.length))
                    message.remove = [];
                message.remove.push(reader.string());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupInfoUpdateReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupInfoUpdateReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupInfoUpdateReq} XmsgImGroupInfoUpdateReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupInfoUpdateReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupInfoUpdateReq message.
     * @function verify
     * @memberof XmsgImGroupInfoUpdateReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupInfoUpdateReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.upsert != null && message.hasOwnProperty("upsert")) {
            if (!$util.isObject(message.upsert))
                return "upsert: object expected";
            var key = Object.keys(message.upsert);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.upsert[key[i]]))
                    return "upsert: string{k:string} expected";
        }
        if (message.remove != null && message.hasOwnProperty("remove")) {
            if (!Array.isArray(message.remove))
                return "remove: array expected";
            for (var i = 0; i < message.remove.length; ++i)
                if (!$util.isString(message.remove[i]))
                    return "remove: string[] expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupInfoUpdateReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupInfoUpdateReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupInfoUpdateReq} XmsgImGroupInfoUpdateReq
     */
    XmsgImGroupInfoUpdateReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupInfoUpdateReq)
            return object;
        var message = new $root.XmsgImGroupInfoUpdateReq();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.upsert) {
            if (typeof object.upsert !== "object")
                throw TypeError(".XmsgImGroupInfoUpdateReq.upsert: object expected");
            message.upsert = {};
            for (var keys = Object.keys(object.upsert), i = 0; i < keys.length; ++i)
                message.upsert[keys[i]] = String(object.upsert[keys[i]]);
        }
        if (object.remove) {
            if (!Array.isArray(object.remove))
                throw TypeError(".XmsgImGroupInfoUpdateReq.remove: array expected");
            message.remove = [];
            for (var i = 0; i < object.remove.length; ++i)
                message.remove[i] = String(object.remove[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupInfoUpdateReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupInfoUpdateReq
     * @static
     * @param {XmsgImGroupInfoUpdateReq} message XmsgImGroupInfoUpdateReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupInfoUpdateReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.remove = [];
        if (options.objects || options.defaults)
            object.upsert = {};
        if (options.defaults)
            object.cgt = "";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        var keys2;
        if (message.upsert && (keys2 = Object.keys(message.upsert)).length) {
            object.upsert = {};
            for (var j = 0; j < keys2.length; ++j)
                object.upsert[keys2[j]] = message.upsert[keys2[j]];
        }
        if (message.remove && message.remove.length) {
            object.remove = [];
            for (var j = 0; j < message.remove.length; ++j)
                object.remove[j] = message.remove[j];
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupInfoUpdateReq to JSON.
     * @function toJSON
     * @memberof XmsgImGroupInfoUpdateReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupInfoUpdateReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupInfoUpdateReq;
})();

$root.XmsgImGroupInfoUpdateRsp = (function() {

    /**
     * Properties of a XmsgImGroupInfoUpdateRsp.
     * @exports IXmsgImGroupInfoUpdateRsp
     * @interface IXmsgImGroupInfoUpdateRsp
     * @property {Object.<string,string>|null} [ext] XmsgImGroupInfoUpdateRsp ext
     */

    /**
     * Constructs a new XmsgImGroupInfoUpdateRsp.
     * @exports XmsgImGroupInfoUpdateRsp
     * @classdesc Represents a XmsgImGroupInfoUpdateRsp.
     * @implements IXmsgImGroupInfoUpdateRsp
     * @constructor
     * @param {IXmsgImGroupInfoUpdateRsp=} [properties] Properties to set
     */
    function XmsgImGroupInfoUpdateRsp(properties) {
        this.ext = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupInfoUpdateRsp ext.
     * @member {Object.<string,string>} ext
     * @memberof XmsgImGroupInfoUpdateRsp
     * @instance
     */
    XmsgImGroupInfoUpdateRsp.prototype.ext = $util.emptyObject;

    /**
     * Creates a new XmsgImGroupInfoUpdateRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupInfoUpdateRsp
     * @static
     * @param {IXmsgImGroupInfoUpdateRsp=} [properties] Properties to set
     * @returns {XmsgImGroupInfoUpdateRsp} XmsgImGroupInfoUpdateRsp instance
     */
    XmsgImGroupInfoUpdateRsp.create = function create(properties) {
        return new XmsgImGroupInfoUpdateRsp(properties);
    };

    /**
     * Encodes the specified XmsgImGroupInfoUpdateRsp message. Does not implicitly {@link XmsgImGroupInfoUpdateRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupInfoUpdateRsp
     * @static
     * @param {IXmsgImGroupInfoUpdateRsp} message XmsgImGroupInfoUpdateRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupInfoUpdateRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ext != null && message.hasOwnProperty("ext"))
            for (var keys = Object.keys(message.ext), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.ext[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupInfoUpdateRsp message, length delimited. Does not implicitly {@link XmsgImGroupInfoUpdateRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupInfoUpdateRsp
     * @static
     * @param {IXmsgImGroupInfoUpdateRsp} message XmsgImGroupInfoUpdateRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupInfoUpdateRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupInfoUpdateRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupInfoUpdateRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupInfoUpdateRsp} XmsgImGroupInfoUpdateRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupInfoUpdateRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupInfoUpdateRsp(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                reader.skip().pos++;
                if (message.ext === $util.emptyObject)
                    message.ext = {};
                key = reader.string();
                reader.pos++;
                message.ext[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupInfoUpdateRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupInfoUpdateRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupInfoUpdateRsp} XmsgImGroupInfoUpdateRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupInfoUpdateRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupInfoUpdateRsp message.
     * @function verify
     * @memberof XmsgImGroupInfoUpdateRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupInfoUpdateRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ext != null && message.hasOwnProperty("ext")) {
            if (!$util.isObject(message.ext))
                return "ext: object expected";
            var key = Object.keys(message.ext);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.ext[key[i]]))
                    return "ext: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupInfoUpdateRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupInfoUpdateRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupInfoUpdateRsp} XmsgImGroupInfoUpdateRsp
     */
    XmsgImGroupInfoUpdateRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupInfoUpdateRsp)
            return object;
        var message = new $root.XmsgImGroupInfoUpdateRsp();
        if (object.ext) {
            if (typeof object.ext !== "object")
                throw TypeError(".XmsgImGroupInfoUpdateRsp.ext: object expected");
            message.ext = {};
            for (var keys = Object.keys(object.ext), i = 0; i < keys.length; ++i)
                message.ext[keys[i]] = String(object.ext[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupInfoUpdateRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupInfoUpdateRsp
     * @static
     * @param {XmsgImGroupInfoUpdateRsp} message XmsgImGroupInfoUpdateRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupInfoUpdateRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.ext = {};
        var keys2;
        if (message.ext && (keys2 = Object.keys(message.ext)).length) {
            object.ext = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ext[keys2[j]] = message.ext[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupInfoUpdateRsp to JSON.
     * @function toJSON
     * @memberof XmsgImGroupInfoUpdateRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupInfoUpdateRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupInfoUpdateRsp;
})();

$root.XmsgImGroupMsgRecvCfgReq = (function() {

    /**
     * Properties of a XmsgImGroupMsgRecvCfgReq.
     * @exports IXmsgImGroupMsgRecvCfgReq
     * @interface IXmsgImGroupMsgRecvCfgReq
     * @property {string|null} [cgt] XmsgImGroupMsgRecvCfgReq cgt
     * @property {string|null} [type] XmsgImGroupMsgRecvCfgReq type
     */

    /**
     * Constructs a new XmsgImGroupMsgRecvCfgReq.
     * @exports XmsgImGroupMsgRecvCfgReq
     * @classdesc Represents a XmsgImGroupMsgRecvCfgReq.
     * @implements IXmsgImGroupMsgRecvCfgReq
     * @constructor
     * @param {IXmsgImGroupMsgRecvCfgReq=} [properties] Properties to set
     */
    function XmsgImGroupMsgRecvCfgReq(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMsgRecvCfgReq cgt.
     * @member {string} cgt
     * @memberof XmsgImGroupMsgRecvCfgReq
     * @instance
     */
    XmsgImGroupMsgRecvCfgReq.prototype.cgt = "";

    /**
     * XmsgImGroupMsgRecvCfgReq type.
     * @member {string} type
     * @memberof XmsgImGroupMsgRecvCfgReq
     * @instance
     */
    XmsgImGroupMsgRecvCfgReq.prototype.type = "";

    /**
     * Creates a new XmsgImGroupMsgRecvCfgReq instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMsgRecvCfgReq
     * @static
     * @param {IXmsgImGroupMsgRecvCfgReq=} [properties] Properties to set
     * @returns {XmsgImGroupMsgRecvCfgReq} XmsgImGroupMsgRecvCfgReq instance
     */
    XmsgImGroupMsgRecvCfgReq.create = function create(properties) {
        return new XmsgImGroupMsgRecvCfgReq(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMsgRecvCfgReq message. Does not implicitly {@link XmsgImGroupMsgRecvCfgReq.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMsgRecvCfgReq
     * @static
     * @param {IXmsgImGroupMsgRecvCfgReq} message XmsgImGroupMsgRecvCfgReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgRecvCfgReq.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cgt);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.type);
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMsgRecvCfgReq message, length delimited. Does not implicitly {@link XmsgImGroupMsgRecvCfgReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMsgRecvCfgReq
     * @static
     * @param {IXmsgImGroupMsgRecvCfgReq} message XmsgImGroupMsgRecvCfgReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgRecvCfgReq.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMsgRecvCfgReq message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMsgRecvCfgReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMsgRecvCfgReq} XmsgImGroupMsgRecvCfgReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgRecvCfgReq.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMsgRecvCfgReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cgt = reader.string();
                break;
            case 2:
                message.type = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMsgRecvCfgReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMsgRecvCfgReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMsgRecvCfgReq} XmsgImGroupMsgRecvCfgReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgRecvCfgReq.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMsgRecvCfgReq message.
     * @function verify
     * @memberof XmsgImGroupMsgRecvCfgReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMsgRecvCfgReq.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            if (!$util.isString(message.cgt))
                return "cgt: string expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isString(message.type))
                return "type: string expected";
        return null;
    };

    /**
     * Creates a XmsgImGroupMsgRecvCfgReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMsgRecvCfgReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMsgRecvCfgReq} XmsgImGroupMsgRecvCfgReq
     */
    XmsgImGroupMsgRecvCfgReq.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMsgRecvCfgReq)
            return object;
        var message = new $root.XmsgImGroupMsgRecvCfgReq();
        if (object.cgt != null)
            message.cgt = String(object.cgt);
        if (object.type != null)
            message.type = String(object.type);
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMsgRecvCfgReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMsgRecvCfgReq
     * @static
     * @param {XmsgImGroupMsgRecvCfgReq} message XmsgImGroupMsgRecvCfgReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMsgRecvCfgReq.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cgt = "";
            object.type = "";
        }
        if (message.cgt != null && message.hasOwnProperty("cgt"))
            object.cgt = message.cgt;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        return object;
    };

    /**
     * Converts this XmsgImGroupMsgRecvCfgReq to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMsgRecvCfgReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMsgRecvCfgReq.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMsgRecvCfgReq;
})();

$root.XmsgImGroupMsgRecvCfgRsp = (function() {

    /**
     * Properties of a XmsgImGroupMsgRecvCfgRsp.
     * @exports IXmsgImGroupMsgRecvCfgRsp
     * @interface IXmsgImGroupMsgRecvCfgRsp
     * @property {Object.<string,string>|null} [ext] XmsgImGroupMsgRecvCfgRsp ext
     */

    /**
     * Constructs a new XmsgImGroupMsgRecvCfgRsp.
     * @exports XmsgImGroupMsgRecvCfgRsp
     * @classdesc Represents a XmsgImGroupMsgRecvCfgRsp.
     * @implements IXmsgImGroupMsgRecvCfgRsp
     * @constructor
     * @param {IXmsgImGroupMsgRecvCfgRsp=} [properties] Properties to set
     */
    function XmsgImGroupMsgRecvCfgRsp(properties) {
        this.ext = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * XmsgImGroupMsgRecvCfgRsp ext.
     * @member {Object.<string,string>} ext
     * @memberof XmsgImGroupMsgRecvCfgRsp
     * @instance
     */
    XmsgImGroupMsgRecvCfgRsp.prototype.ext = $util.emptyObject;

    /**
     * Creates a new XmsgImGroupMsgRecvCfgRsp instance using the specified properties.
     * @function create
     * @memberof XmsgImGroupMsgRecvCfgRsp
     * @static
     * @param {IXmsgImGroupMsgRecvCfgRsp=} [properties] Properties to set
     * @returns {XmsgImGroupMsgRecvCfgRsp} XmsgImGroupMsgRecvCfgRsp instance
     */
    XmsgImGroupMsgRecvCfgRsp.create = function create(properties) {
        return new XmsgImGroupMsgRecvCfgRsp(properties);
    };

    /**
     * Encodes the specified XmsgImGroupMsgRecvCfgRsp message. Does not implicitly {@link XmsgImGroupMsgRecvCfgRsp.verify|verify} messages.
     * @function encode
     * @memberof XmsgImGroupMsgRecvCfgRsp
     * @static
     * @param {IXmsgImGroupMsgRecvCfgRsp} message XmsgImGroupMsgRecvCfgRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgRecvCfgRsp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ext != null && message.hasOwnProperty("ext"))
            for (var keys = Object.keys(message.ext), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.ext[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified XmsgImGroupMsgRecvCfgRsp message, length delimited. Does not implicitly {@link XmsgImGroupMsgRecvCfgRsp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof XmsgImGroupMsgRecvCfgRsp
     * @static
     * @param {IXmsgImGroupMsgRecvCfgRsp} message XmsgImGroupMsgRecvCfgRsp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    XmsgImGroupMsgRecvCfgRsp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a XmsgImGroupMsgRecvCfgRsp message from the specified reader or buffer.
     * @function decode
     * @memberof XmsgImGroupMsgRecvCfgRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {XmsgImGroupMsgRecvCfgRsp} XmsgImGroupMsgRecvCfgRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgRecvCfgRsp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XmsgImGroupMsgRecvCfgRsp(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                reader.skip().pos++;
                if (message.ext === $util.emptyObject)
                    message.ext = {};
                key = reader.string();
                reader.pos++;
                message.ext[key] = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a XmsgImGroupMsgRecvCfgRsp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof XmsgImGroupMsgRecvCfgRsp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {XmsgImGroupMsgRecvCfgRsp} XmsgImGroupMsgRecvCfgRsp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    XmsgImGroupMsgRecvCfgRsp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a XmsgImGroupMsgRecvCfgRsp message.
     * @function verify
     * @memberof XmsgImGroupMsgRecvCfgRsp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    XmsgImGroupMsgRecvCfgRsp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ext != null && message.hasOwnProperty("ext")) {
            if (!$util.isObject(message.ext))
                return "ext: object expected";
            var key = Object.keys(message.ext);
            for (var i = 0; i < key.length; ++i)
                if (!$util.isString(message.ext[key[i]]))
                    return "ext: string{k:string} expected";
        }
        return null;
    };

    /**
     * Creates a XmsgImGroupMsgRecvCfgRsp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof XmsgImGroupMsgRecvCfgRsp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {XmsgImGroupMsgRecvCfgRsp} XmsgImGroupMsgRecvCfgRsp
     */
    XmsgImGroupMsgRecvCfgRsp.fromObject = function fromObject(object) {
        if (object instanceof $root.XmsgImGroupMsgRecvCfgRsp)
            return object;
        var message = new $root.XmsgImGroupMsgRecvCfgRsp();
        if (object.ext) {
            if (typeof object.ext !== "object")
                throw TypeError(".XmsgImGroupMsgRecvCfgRsp.ext: object expected");
            message.ext = {};
            for (var keys = Object.keys(object.ext), i = 0; i < keys.length; ++i)
                message.ext[keys[i]] = String(object.ext[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a XmsgImGroupMsgRecvCfgRsp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof XmsgImGroupMsgRecvCfgRsp
     * @static
     * @param {XmsgImGroupMsgRecvCfgRsp} message XmsgImGroupMsgRecvCfgRsp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    XmsgImGroupMsgRecvCfgRsp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.ext = {};
        var keys2;
        if (message.ext && (keys2 = Object.keys(message.ext)).length) {
            object.ext = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ext[keys2[j]] = message.ext[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this XmsgImGroupMsgRecvCfgRsp to JSON.
     * @function toJSON
     * @memberof XmsgImGroupMsgRecvCfgRsp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    XmsgImGroupMsgRecvCfgRsp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return XmsgImGroupMsgRecvCfgRsp;
})();

module.exports = $root;
